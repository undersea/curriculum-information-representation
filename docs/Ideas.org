
* Ideas
** Multi story floor plan
   The building represents the programme.  Years are represented by levels in a building. Each level contains rooms representing papers.  Stairs from rooms can indicate a links between one paper and another at different levels.  Stairs can go up or down.
** Atom view               
   Each atom is a programme.  The nucleus is the programme name, with each electron being a paper.  Each paper can spin around the nucleus at differing orbits with the lowest one being year 1, going up to year 2, etc.
** Line graph              
   Lines represent path taken, showing where papers intersect
** Jigsaw puzzle           
   Puzzle is programme, and pieces are papers, connected to prerequisites and corequisites.
** Self Organising map     
 + Papers are positioned in the plan in a algorithmic approche using AI and graph theory techniques.
 + Maybe uses idea from jigsaw puzzle and use the connections as limiters
** Templates
*** A degree is a template via which you can create the programme from
    [[./drawing.png]]
* DONE Create a vertex, edge graph library in python that I can use to map the papers onto

* TODO See if I can create some custom git lisp commands for doing git svn clone --username jdhurfor [[https://ist-linux1.massey.ac.nz/svn/jdhurfor/]]
* Seems you have to commit to local git repository 1st then do magit-svn-dcommit to update svn copy and if this goes wrong do an magit-stash then commit to svn then apply this stash and commit to local before update of svn again
** got rid of svn git stuff locally as was causing to much trouble
* Group according to what year they fall in given a set of constraints such as prereq must not go after the paper they are prereq for and year they fall on must be equal to or greater than the level of the paper
* Changes
** Turns out I am restricted to just using the meta info on the papers and not the offering info itself.
** Need to be able to get a list of papers that make up each programme of study
*** It is not really possible to get accurate complete lists of papers for each programme as each programme paper list page is done differently making it hard to parse and it will need a huge list of regular expressions to use
*** Discard idea of getting programme info from massey programme page as each is to different from the other to reliable get a list of papers
*** Will use the learn from previous student choices method and also maybe get a list of typical papers from programme directors
** The paper information like prerequsites are possible to get as that infomation is displayed in a uniform manner and is not as varied as programme paper lists
*** Will get paper pre and coreq from paper web pages as they are sufficiently similar and consistent in layout
* Maybe keep a track of papers choosen by people and what programme they choose.  Use this information to build profiles on what papers are needed.  Use this list as a suggestion to the end user. Only downside is it relies on the user to know what papers to select the first time this application is used.
* Created regular expressions to parse degree programme web pages to get a list of papers.
* Made another set of regular expressions to parse paper description pages to extract the prerequisites, coreg and restrictions of a paper
* Created a graph library to store this information in
* When doing a search for related papers, I may keep the regular expression simple and any 'OR' and 'AND' operations be done using the set() methods otherwise expression will just get to complicated
* [2010-09-27 Mon] Developing prototypes first as a starting point and modifying as I go along from there
** [2010-09-27 Mon] Created a basic prototype for a template authoring system
* [2010-09-27 Mon] Updated Ideas document on google docs
** Corridors may link rooms to stairs, which also gives a way to group papers together by prerequisites
* Outline
** Rules for degrees/majors
** Identify majors and papers needed for that major
** Do this from a location(campus) point of view
** Yr 1 Degree X/Major Y
*** What must I do?
*** What papers do they lead to?
** Yr 2 (Done some papers and have changed mind)
*** What can I do instead?
*** What majors and/or degrees do the papers I've done so far count towards?
* Rules for degrees and papers (sourced from Giovanni)
#+AUTHOR:    
#+EMAIL:     
#+DATE:      
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

** Degree structure
 - majoring requirements for each degree (BA/BSc/BInfSci/BE ...)
** Subject-specific majoring requirements
 - majoring requirements for Computer Science, Maths ...
** Paper-specific details
 - no. of credits
 - prerequisites
 - co-requisites
 - restrictions
* Possible libraries <2010-11-02 Tue>
  Looked at possible libraries for doing graphs with javascript.
  Possible choices are Raphaël, Canviz, Dracula, Ajaxian
 - Raphaël
  Vector graphics library for javascript
   http://raphaeljs.com/
  



* Further ideas <2010-11-02 Tue>

** Do this as a django app

** Use javascript to draw graphics like Raphaël to draw the graphs vertexes, and edges
   I can possible make this a interactive web graph using Raphaël
** Use java to create applets to run in the browser
   Then can use java graphing libraries
** Run as a standalone programme like java or C# or something
   Drawback is that they have to download it then run it so maybe not as
   accessible due to possible reluctance of people to download standalone programmes

** Use javascript regualr expressions to figure out whether papers taken for-full a degree/major requirement
 - ie BIndSci needs to have a stats paper, but that can be lots of
   papers so regular expression would be '161\d{3}'
 - Website for finding out how to do RE in javascript
   -
     http://www.yourinspirationweb.com/en/how-to-use-regular-expressions-in-javascript/

* What do I want to do?
** I have done these papers, what degree/major can I do?
   I can see this happening in this way
   + A degree list is shown of possibilities.
   + Some indication of how well the papers that have been done fit
     each of the degrees listed.
     - How many of the degree papers have I done so far.
     - What papers I have done that don't fit this degree
   + A list of papers that can follow on the ones that have already
     been done and still qualify for the degree selected.
   + A break down of the paths that can be taken to finish a
     degree. (this will probably be very challenging)
     - This would involve some way of cycling through the path choices.
     - Give a metric of the suitability of each path
       - The number of papers that you have done that you can't use.
       - The number of extra papers you have to do
       - etc
   + Do all this by campus
     - I'm in Albany, what papers are offered here for the degree I
       want to do.
     - Can I do the degree on this campus, or do I have to go to
       another campus to do this.

** I want to this degree/major, what do I need to do?
   + What papers do I need to do to for-full my major
   + What papers do I need to do to for-full any minor I choose
   + What papers do I need to do to for-full the actual degree
   + What possible paths may I choose from
     - Cycle through these possibilities
     - Give some sort of metric for each path
       - Could be based on the recommended papers
       - What career
   + Do all this by campus
     - I'm in Albany, what papers are offered here for the degree I
       want to do.
     - Can I do the degree on this campus, or do I have to go to
       another campus to do this.

** 3 aspects to this problem
  - create network of papers
    - this is similar to the Internet but with less connections
      between each node
    - Use only the current degree to determine what papers make up the network
    - recreate the network every time a new degree is chosen
  - determine the best path
    - based on what has been done
    - based on what is recommended
    - What needs to be done
    - shortest route?
  - determine the best fit for already existing papers



