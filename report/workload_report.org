#+TITLE:     Workload Report
#+AUTHOR:    James Hurford
#+EMAIL:     terrasea@gmail.com
#+DATE:      
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 


#+LaTeX_HEADER: \setlength{\parindent}{0pt}
#+LaTeX_HEADER: \setlength{\parskip}{1em}



* Workload

** Introduction
The application is replacing a spreadsheet, which required lots of
input from various parties, and require collation of all these inputs
into one spreadsheet.  We wanted a application which users could all
input into one source, thus saving time and effort in collating the
data. This was to take the form of a web application.


For SEAT Management to more efficiently do their job they would
benefit from a application which streamlines the data input process
and minimises the amount of intervention that is needed to produce the
required reports.  I planned to remove a few steps from this process.

** The Problem
Workload is a measure of how many virtual hours each staff member is
going to be doing for the coming year. The purpose of Workload is to
spread the workload as fairly among the staff.  It is a artificial
measurement, using a formula to determine a individuals hour based on
a set of predetermined metrics.

The task is to create a application to take in:

- For each paper offered

  + For each person teaching this paper how much of the paper they
    are teaching.
  + who the global coordinator is
  + who the local coordinator is

- The Admin roles for each of the members of staff and how much
  the admin roles are worth in Workload hours.
- For each staff
  + Which postgraduate they are supervising
    + how much supervision in percentage terms they are giving
    + Given that each postgraduate degree is worth different hours
      + What percentage of supervision they give and thus how many of
        those hours do they get.
** How to deliver the application.
What form the programme will take is a important step.  The clients
were not sure what exactly they wanted in terms of how the programme
is delivered.  It could be a standard desktop application, with
standard buttons, and windows.  It could be a console driven
application.  It could also be a web driven application.

In one of the initial meetings it was suggested that the application
could be a web served application.  This was a popular choice as it
overcame the problems of what OS it could be developed on, and remove
the need to install the application on every machine that wants to use
it.  The idea was already to have a central database to connect to and
this seemed like a good extra logical step in that direction. In fact
the server could be run on the same server as the database.



** Calculating Workload hours
How workload hours had to be the first priority in developing this
application.  The way that was chosen to tackle this was to go and see
one of the people involved in designing this formula.  The impression
was that the spreadsheet was designed by a committee. Dr Huub Bakker
was visited and some direction from him about the workload process was
gained.  A couple of documents were provided by Mrs Glenda Kirk, one
being the actual spreadsheet \cite{stdhours2} that this application is replacing and
the other is a document \cite{stdhours1} describing the workload formula and a few note
on how it is applied.  The process that was used to figure out how the
workload process works, could almost be called reverse engineering.
The document was sparse in describing the way the process worked and
the spreadsheet was a highly complex document, which was almost
impossible to follow.

*** The standard hours formula
The problem was described as each staff member has various jobs and
responsibilities.  For each of these jobs and responsibilities they
get awarded Workload hours, based upon a formula.  The way in which
Workload hours are assigned was described in a word document called
"Standard Hours Formula" \cite{stdhours1}.  This gave a formula
for calculating standard hours for a paper shown in figure
\ref{fig:formula}.  A table was also provided which gave the
coefficients for each teaching input shown in table \ref{table:coefficients}.

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
Standard Hours = Intercept*paper points/12.5  
                 + (Slope*no. of students)
                 - (144/no. of students)  
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:formula} The standard hours formula used to
calculate a standard hour component}
\end{figure}
#+END_LATEX


#+ATTR_LaTeX: placement=[H]
#+CAPTION: Coefficients table
#+LABEL: table:coefficients
|---------------------+--------+-----------+-------|
| Input               | Points | Intercept | Slope |
|---------------------+--------+-----------+-------|
| Undergraduate paper |   12.5 |     287.5 |     4 |
| Project paper       |     25 |         0 |    50 |
| Honours project     |     25 |         0 |    50 |
| DipApplSc           |     25 |         0 |    50 |
| Dip/Mast (1st Sup)  |     50 |         0 |    75 |
| Dip/Mast (2nd Sup)  |     50 |         0 |    25 |
| PhD (1st Sup)       |    100 |         0 |   100 |
| PhD (2nd Sup)       |    100 |         0 |    50 |
|---------------------+--------+-----------+-------|




There is also the spreadsheet used called "Std\_hrs\_2010\_14.xlsx" \cite{stdhours2}.
This gave a example of what numbers should be produced for each of the
papers given the number of enrolled.  The formula used in the
spreadsheet application was to complex to use except as a way of checking the answers when applying
the formula to a given paper, or any of the other components that are
used to create the total Workload hours for each member of staff. 

When the formula in figure \ref{fig:formula} using the coefficients
found in table \ref{table:coefficients} was applied to a undergraduate
paper using the number of students enrolled that year and the paper
points from that paper, the answer did not agree with the answer seen
in the spreadsheet.  After a while it was realised that the reason
they were not agreeing was that the formula in figure
\ref{fig:formula} is out of date.  When this document "Standard Hours
Formula (Amended January 2006)" was written in 2006, papers were worth
12.5 points each.  It is surmised that the intercept is how much a
single semester paper is worth in points.  A paper worth 25 points
should take twice as long to teach thus the  "paper points/12.5" part
of the formula would calculate to two and so the intercept would then
be multiplied by two. Thus representing the intercept of a 25 point
paper.  If you applied this formula using the points value of a paper
these days, which most are 15 points, then this formula will give you
entirely wrong answers with both the formula and coefficients given in
the document provided.  What was worked out is that the value 12.5 in
this formula is actually 15, and the table is also wrong with the
values of 25 actually being 30.  The adjusted formula is given in
figure \ref{fig:formula2} and the adjusted coefficients are given in
table \ref{table:coefficients2}. This now gave the same answer as the ones given in the spreadsheet for
2010 workload hours, for undergraduate papers.

#+begin_html 
<div id="fig:formula2" class="figure">
#+end_html
#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
Standard Hours = Intercept*paper points/15
                 + (Slope*no. of students)
                 - (144/no. of students) 

#+end_example

#+BEGIN_LATEX
\caption{\label{fig:formula2} The corrected standard hours formula used to
calculate a standard hour component}
\end{figure}
#+END_LATEX
#+begin_html 
</div>
#+end_html


#+ATTR_LATEX: width=40em, placement=[H]
#+CAPTION: A graph showing how many hour you get for a certain number of student for coordinating a paper
#+LABEL: fig:formulagraph
#+source: papergraph
#+begin_src python :file ./images/papergraph.png :exports results
  import pylab
  

  y2 = list()
  y3 = list()
    
  pylab.figure(1)
  studnumbers = range(1,100)
  
  for x in studnumbers:
      tmp2 = 12*15/15+(0.05*x) #global coord
      tmp3 = 3*15/15+(0.1*x) #local coord
      y2.append(tmp2)
      y3.append(tmp3)
  pylab.xlabel('Number of students')
  pylab.ylabel('Workload hours')
  #pylab.plot(studnumbers, y)
  pylab.plot(studnumbers, y2, label='Global coord')
  pylab.plot(studnumbers, y3, 'r^', label='Local coord')
  pylab.legend(loc=0)
  pylab.title('Student numbers and how much workload hours are gained')
  filename='images/papergraph.png'
  pylab.savefig(filename, format='png')
#+end_src

#+results: papergraph
[[file:./images/papergraph.png]]


#+ATTR_LATEX: width=40em, placement=[H]
#+CAPTION: A graph showing how many hour you get for a certain number of students for teaching a paper
#+LABEL: fig:formulagraph2
#+source: papergraph2
#+begin_src python :file ./images/papergraph2.png :exports results
  import pylab
  
  y = list()
  
  pylab.figure(1)
  studnumbers = range(1,100)
  for x in studnumbers:
      tmp = 287.5*15/15+(4*x)-(144/x)
      y.append(tmp)
  pylab.xlabel('Number of students')
  pylab.ylabel('Workload hours')
  pylab.plot(studnumbers, y)
  
  pylab.title('Student numbers and how much workload hours are gained')
  filename='images/papergraph2.png'
  pylab.savefig(filename, format='png')
#+end_src




#+ATTR_LaTeX: placement=[H]
#+CAPTION: Corrected Coefficients table
#+LABEL: table:coefficients2
|---------------------+--------+-----------+-------|
| Input               | Points | Intercept | Slope |
|---------------------+--------+-----------+-------|
| Undergraduate paper |     15 |     287.5 |     4 |
| Project paper       |     30 |         0 |    50 |
| Honours project     |     30 |         0 |    50 |
| DipApplSc           |     30 |         0 |    50 |
| Dip/Mast (1st Sup)  |     50 |         0 |    75 |
| Dip/Mast (2nd Sup)  |     50 |         0 |    25 |
| PhD (1st Sup)       |    100 |         0 |   100 |
| PhD (2nd Sup)       |    100 |         0 |    50 |
|---------------------+--------+-----------+-------|


*** Teaching allocation hours
The standard hours formula calculates how many hours a paper is worth
for that given year with the students enrolled in it that year.  Each
staff member who teaches this paper gets a share of these standard
hours that were calculate.  It is determined how much of the paper
they teach in percentage terms, and this percentage is the percentage
of the total standard hours this paper provides for that year.  an
example is provided in figure \ref{fig:example1}.

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
no. of students = 10
paper points = 15
Intercept = 287.5
Slope = 4

standard hours = 287.5*15/15
                 + (4*10)
                 - (144/10)
               = 313.1

staff1 teach allocation = 60%
staff2 teach allocation = 40%

staff1 gets 313.1*(60/100) = 187.86 standard hours
staff2 gets 313.1*(40/100) = 125.24 standard hours
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:example1} An example of how the standard hours are
used to calculate a staff members teaching hours}
\end{figure}
#+END_LATEX



*** Coordinator hours

For each paper it is recognised as having two coordinators.  The
global coordinator and the local coordinator.  The global coordinator
"overseas paper direction, paper content, cross campus equivalence
etc" \cite{stdhours1}.  The local coordinator "coordinates the paper
on an individual campus" \cite{stdhours1}.  The coordination of this
paper has a intercept of 15 and a slope of 0.15.  These are split
between the local and global coordinator.  This is shown in table
\ref{table:coord}.


#+ATTR_LaTeX: placement=[H]
#+CAPTION: Table showing the intercept and slope used for local and global coordinators
#+LABEL: table:coord
|-----------+-------------+-------------+-------|
|           | Global      | Local       |       |
|           | Coordinator | Coordinator | Total |
|-----------+-------------+-------------+-------|
| Intercept | 12          | 3           | 15    |
| Slope     | 0.05        | 0.1         | 0.15  |
|-----------+-------------+-------------+-------|


The standard hours formula, in figure \ref{fig:formula2}, was at first assumed to apply to all
aspects of workload hours including coordinator hours. When
coordinator hours were calculated using the formula in figure
\ref{fig:formula2} it came up with a answer which did not agree with the
example that was being looked at, at the time. In the notes given in
the "Standard Hours Formula" \cite{stdhours1}, it 
mentions the "small class" correction factor, which is 144 divided by
the number of students.  It does not mention also that for calculating
coordinator hours it was not included as part of the formula.  The way
this was discovered was a pure accident born of frustration.  It was
decided to see what the result would be if parts of the standard hours
formula were removed.  When this 144/no. of students was removed it
came up with the correct answer. This was repeated a few times to make
sure the assumption made is correct. The new formula is given in figure
\ref{fig:formula3}.

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example 
coordinator standard hours = Intercept*paper points/15
                             + (Slope*no. of students)
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:formula3} The corrected standard hours formula
used to calculate coordinator standard hours}
\end{figure}
#+END_LATEX


*** Other modifiers used to calculate standard hours
- *Off campus modifier:*
    A loading modifier of 1.25 is applied to the intercept for papers
    delivered by staff whose home campus is located elsewhere.
- *Same teaching material:*
    If the material taught in two papers is the same then the intercept is
    only included once.
- *Duplicate Teaching:*
    If a staff is teaching similar material in two papers, the the
    intercept is applied only once for both and a modifier of 1.5 is
    applied to this intercept.

These modifiers add a small level of complication.  How do
you know if the material is the same or similar across two papers?
What is the difference between same teaching and duplicate material?

The answer to the first question is, it can't be answered by a
software solution, but a solution is to let the user of the
application decide.  There is a solution to how the application can be
made to take this into account.  Provided in the spreadsheet, is a
intercept field.  This is a modifier which is applied to the equation,
and is a number from zero to one.
*** Project papers
Project papers have how many workload hours they are worth calculated
just like a normal undergraduate paper, like the formula in figure
\ref{fig:formula2}.  The difference is that the staff involved
supervise a set number of students, instead of teaching a percentage
of the paper, and thus get the hours that the portion of the total
enrolled students is worth.  The intercept for undergraduate project
papers is 40 and it has a slope of 0.  Thus if there are 10 enrolled
students, and the staff member was supervising 1 of them then the
hours they would get 2.56 workload hours.  Assuming that this is a
paper of 15 points in value. 

\begin{equation}
40*15/15+(0*10)-(144/10) = 25.6
25.6*(1/10) = 2.56
\end{equation}

Postgraduate project papers are also calculated given the formula from
figure \ref{fig:formula2}.  Their points value, intercept and slope
are given in table \ref{table:coefficients2}.

*** Postgraduate supervision
Staff members maybe supervising postgraduate students.  This
supervision is worth workload hours, but how many the staff member
gets depends on what postgraduate degree the postgraduate is doing and
how much supervision this staff member is giving the postgraduate
student. No where in the "Standard Hours Formula" \cite{stdhours1},
does it explain how this is done, but fortunately the people who
actually use the spreadsheet do.  They explained that the number of
hours for each postgraduate degree is different and that these hours
are divided among the supervising staff according to how much they are
supervising this postgraduate student.

The spreadsheet implementation uses a set of cells that contain the
workload hours that each degree is worth.  The extracted table, shown
in table \ref{table:pghours}, has one column with the shortened degree
name and next to that degree in the next column is the total hours.


#+ATTR_LaTeX: placement=[H]
#+CAPTION: The extracted postgraduate workload hours
#+LABEL: table:pghours
|---------------+-----|
| ApplSc(Hons)  |  50 |
| DipApplSc     |  50 |
| PGDipTech     | 100 |
| PGDipApplSc   | 100 |
| PGDipEng      | 100 |
| DipTech       | 100 |
| DipMIO        | 100 |
| GradDip       | 100 |
| GDipTech      | 100 |
| GCertScTech   |   0 |
| Exchange      |   0 |
| MApplSc       | 100 |
| MInfSc        | 100 |
| MPhil         | 100 |
| MSc           | 100 |
| MDairySc&Tech | 100 |
| MTech         | 100 |
| ME            | 100 |
| PGDip         |  50 |
| PhD           | 150 |
|---------------+-----|

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
A staff member has a postgraduate student doing a MSc. 
The staff member does 50% of the supervision for this student.  MSc is worth 100
workload hours.  50% of 100 is 50 so the staff member gets awarded 50
workload hours for supervising this student.  The other staff member
also provides 50% of the supervision for this student and gets awarded
the other 50% of the workload hours available for supervising this
student which is also 50 workload hours.
#+BEGIN_LATEX
\caption{\label{fig:pgequation}A example of how the postgraduate hours
are divided between two supervisors}
\end{figure}
#+END_LATEX
*** Administration roles
Administration roles held by staff are also worth some workload
hours.  Each role is worth a set number of hours and could include
things like being a member of IEEE.

Every staff member gets a administration allowance of 90 workload
hours.

The document "Standard Hours Formula" \cite{stdhours1} states various
categories of administration roles, but it comes down to a role
description which has a set number of hours associated with it.  The
spreadsheet \cite{stdhours2} handles it by having a look up table of the roles along
with their hours.  Table \ref{table:admin1} showing this has been extracted from the
spreadsheet \cite{stdhours2}.


#+ATTR_LaTeX: placement=[H]
#+CAPTION: Table from spreadsheet showing the workload hour values of a set of administration roles
#+LABEL: table:admin1
|-----------------------+--------------|
| Committee             |        Hours |
|-----------------------+--------------|
| A Class Cmttee        | Case by Case |
| Admin Allowance       |           90 |
| Assoc Head AL         |          169 |
| Assoc Head PN         |           84 |
| Assoc Head WN         |          169 |
| B Class Cmttee        |           40 |
| C Class Cmttee        |           20 |
| Cluster Leader        |          337 |
| Deputy Cluster Leader |          169 |
| HOS                   |         1113 |
| IEEE                  |          169 |
| International         |          169 |
| Major Leader          |          135 |
| Marketing Director    |          337 |
| PG Director           |          422 |
| Research Director     |          253 |
| Tech Services Manager |          337 |
| Undergrad Director    |          675 |
|-----------------------+--------------|


* Design
Once the overall process was worked out, the next step was to design
the database, which this application is going to get all its data
from.

The original idea was to get the information from three sources.  The
COS database, the Postgraduate database and a local MySQL database.
The CoS database would be used to populate the local databases with
information on papers, and staff.  The Postgraduate database can
provide information on the postgraduate supervision and be used to
populate the requisite tables in the local database.  The reason for
using a local database to store everything is a performance related
issue.  It was felt that having to make repeated requests over a local
intranet would be time consuming.  Also the having a local database or
even just a single remote database would free up network resources.
The COS database it turned out was not directly available to the
application anyway, as the College of Sciences security policy
disallowed it.  The Postgraduate database is available, thanks to
cooperation from Lisa Lightband, however it is in the form of a MS
Access file.  The local MySQL database is the only one that can be
counted upon at all times, as this is fully in the control of the
Workload application.


The needed data is Academic Staff details, the papers they
teach, the papers they coordinate as either a global or local
coordinator.  There is also the administration roles of each of the
staff members, with each role being worth a set number of hours.  Not
only that bu each staff member has postgraduate students, which they
are supervising.


This data needs to be stored somewhere, whether that be on a offline
site, such as a external database or a locally run database.  The
problem with external data sources is, the application is relying on a
unknown quantity.  The server, containing the data, could be down and
thus the application is unusable while this server is down. There are
also the overhead cost of having to download the required information
on demand.  The preference is to store everything that is needed on
the same server, or a nearby server under the same domain, that can be
relied upon.

The database design then seemed like the best place to start, as this
is what the entire application relies upon.  Therefore the design was
undertaken, as shown in figure \ref{fig:db1}.

It was decided that, since there is more than one offering of a paper,
like different semesters, campus, mode, like extramural, that there
should be a table which contains global information that applies to
all instances.  This would be called Paper.  This would include things
like, paper code, its title,number of points it is worth and who
overseas the paper content called a global coordinator.


Each paper has a offering called PaperExist, which is a localised
instance of a paper.  This would have the information like its
location, the mode it is being offered under, what semester it is
being offered in and who overseas the running of this instance.

Each PaperExist has a number of students enrolled in it.  A separate
entity of Enrolled was chosen.  The idea was that each year a new
Enrolled instance was created for the offering.  This would provide
historic data on this paper.  This was enabled by the use of a year
field.  The year field was later abandoned, but the entity was kept.
The reason for dropping the year field, was that the historical data would be stored by archiving the
table.  This seemed like abetter option.  Having a year field only increased the complexity of the
database, and was not needed in the end.  However the entity had
already been created, and to integrate it into PaperExist did not seem
worth the effort.


The Staff entity represented a academic staff member.  It provided a
means of identifying the individual, so that the eventual Workload
hours that were calculated could be accredited to this individual.
This is the entity that the entire database revolves around.  It
contains identifying information, like name, cluster, and home campus.

Then there is TeachingAllocation.  This entity defines how
much of a paper offering (PaperExist) they teach.  This is expressed
in the form of a percentage of the coarse.  The essential parts are,
the PaperExist identifier, the Staff identifier and the percentage of
the coarse the staff member teaches.


There is a Campus entity which gives a list of what campuses there are
and is used extensively as there are a lot of PaperExist and Staff
entries which rely on this one.


LocalCoord entity is really a proxy for Staff.  It is a way of making
it obvious what is happening.  However it became obvious later that it
was not needed, but the way it is set up makes no real difference to
the application.  It would not benefit from getting rid of the
LocalCoord proxy.


ProjectPaper was initially set up to be a proxy to PaperExist.  This
was to be a way to designate if a paper was a project or not.  This
was to be proving to complicated later.  It is easier to designate the
paper as project or not in the Paper entity.


The ProjectpaperInstance is set up to act a bit like
TeachingAllocation, but for project papers, with the staff member
being identified here along with how many students they are
supervising.  This was later changed to ProjectPaperSupervision, to
make it a bit more obvious what was going on.


Each staff member has certain administration roles they must for
full.  These might be seats on a organisation like IEEE or simple just
being head of school.  Each of the roles is worth a certain number of
workload hours each year.  The entities which deal with this are
AdminInstance, which is a instance of the entity administration role
as designated by AdminRole.  The AdminRole consists of the title of
the role and the number of hours it is worth.  AdminInstance consists
of a Staff identifier and a AdminRole identifier.  It also has a
description to give the opportunity to give a bit more detail about the
role instance if it is felt necessary.


Then there is the Postgrad entity.  This is a representation of a
postgraduate student.  It contains details like their student id,
their name, the id of the PostgradDegree they are undertaking.  The
PostgradDegree contains the name of a degree plus how many hours it is
worth. From here they are referenced by the all important
PostgradSupervision. This entity links the postgraduate student with
their supervisor. This would be a identifier to a Staff entity
instance as well as one to the Postgrad entity.



#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The initial database design
#+LABEL: fig:db1
[[./images/WorkloadDB1.png]]



*** How to represent it to users?
It was decided to do this application as a web application.  This meant
it could be OS independent, as far as the person who was accessing it
is concerned, don't have to worry about installing it on many
machines, just one.  All the user needs is a modern browser with css
and javascript enabled.   The downside is that the different browsers
behave differently to each other in terms of how they display things
and what they are capable of running.

**** The Prototype
A prototype was asked for, and the prototype was developed purely in
html, css and javascript.  All the data needed was store as javascript
objects.

At the time there was only two types of user considered.  The Workload
process was still a bit of a mystery.  It was thought that all the
input was done by the manager.  The other users were just ordinary
staff, and all they needed was a way to verify that their data was
correct.  So the two types of users were a administrator and staff.

First the user is presented with a log-in screen as shown in figure
\ref{fig:protologin}.  They would enter their lo-gin name and since
this was a prototype, the password field was just there for show.
What they got next depended on what user name they entered.  If they
entered 'admin' as the user name, then the administrator contents page
will be presented to them.  This is shown in figure
\ref{fig:protocontents}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Prototype Login Screen
#+LABEL: fig:protologin
[[./images/prototype/index.png]]

From the contents page shown in figure \ref{fig:protocontents}, you
have several menu choices.  You could go to the list of papers to view
and edit their details, shown in figure \ref{fig:paperlist}.  Here you
have the option of editing the title as shown in figure
\ref{fig:papernameedit}, the global coordinator in figure
\ref{fig:papermenu}, the local coordinator, and the paper offering
intercept.  None of these options had any effect, as the next time you
view this page they would be back again to where they were before.
Some of the functionality did not work, but this was a prototype after
all.  You will note at the top, to the left is a back link, for going
back to the contents page, and a log out link at the top right.  The
log out will always be there, but the back link will only be there if
the user is not viewing the contents page.


#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Administrator Contents page
#+LABEL: fig:protocontents
[[./images/prototype/admin-contents.png]]

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Paper List
#+LABEL: fig:paperlist
[[./images/prototype/paper_list2.png]]

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Editing the paper name
#+LABEL: fig:papernameedit
[[./images/prototype/paper_list_text_edit.png]]

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Editing the global coordinator
#+LABEL: fig:papermenu
[[./images/prototype/paper_list_coord_menu.png]]

The view staff menu option takes you to a staff list page, shown in
figure \ref{fig:staffworkload} with the staff identifiers like name,
cluster and campus.  It also contains a Workload hours column, which
is supposed to represent the total workload hours for that staff
member for the year.  In this case it is a random number generated by
javascript.  The list can be filtered using the filter drop down menus
at the top of the table, for cluster, campus and class.


#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The staff workload hours list
#+LABEL: fig:staffworkload
[[./images/prototype/staff_list.png]]


In figure \ref{fig:adminroles} the administration roles for each staff
member are shown, again with the option of filtering staff by cluster,
campus and class.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration roles list
#+LABEL: fig:adminroles
[[./images/prototype/admin_roles.png]]


Postgraduate supervision list is shown in figure \ref{fig:postgrad},
with the usual filters of cluster, campus and class.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Postgraduate Supervision instances list
#+LABEL: fig:postgrad
[[./images/prototype/postgrad_supervision.png]]

While not strictly part of Workload, a programme paper list by year
was created.  This gave a list of all the papers for a degree by the
year they would normally be offered by this degree.  This is shown in
figure \ref{fig:programmelist}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Degree Programme List
#+LABEL: fig:programmelist
[[./images/prototype/programme_list.png]]


Now if you go back to the log in page and log in as a normal user you
get a users details listed, shown in figure \ref{fig:userpage}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The individual staff users view
#+LABEL: fig:userpage
[[./images/prototype/user_details.png]]


**** Prototype implementation and changes undertaken

The first iteration of the Workload application was created, based
upon the prototype.  A few changes were made, like in the staff list
in figure \ref{fig:staffworkload}, which a break down of the total
workload hours was asked for in the form of hours gained from papers,
postgraduate supervision, and administration roles, with the total
being the last column.  A demo was shown to the cluster leaders, and
it was there that the need for a third user was discovered.  It seems
that cluster leaders need to be able to simultaneously edit the paper
offerings that involve any of their staff members.  This raises a
concurrency problem, if a paper offering involves staff from more than
one cluster, whose data do we accept and how do we enable the
simultaneous editing of papers.  The answer that was come up was we
don't.  We instead create copies of the offerings for each cluster and
allow them to edit them to their hearts content.  When they have
finished, they commit the changes to the database, and all papers
except those that have staff from different clusters, get overwritten
with the new data entered by the cluster leader.  Those that have
staff from more than one cluster, get flagged for approval by the
manager, who then either chooses the one they like and use that one or
reject it for reediting.  The new ER diagram for this database is
shown in figure \ref{fig:db2}.  

The format of the paper list page was not liked by all, and thus for
cluster leader editing of papers has been abandoned in favour of a new
cluster paper editor.  It was felt that the spreadsheet was a good
model for editing offering details.  This is shown in figure
\ref{fig:clusterview}.  You will notice that one of the table cells is
got a red border.  This is to highlight the fact that users can edit
this cell.  The hover event was being used to change a element type
into a editable input and then back to what it was before.  This was
causing to many layout problems as the element changed from one thing
to another the browser was having to recalculate the page layout and
having this happen as you passed the mouse over each element was less
than desirable, so hence the red highlight, and now to edit it, you
have to click it.  An example of what happens if a element is clicked
is shown in figure \ref{fig:clusterview}.  We would like to have a way of saying more
explicitly, edit me, but our hands are tied and we have to work within
what javascript, css and html will allow us to do.


#+ATTR_LaTeX: width=30em,placement=[H]
#+LABEL: fig:clusterview
#+CAPTION: The new cluster paper offering editor.
[[./images/cluster_paper_edit_view.png]]


----


#+ATTR_LaTeX: width=30em,placement=[H]
#+LABEL: fig:clustermanu
#+CAPTION: The new cluster paper offering editor showing the semester element being edited with a drop down menu.
[[./images/cluster_paper_semester_edit_view.png]]

This solution required some changes to the database schema. The
differences, shown in figure \ref{fig:db2}, in this diagram is the 
removal of ProjectPaper, which is now determined by a boolean flag in
the Paper entity, and ProjectPaperInstance is now called
ProjectPaperSupervision.  There is the addition of PaperCopy,
PaperExistCopy, and TeachingAllocationCopy.  These are copies with
pointers to the originals, and a field to indicate which cluster they
belong to.  The Update entity is there to hold information on if a
clusters papers have been committed, thus whether they will show up on
the Managers cluster view page.  There was the idea to allow the
altering of Paper details, but that has been abandoned for the moment
due to time constraints and priorities.  The priority is to ge the
PaperExistCopy editing to work, as this is the most important part.
The ability to manipulate staff values like TeachingAllocation and
PaperExist, are the priority.  These are the main entities used to
determine a staff members workload hours.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The new improved database
#+LABEL: fig:db2
[[./images/WorkloadDB2.png]]


In fact there was a few changes in the web interface for all users, as
well as the ones already mentioned.  The log in page has not changed
much except that you need a password as well as a user name.  This log
in page is shown in figure \ref{fig:newlogin}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The new log in page
#+LABEL: fig:newlogin
[[./images/login_page.png]]

If logged in as administrator (or manager) you get this menu, as shown
in figure \ref{fig:adminmenu}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The new contents page for the administrator
#+LABEL: fig:adminmenu
[[./images/admin_index.png]]


The administrator still gets the paper edit page, but even that has
been modified.The original non prototype design was using javascript
to render almost everything.  This was a real bottleneck for page
loading speed.  Javascript, it seems is a little inefficient when it
comes to rendering components on mass into a web page.  This was
overcome by turning the paper list into a single expandable row as
shown in figure \ref{fig:adminpaperedit}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The new expandable paper edit page for the administrator.
#+LABEL: fig:adminpaperedit
[[./images/admin_paper_edit_view.png]]


Administration roles, shown in figure \ref{fig:adminadminroles}, have the same look except that now there are ways
of adding both roles and instances.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration roles interface
#+LABEL: fig:adminadminroles
[[./images/admin_adminroles.png]]


You can add a administration role as shown in figure
\ref{fig:addadminrole}.  To get to this point there is a link at the
top of the administration roles page as highlighted by figure
\ref{fig:adminadminroles2}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration roles interface with add a role link circled
#+LABEL: fig:adminadminroles2
[[./images/admin_adminroles2.png]]

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration role addition interface
#+LABEL: fig:addadminrole
[[./images/add_admin_role.png]]

Not only can you add a role, but for every staff member you can add or
delete a instance of a role as shown in \ref{fig:adminadminroles3} and
the add a instance as shown in figure \ref{fig:addadmininstance}.  In
this instance you have three editing controls, the top one being a
drop down menu containing all the administration roles available for
this administration instance, the second one is the staff member in
question, and the last is just a test entry box for adding a
description to this instance.  The second control seems
a bit odd to be able to select a different staff member when the staff
member in question is already known.  This still needs work, but it
does do the job it was created for.  Delete has the immediate effect
of removing the instance in question from the database.  These changes
are all immediately shown in the displayed page.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration roles interface with add and delete a staff instance links circled
#+LABEL: fig:adminadminroles3
[[./images/admin_adminroles3.png]]

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The add a administration instance interface
#+LABEL: fig:addadmininstance
[[./images/add_admin_instance.png]]


The postgraduate page shows the staff members along with their
supervised postgraduate students.  If they have none then it will say
so.  Postgraduate supervision, is the one place where no editing of
data takes place in this application.  The postgraduate supervision
data is sourced from the Postgraduate database, which is managed by a
external source.  However the data is still stored locally on the
Workload database, to save time in downloading the data from the
Postgraduate database.  The page is shown in figure
\ref{fig:postgradpage}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The add a administration instance interface
#+LABEL: fig:postgradpage
[[./images/add_admin_instance.png]]

The programme list hasn't much changed except, now there is the extra
campus menu.  You can add or delete the programs through a couple of
links at the top circled in figure \ref{fig:programlist} with the add
a programme shown in figure \ref{fig:addprogram}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The programme list page with the add and delete links circled.
#+LABEL: fig:programlist
[[./images/admin_programme_list.png]]

Figure \ref{fig:addprogram} shows the page for adding a programme to
the list.  This is the combination of degree and major.  Some degrees
do not have majors, so the major part can be left blank.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The programme addition page
#+LABEL: fig:addprogram
[[./images/admin_add_programme.png]]

Figure \ref{fig:adddegree} shows the degree add page which asks you
for a short name of the degree and the full name for the records.  The
short name is the part that will show up in any drop down menus for
this degree.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add a degree page which makes it available to add to a programme of study
#+LABEL: fig:adddegree
[[./images/admin_add_degree.png]]

Figure \ref{fig:progmajor2} show the add major page, which is
similar to add a degree, except this is for a major.


With all these dialogs for creating a new programme of study, there are
buttons at the bottom for in the form of Add and Cancel.  If Add is
clicked then the choice is entered into the database and the browser
goes to the previous page, with the new choice now being available for
selection.  If Cancel is clicked then the previous page is loaded,
without any new additions to the database.

Looking at figure \ref{fig:clusterview}, the cluster leaders
cluster view you will see that there is a couple of entries that are
in red.  These are the offerings which have Teaching Allocations which
do not add up to one hundred.  This gives the user a visual warning
that the teaching allocations for that offering need adjusting.  This
brings up the awkward situation of how does the application handle
situations where the allocations are a third.  If added together this
will not add up to one hundred.  After a little thought, it was
decided to round the totals.  This has the effect of if the total is
99.9 then the rounding will bring them up to one hundred.  This allows
allocations to be of odd values like a third.


#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add a Major page which make sit available to add to a programme of study
#+LABEL: fig:progmajor2
[[./images/admin_add_major.png]]

In figure \ref{fig:clusterview2} the "Revert to last save" and "Commit
Changes" button are circled.  The "Revert to last save" button will
revert the cluster paper data to what it is in the Paper, PaperExist
and TeachingAllocation entities in the database.  New copies will be
created of these and will replace any changes that have been made with
the previous values.  A dialog will prompt you to confirm this action,
in case this was done by mistake.  The "Commit Changes" button, will
copy the changes to the entities these copies are of, unless the
PaperExist has staff members from more than one cluster.  These will
be kept around for the administrator to check and either approve or
reject.  The administrators interface to this is displayed in figure
\ref{fig:adminclusterview2}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Cluster leader paper edit view
#+LABEL: fig:clusterview2
[[./images/cluster_paper_edit_view2.png]]



#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The administrator cluster paper view
#+LABEL: fig:adminclusterview2
[[./images/admin_cluster_view.png]]



Circled in red, in figure \ref{fig:adminclusterview3a}, are two area,
one being the "Accept all" button, the second is the green tick and
red cross in the first row.  These ticks and crosses appear on  each
row.  They have click events associated with them, the tick is the
accept that offering event, and the cross is reject this offering
event.  One of the criteria for this application was that there be a
button to accept all the entries, so the administrator does not have
to go through every offering individually.  This is where the "Accept
all" comes in.  When this is clicked, all the entries are assumed to
be correct, so the lot is copied over to the originals.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Administrator cluster view with accept, delete and accept all circled
#+LABEL: fig:adminclusterview3a
[[./images/admin_cluster_view2.png]]


When clicking the "Accept all" button, which offering do you use.  It
really does not matter if the assumption is that they are all
correct.  The easiest solution is to just use the first entry for
every possible cluster offering solution.






The accept or reject options for each cluster offering, shown in figure
\ref{fig:adminclusterview3a}, provides a couple of problems.  The first
is if a offering which has entries for several clusters.  If you click
accept on one of them, what happens to the rest?  The solution chosen
was to assume that the administrator, when clicking on the particular
offering, does not want any of the other possible solutions.  In this
case, the remaining are deleted and only the one accepted is copied
over the original entity. The second is if a offering is rejected,
again what happens to the rest.  The problem is there maybe errors, as
in teaching allocations do not add up to 100.  The other is the
offerings could give conflicting values.  The other situation is if
none of the cluster offerings from the various clusters involved in
that offering, are correct.  The scenario could be a combination of
these situations.  The decision as to what happens here has not been
resolved yet, but there is two solutions that have been thought of.
The first is if one is rejected, they are all rejected, the second is
just that cluster offering is rejected.  The only problem with either
of these solutions, is how do you let the cluster leaders know what is
going on as they will see their possible conflicting entry in the
cluster leader paper view list whether it has been rejected or not.
When committed, all the solutions that only involve that cluster get
copied over the original, the offerings that involve more than one
cluster stay in the list.  One solution is to assume that
communication is done outside the application, like email.  There are
various other ways of indicating this rejection, The cluster leader
still needs to know to look, so communication needs to take place
outside the application, but the offending offering could be coloured
to indicate this rejection, or a pop up could be used to alert the
cluster leader when the page is loaded.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The configure site contents page
#+LABEL: fig:config
[[./images/admin_config_view.png]]

Now the configure site menu item, when clicked takes you to another
contents page.  This is a list of the various items that can be
configured.  This is shown in figure \ref{fig:config}.

The paper edit list has been shifted to this menu, shown in figure
\ref{fig:seat-paper-list}.  The interface has been changed to only
list the paper meta data, like paper code, title, points and global
coordinator.  To edit the paper offerings you click on the circled
expand arrow.  To delete it and all its offerings, click the delete
option also circled.  To add a new paper click the circled top right link.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The paper edit page
#+LABEL: fig:seat-paper-list
[[./images/SEAT_paper_list.png]]


If the expand button is clicked the row will expand to show all
offerings along with their teaching allocations that are associated
with this paper.  This is shown in figure
\ref{fig:seat-paper-list-expand}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The paper edit page, with the expand button having been clicked.
#+LABEL: fig:seat-paper-list-expand
[[./images/SEAT_paper_list_expand.png]]


All the same editing events happen as was explained in the prototype,
except you now have to click the elements to edit them as hover was
causing to many layout problems as the mouse moved over them.  The
problem being that when the element gets changed to a editable
element, it changes the layout of the page, and also when the hover
out event happens, it connects to the server to update the field, even
if nothing has changed.  That was not desirable, so instead, if a edit
is wanted then you have to click it.  The ability of the element to be
edited, is hinted at by the change in colour of the text.  This is
immediately obvious to someone who has never used the system before,
but there are only so many things you can do to alert people of these
options over a web application.


The next item in the configuration menu, figure \ref{fig:config} is
"Add Staff".  When clicked this leads to a page with a form in it,
shown in figure \ref{fig:addstaff}.  The form allows for the entry of
the first and last names.  The initials, which are usually three
letters, and must be unique to the individual, as this is one of the
methods of identifying the staff member.  What cluster they belong to
and what campus they are based at.  A Full Time Equivalent (FTE)
number from 0 to 1.0 to represent how full time this staff member is.
Also what class they are in, which indicates if they are a reasearcher
of just a plain teacher.  All these fields are needed and if one is
left out then the following will be displayed, shown in figure
\ref{fig:addstaff-missing} on a commit attempt. 

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add staff page.
#+LABEL: fig:addstaff
[[./images/new_staff.png]]

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add staff page which has be commited without filling the required entries
#+LABEL: fig:addstaff-missing
[[./images/new_staff-missing.png]]


The next link in the configuration page (figure \ref{fig:config}) is
the Designate cluster leader page.  The reason for this page, is to
allow the administrator to designate who is a cluster leader.  They do
that by clicking the tick box.  This also has the fuction of showing
who is and who is not a cluster leader.  The cluster this person is a
leader of, if the check box is checked, is the cluster they belong
to.  If necessary, the list can be filtered down by the use of the
drop down menu at the top of the page.  This only filters by cluster,
which has been decided is enough.  More filters could be added, but
they would not really add anymore to the already available filter by
cluster option. This is shown in figure \ref{fig:designateleader}.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Cluster leader designation page
#+LABEL: fig:designateleader
[[./images/cluster_leader_management.png]]

The next in our list of configure links is "Upload data".  This page
when loaded, as seen in figure \ref{fig:datasetup}, is a form with
several fields, enabling comma separate value (csv) files to be
uploaded.  The data in these files is used to populate the database
with data, which can be used to calculate the staff workloads, and it
even includes the staff to be allocated workload hours to.  This page
is meant for the initial setup of the application and is still a work
in progress.  The biggest initial problem you face is how do you get
information into the database, this is meant to be a stopgap measure
until a better method can be thought of.  The files that I have used
so far have been extracted from the Workload spreadsheet, and turned
into a csv file.  The problem with this is that the some of the data
extracted fails referential integrity.  For the moment it will do, and
any missing data can be added manually.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Data upload page
#+LABEL: fig:datasetup
[[./images/data_setup.png]]


The next item is "Archive site".  One of the requirements was to be
able to archive a years data so that in future it may be compared with
the current, and also be used as a backup.  I chose to create a
archive file for each entity needed, and save it in json format.  The
reason for choosing this format is that the application is being run
on a Django framework, and Django has a simple means of populating the
tables using any file in json format.  This is a builtin method, that
can be invoked by just placing the files in the required place and
running a script that comes with every Django application.  In figure
\ref{fig:archive} is a list of the files created by this function.
You will note that every one of the files names, before the extension,
ends with the date.  This is so that it becomes a real historical
archive, allowing for the years workload data from several archives
ago, which could be years, loaded into the database.  The other
advantage to using json is that it can potentially be used in
javascript, allowing for none workload applications to use this data
for whatever reason they decide.


#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
#+BEGIN_EXAMPLE
auth_user-2011.2.22.json           db_paper-2011.2.22.json
db_admininstance-2011.2.22.json    db_paperexist-2011.2.22.json
db_adminrole-2011.2.22.json        db_postgrad-2011.2.22.json
db_campus-2011.2.22.json           db_postgraddegree-2011.2.22.json
db_cluster-2011.2.22.json          db_postgradsupervision-2011.2.22.json
db_coefficients-2011.2.22.json     db_projectpapersupervision-2011.2.22.json
db_degree-2011.2.22.json           db_staff-2011.2.22.json
db_degreemajor-2011.2.22.json      db_staffuser-2011.2.22.json
db_degreepaperlist-2011.2.22.json  db_stdpoints-2011.2.22.json
db_enrolled-2011.2.22.json         db_teachingallocation-2011.2.22.json
db_major-2011.2.22.json
#+END_EXAMPLE
#+LaTeX: \caption{\label{fig:archive} A list of files created by the archive function}
#+LaTeX: \end{figure}


Then there is the "Synchronise Postgraduate Data" item.  This when
clicks connects with the Postgraduate database and update the local
Postgrad,  PostgradSupervision and PostgradMajor tables.  The
application could connect every time a calculation is needed, but it
is felt that doing this involves extra overhead, and not only that the
entities have already been set up.


"Change Password" is the last item in the list.  This allows the
Administrator to change the password for their log in.  Figure
\ref{fig:password} shows the page that is loaded for this.  This page
is one of the built in Django pages for changing passwords.  It was
easier using this than setting up one ourselves.  The problem with
this is the layout and navigation technique is slightly different, as
they use breadcrumbs, the rest of the site does not.

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Change Password page
#+LABEL: fig:password
[[./images/password_change.png]]


If a normal staff member, logs in they get a report on their
individual workload hours.  This is broken down into the components
that make up the workload hours.  This is shown in figure
\ref{fig:staffreport}.  They are broken into the hours gained from
coordinating and teaching papers, with a total of the hours gained
from the papers the staff member is involved in.  The hours for
supervising postgraduates, including the postgraduates details and is
and how many hours they get for each student and a total for all
postgraduates supervised.  Last of all the hours gained from
administration jobs is given, with a breakdown of what the jobs are a
description, if one is given, and the hours gained for this role.  The
total for all the administration roles is given at the end.  At the
very bottom is the total workload hours for the staff member.  The aim
of this page, is to allow the staff member to check to see if their
details and hours are correct.  They ca change some of their personal
details by clicking on the element and typing in the changes in the
text b field that appears, and when they move the mouse out of the
filed, it reverts back to what it was, a <span> element, and update
their details on the database through a ajax connection. First and
last name, their cluster and the campus they are attached to can be
edited on this page.  This page is viewable by others, and if you are
a administrator or cluster leader, you can also edit their FTE and class.
This is a feature that was not available in the old spreadsheet
system.  There is also a link to the page to view other staff members
workload hours, which is the same view shown in figure
\ref{fig:staffreport}

#+CAPTION: The staff report page
#+LABEL: fig:staffreport
#+attr_latex: width=30em,placement=[H]
[[./images/staff_workload_report.png]]
** Where do I get my data from and what technical problems do I face?

The problem that is being faced here is several things.  The biggest
problem is what are you allowed to access?  If one of the sources uses
a different technology, how can you interact with this technology to
extract the data that you need?  Are there any changes that need to
take place to enable you to use that source, on the sources end?

The Postgraduate database is a MS Access database, which is a Windows
only product and the application itself, is being run on a Linux CentOS
server.  I have to be able to access the Postgraduate MS Access file
data from Linux, but it is not easy.  I did some searching and found
various unhelpful dead ends, until I came across this post on the
unixODBC-support \cite{unixODBC} form.  The information I got was that
there are three ways to get data from a MS Access database file from linux.
 1) Share the folder containing the MS Access file and access it using MDBTools
 2) Create a link from a MS SQL Server to the MS Access file and use a
    MS SQL Server ODBC driver.
 3) Create a ODBC-ODBC bridge in which you install the ODBC service on
    the Windows machine, which uses a ODBC driver for MS Access, and
    use a ODBC driver on the Linux server which can talk to the remote
    server.


**** Security
While it is an issue is not a high priority.  We have been
given the impression that the staff in SEAT are open about the hours
they have done, and honest.  The restrictions that have been imposed
are those of write access.  Administrators get access to everything,
Staff get to only view the results, and cluster leaders get to only
alter the parts that are relevant to their cluster.

**** Method of development
Web based application developed in python using the django framework.
Needs to be able to run in a web server environment.  Apache is being
used, with the module wsgi. mod\_python could also be used, but
development and support for mod\_python doesn't exist anymore, and wsgi
is recommended anyway.

**** Deploying the application
Theoretically it could be deployed on any OS which has a web server
that can run python. However it was decided to run it on a Centos
Server under the SEAT domain.

**** Framework choice
Django was chosen, as it is a python library, and we wanted to solve
this problem in python.  The django framework is a kitchen sink
approach, for web development with a model (show model diagram).

"Django is a high-level Python Web framework that encourages rapid
development and clean, pragmatic design." \cite{django1}

"Django focuses on automating as much as possible and adhering to the
DRY principle." \cite{django1}

DRY stands for "Don't Repeat Yourself" \cite{DRY1}.


Django has some tutorials on how to write a Django application from
scratch on line \cite{django1}.

Django uses the Model Template View (MTV) development pattern shown in
figure \ref{fig:mtv}.
 - M is the model which is the data access layer.
 - T is the templates which is the presentation layer.
 - V is the views which is the business logic layer.

This is important in realising how this application has been
designed.  You get the database (models) with all the data needed, you
have the views, which process this data and turn it into information,
which is then taken by the templates which decide how this information
is going to be displayed and what is going to be displayed.

#+attr_latex: width=10em,placement=[H]
#+CAPTION: The Django model
#+LABEL: fig:mtv
#+BEGIN_DITAA  mtv_django -r -S -E
 +----------+
 | {d}      |
 | Template |
 | cC02     |
 +-----+----+
       ^
       |
   +---+--+
   | {io} |
   | View |
   | cBLU |
   +---+--+
       ^
       |
       |
   +---+---+
   | {s}   |
   | Model |
   | c888  |
   +-------+
#+END_DITAA

When Django was chosen, it was purely to save effort and time in the
development of routines to handle the data.  It enables the creation
of models, which are database entities, and handles the creation of
the tables in the database for you and any queries, inserts and
updates of this database.  It has a few official databases
that it can work with, those being MySQL, PostGRESQL, PostGRESQL
psycopg2, SQLLite and Oricle.  Others are available, but these are
unofficial.  The database chosen was MySQL.

To talk in Django terms, Django consists of a project, which contains
all the configuration information for setting up you site, over
several files. Within this project is one or more, what Django refers
to as applications \cite{django2}.

#+begin_quote 
Projects vs. apps

What's the difference between a project and an app? An app is a Web
application that does something -- e.g., a Weblog system, a database
of public records or a simple poll app. A project is a collection of
configuration and apps for a particular Web site. A project can
contain multiple apps. An app can be in multiple projects.
#+end_quote 

The tables were designed on paper and implemented as Django Models. An
example Model is shown in figure \ref{fig:model}.  Figure
\ref{fig:model} will be turned into a table called db_adminrole.  This
model was written in the db application, thus unless told otherwise,
Django will prepend each models name with the aplication name to
create the table name for a model.  The fields of this table will be
title and hours, of types that as valid for the database engine used
which reflect the data types defined in the model.  Since a primary
key was not specified, one will be created and called id of integer
type and if possible will be auto incrementing.  The title field will
be a string type with a character length of 200, and it must be
unique.

#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
-----------------------------------------------------------
#+begin_src python
from django.db import models

class AdminRole(models.Model):
    title = models.CharField(max_length=200, unique=True)
    hours = models.IntegerField()

#+end_src
#+LaTeX: \caption{\label{fig:model} An example django model}
#+LaTeX: \end{figure}


**** URL Patterns
Django also has a unique way of handling URLs.  Every application in a
Django project has a file called 'urls.py'.  It defines a object
called urlpatterns, which is a mapping of URL patterns, which are
regular expressions and Python callback functions \cite{djangourls}.
Part of the URL for that application is the name of the application.
For example if a application is called 'frog', then all URLs with frog
at the beginning of the URL string will be referencing the 'frog'
application. Figure \ref{fig:urls} shows a brief example urls.py file
contents. When a browser requests a page with the URL
http://randomsite/frog/prince/ it will be given the output of the
project.frog.views modules index function.

#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
#+begin_src python
from django.conf.urls.defaults import patterns

urlpatterns = patterns('',
    (r'^prince/$', 'project.frog.views.index'),
)
#+end_src


#+LaTeX: \caption{\label{fig:urls} An example content of a Django urls.py file}
#+LaTeX: \end{figure}



**** Workload process
The Workload process is shown in figure \ref{fig:clusterdataflow}.
The Cluster leaders input their changes.  This is done, over time,
simultaneously.  Each cluster leader works on the papers that their
staff members teach or coordinate on.  This all gets commited to the
Workload database.  The manager then retrieves that data that was
submitted by the cluster leaders.

#+attr_latex: width=30em,placement=[H]
#+CAPTION: The flow of workload data from Cluster leaders to the SEAT manager
#+LABEL: fig:clusterdataflow
#+BEGIN_DITAA cluster_leader_to_seat_manager -r -S -E

 +---------+       +---------+
 | Cluster |       | Cluster |
 | Leader  +------>+ Leader  +------------------+
 | {d}     |       | View    |                  |
 | cC02    |       | {io}cBLU|                  |
 +---------+       +---------+                  |
                                                |
                                                |
                                                |
 +---------+       +---------+                  V
 | Cluster |       | Cluster |             +----+-----+
 | Leader  +------>+ Leader  +------------>+ Workload |
 | {d}     |       | View    |             | DB       |
 | cC02    |       | {io}cBLU|             | c888     |
 +---------+       +---------+        +--->+ {s}      |
                                      |    +----------+
 +---------+       +---------+        |          |
 | Cluster |       | Cluster |        |          |
 | Leader  +------>+ Leader  +--------+          |
 | {d}     |       | View    |        |          |
 | cC02    |       | {io}cBLU|        |          V
 +---------+       +---------+        |      +---+-----+
     .                 .              |      | Manager |
     .                 .              |      | View    |
     .                 .              |      |{io}cBLU |
     .                 .              |      +---+-----+
     .                 .              |          |
 +---------+       +---------+        |          |
 | Cluster |       | Cluster |        |          |
 | Leader  +------>+ Leader  +--------+          |
 | {d}     |       | View    |                   V
 | cC02    |       |{io}cBLU |               +---+-----+
 +---------+       +---------+               | Manager |
                                             | {d}     |
                                             | cC02    |
                                             +---------+
#+END_DITAA


This Workload process is also broken down into a flowchart shown in figure
\ref{fig:workloadprocess}.  The data is entered by the cluster
leaders.  They keep adjusting until they are all satisfied that it is
correct.  This process involves the cluster pages shown in figure
\ref{fig:clusterview} for the cluster leaders, and figure
\ref{fig:clusterview2}.  The process refers mainly to the papers which
have more than one cluster involved in them, as the different clusters
could disagree on the details.  Once everyone is happy then the data
is committed to the workload data, which is the original data that was
worked on.  From there a report is viewed, which is the result of the
changes.

#+attr_latex: width=40em,placement=[H]
#+CAPTION: The Workload data entry process
#+LABEL: fig:workloadprocess
[[./images/workload_process.png]]



**** Database and importing of data
It has already been mentioned about where the data comes from.  The original idea
was that the data be retrieved from external databases.  One of these
sources was the CoS database. Since there are security concerns on
their part, it was not possible to fully develop a facility to do
this.  The decision was made to drop the CoS database for the moment
and just enter the data from existing available sources.  One of the
most reliable sources was the existing Workload spreadsheet that this
application is replacing.  This was a lengthy process that involved
cutting pasting and reformatting of data, then converting to comma
separated value files.  A set of import functions was created to
handle these files, and the page in figure \ref{fig:import}

#+attr_latex: width=30em,placement=[H]
#+CAPTION: The data csv file upload page
#+LABEL: fig:import
[[./images/admin_upload_data.png]]



**** Feature choice
**** Code optimisation
*** What functionality do I implement
The original idea was to use data from other databases found around
Massey to fill the Workload database tables.  It was supposed to be
directly imported by the application.  The proved to be difficult,
due to security concerns.  Massey is reluctant to allow access to
data directly.  There was to be two databases used, on being the CoS
database and the other was the Postgraduate database. Direct access to
the CoS database has so far been denied, however I have not pushed the
issue, as this is a situation I individually can't do anything about.
I therefore decided to use csv imports instead. Each csv file
represents a table in the Workload database, how the files are created
is not my concern.  The way I did it was to extract the relavant rows
from the spreadsheet and turn these entries into csv files.  I did one
for staff, papers, teaching allocations and enrollments.  I then
imported the staff followed by the papers followed by teaching
allocations then finally enrollments.

Access to the Postgraduate database file is possible, the problem is
it is a MS Access database file.  I am running the application on a
CentOS server which does not run MS Access.  There is a solution
however,  I found a set of programs under the name MDBTools.  This
allows read only access to the database tables in the Postgraduate
database.  Futher there is a way of accessing MS Access files using
ODBC through the UnixODBC and a python package called pyodbc, which
allows me to what is defined in the ODBC configuration files in
python, with the ability to execute SQL statements against this
database.

The plan as shown in figure \ref{fig:mdbodbc} is to mount //www-ist/seatdb$/
on /mnt/seatdb.  This would give access to the MS Access files
PostgradData.mdb and SEAT2008.mdb which contains the staff table that
is needed to associate staff with postgraduate students.

The MDB Tools would give read only access to the data in these MS
Access files mentioned above.  There is a ODBC implementation for MDB
Tools which can be used by UnixODBC.

First tell UnixODBC about the driver in the file odbcinst.ini, usually
found in the \//etc\// directory.  Figure \ref{fig:odbcinst} shows the
name of the driver put at the top between the square braces. Below it
a description is given, and most important where to find the driverfor
this ODBC instance.


#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
#+BEGIN_EXAMPLE
[MDBToolsODBC]
Description = MDB Tools ODBC
Driver = /usr/lib/libmdbodbc.so.0
#+END_EXAMPLE
#+LaTeX: \caption{\label{fig:odbcinst} odbcinst.ini}
#+LaTeX: \end{figure}



Shown in figure \ref{fig:odbc} the Data Source Name (DSN) for each of
the databases needed is entered. This is put into the file odbc.ini.
They contain a DSN name in between the square braces, a description of
what it is, the driver that was specified in odbcinst.ini as shown in
figure \ref{fig:odbcinst} , and finally the path to the MS Access
file. Here we have two DSN entries, one for the Postgradute database
and the other for the SEAT 2008 database which contains the needed
staff information.



#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
#+begin_example
[postgrad]
Description = Microsoft Access Postgrad DB
Driver = MDBToolsODBC
Database = /mnt/seatdb/PostgradData.mdb

[staff]
Description = Microsoft Access SEAT2008 DB
Driver = MDBToolsODBC
Database = /mnt/seatdb/SEAT2008.mdb
#+end_example
#+LaTeX: \caption{\label{fig:odbc} odbc.ini}
#+LaTeX: \end{figure}

There is a package for python to allow python to use odbc called
pyodbc.  This package is not perfect and the source code for this
package had to be edited to get it to work for this application, but
it did save time by implementing the odbc calls for us, it was just
getting values from the database which made sense that was causing the
problems. The connection layers are shown in figure \ref{fig:mdbodbc}.


#+attr_latex: width=10em,placement=[H]
#+CAPTION: Accessing the Postgraduate Database using MDB Tools ODBC
#+LABEL: fig:mdbodbc
#+BEGIN_DITAA postgrad_db_access -r -S -E

+----------+
| Workload |
| DB       |
| {s}      |
| c888     |
| (MYSQL)  |
+----------+
     ^
     |
+----------+
| Python   |
| pyodbc   |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| Unix     |
| ODBC     |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| MDB Tools|
| {io}     |
| cBLU     |
+----------+
     ^
     |
+-------------+
| Postgrad    |
| DB          |
| {s}         |
| c888        |
| (MS Access) |
| /mnt/seatdb |
+-------------+
#+END_DITAA



The mounting of the Samba share is a risky move.  You are relying on
the connection being maintained.  This cannot be counted upon and if
the connection is lost, the application may not know this, and will
fall down when it does try.  There is no way for it to reconnect under
the environment that it is installed on.  The network policy of the
administrator for the server it is to be run on does not want to give
the application the ability to mount shares.  However connecting to the
database via tcp to a MS SQL or ODBC server, would not have these problems.
This would also eliminate the dependency on MDB Tools, removing a
possible fail point.  It does not overcome connection problems like if
the server goes down, but if something goes wrong, the application may
be able to remedy the situation by trying again.
Since this involves having to mount a samba share and then access the
DB file it was suggested that I connect to it via MS SQL.  Then speak
to it in SQL avoiding the extra step of using MDB Tools.  The new
connection layer is shown in figure \ref{fig:freetds} using FreeTDS
which can directly talk to a MS SQL server.



#+attr_latex: width=10em,placement=[H]
#+CAPTION: Accessing the Postgraduate Database using FreeTDS ODBC
#+LABEL: fig:freetds
#+BEGIN_DITAA postgrad_db_mssql -r -S -E

+----------+
| Workload |
| DB       |
| {s}      |
| c888     |
| (MYSQL)  |
+----------+
     ^
     |
+----------+
| Python   |
| pyodbc   |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| Unix     |
| ODBC     |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| FreeTDS  |
| ODBC     |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| Postgrad |
| DB       |
| {s}      |
| c888     |
| (MSSQL)  |
+----------+
#+END_DITAA




There are 3 views or users of this system.
 - Manager
 - Cluster leader
 - Staff

Each has a different set of functions available to them.

The manager is like a cut down implementation of a superuser.  They
have overall access to all the data needed to obtain the Workload
stats.  They even have limited ability to modify some of the data like
Teaching Allocations, and is the only one able to import fresh data
into the database.  This includes the Postgraduate database.







How flexible do you want it?  What does it need to do and what extra
features can you justify adding to it

jquery hover events work well in changing a html tag into a html form
tag, like a <span> into a <input type="text".../>, and back again, but
this doesn't work so well when going back to a span from a
<select../>.  If you bring up the drop down menu and try and use the
mouse to select one of the options, the hover out event wound trigger
changing the element back to a <span> tag.  This is not what is
wanted, so the hover out event has to disabled when the <select> is
clicked with the change back event being tied to the change event
associated with <select>.  The problem with this is that if the user
doesn't change the selection the change event is not triggered so the
<select> control stays where it is.  This is not wanted, so but there
is nothing that can be done simply to overcome this.  The decision was
to use the focus events, so that when the user select another thing in
the page, the tag changes back to the span tag.  This is not ideal,
but it's these kind of compromises that have to be dealt with when
creating web applications like this, that rely on only w3c standards
compliant html, css and javascript.

The biggest barrier to what I can do is what do all the browsers have
in common.  What css standards do they all implement?  What html tags
will they all use, and what javascript functionality do they all
implement?  That is the biggest problem when doing a web application,
the fact that each browser behaves in a different way in the way they
display your pages, and the javascript implementation will have
different behaviors, like IE is pedantic about have variable declared
with the var tag.

**** Responsiveness of application
How do you overcome the problem of doing lots of IO and calculations
at once?  How fast does it have to be and how can you optimise it.

There are two places to process the data and one place to display the
results. You can use client side scripts, like javascript to process
the data, and it can be processed on the server side.  The more data
that is processed on the server side the less people that it can
handle at once.  Also doing it all on the server side means the pages
have to be reloaded every time a new choice is made.  The client side
processing of data, takes some of the load off the server, but it has
the downside, of relying on the clients browser to have the
functionality required, like javascript, which could be of a different
version to the one that the site was developed for.  Also javascript
seems to be a lot slower to process data than the server side scripts
are.  The goal here is to have the pages reloaded as little as
possible, but load up in a reasonable time.  How much time is
reasonable depends on who you talk to, but I feel that more than 30
seconds is not acceptable.  Fortunately there is a javascript library,
present in all major browsers, called Ajax.  It can be used to fetch
information from the server without reloading the page.  I also found
that using libraries like jquery, overcome most of the
incompatibilities of javascript between browsers, and also have some
convenient routines to make finding and manipulating the displayed
page through the HTML DOM.  It also handles events like clicking of
tags, like clicking a <div> element, making it easier to control the
way it looks and responds to the users input.  The combination of
javascript and ajax, makes the creation of web based applications
possible.  The addition of jquery, makes manipulation of elements
easier.  (must provide proof)

jquery makes for a uniform javascript api across most of the major
browsers, like IE and Firefox.  This simplifies the development of web
applications and reduces the number of issues that come from having
more than one brand of web browser accessing the site.


I at first used javascript to fill the table entries.  This worked,
but it was extremely slow.  I decided this was not acceptable, as
users expect a quick response to queries, so I implemented it on the
server side.  It was still slow, but faster than the javascript
version.  (Diagrams needed of both systems used)

#+attr_latex: width=10em,placement=[H]
#+CAPTION: Determining the page content from the the client side using javascript
#+LABEL: fig:clientside
#+BEGIN_DITAA client-side -r -S -E
+----------+
| Workload |
| Stats    |
| {d}      |
| cC02     |
+-----+----+
      ^
      |
+-----+------+
| {io}       |
| Javascript |
| cBLU       |
+-----+------+
      ^
      |
+-----+------+
| {io}       |
| django     |
| cBLU       |
+-----+------+
      ^
      |
+------------+
| {s}        |
| DB         |
| c888       |
+------------+

#+END_DITAA


** Challenges
*** Programming language
There are many languages that could be chosen from.  The challenge is
to find one which
 - the language is understood by the programmer who has to write this
   application
 - has the functionality that makes life easier, like libraries
   which make doing certain routines easier such as database access
 - is well supported by a organisation, whether that be a community or
   a large organisation such as Oracle.

C or C++ were considered, but there did not seem to be much support
for 
*** What programming platform do I use?
What language and does it matter?  Which works best for the scenario I
choose?  Is a compiled system a good choice?

This is a critical question.  The key points you should be looking at
is
 - What is the target OS and thus what resources do you have
   available?
 - If the resource is missing, can it be added?
 - Can the features required of this application be satisfied by the
   chosen platform?

The programming language chosen to do this application is Python.  It
is to be a web served application, running under a Unix environment,
running Apache web server.  Apache has modules that allow it to run
python code. The main one that has been used for this application
is Apache running mod\_wsgi. In figure \ref{fig:wsgi} is the wsgi
script that has been used to run this Django application. In figure
\ref{fig:apache} is the apache set up for mod\_wsgi.  This is not the
end script but it is a example of what was used during development to
run and test the application.




#+LaTeX: \begin{figure}[H]
#+BEGIN_HTML
<a name="fig:apache"/>
#+END_HTML
#+LaTeX: \centering
#+begin_example

<IfDefine WSGI>
LoadModule wsgi_module modules/mod_wsgi.so

WSGIScriptAlias / /var/www/localhost/wsgi/workload.wsgi

<Directory /var/www/localhost/wsgi>
Options ExecCGI MultiViews
MultiviewsMatch Handlers

AddHandler cgi-script .cgi
AddHandler wsgi-script .wsgi

Order allow,deny
Allow from all
</Directory>

</IfDefine>

#+end_example
#+LaTeX: \caption{\label{fig:apache}A example of a section of the apache config file for setting up the mod\_wsgi module to run as the sole application on this server}
#+LaTeX: \end{figure}



#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
-----------------------------------------------------------
#+begin_src python
import os, sys

#find the root directory which this script is in
ROOT=os.path.dirname(__file__)

#append that to the path which python uses to find modules
sys.path.append(ROOT)

#set the environment variable which tells Django where to find its all
#important settings module
os.environ['DJANGO_SETTINGS_MODULE']='workload.settings'

#import the django needed module
import django.core.handlers.wsgi

#create the wsgi application from the Django wsgi handlers
application = django.core.handlers.wsgi.WSGIHandler()
#+end_src
-----------------------------------------------------------
#+LaTeX: \caption{\label{fig:wsgi} A example of a wsgi script used by Apache mod\_wsgi to run this Django application}
#+LaTeX: \end{figure}

WSGI is not the only way to run Django applications, it could be run
from within a jython environment, using FastCGI and more.  As long as
the web server can run python, a django application can be deployed on it.

Running the application using jython, under glassfish or apapche
tomcat was considered.

*** Serving to different web browsers
There are many different web browsers used by people in today's
world.  Each one will display the html delivered to it differently,
and each has a different implementation of css and javascript.  Each
factor influences the way the page is displayed, and the way that the
user interact with the application.  
\bibliographystyle{plain}
\bibliography{bibliography}

# LocalWords:  prepend Bakar
