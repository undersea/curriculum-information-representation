#+BIND: org-export-latex-title-command "\\maketitle"

#+TITLE:     Workload Report
#+AUTHOR:    James Hurford
#+EMAIL:     terrasea@gmail.com
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:



#+STARTUP: hidestars

#+DRAWERS: HIDDEN PROPERTIES STATE HIDDENTEXT

#+LaTeX_CLASS_OPTIONS: [a4paper, 12pt]
#+LaTeX_HEADER: \setlength{\parindent}{0.6cm}
#+LaTeX_HEADER: \setlength{\parskip}{0.5cm}



#+BEGIN_abstract
\begin{abstract}
This project asks the question, can you split up data in a meaningful
way, to different groups of people?  It will achieve this aim by using
several different techniques.  These involve human computer
interaction (HCI), processing of data, and web based authentication.

A web based application for managing academic staff workloads will be
developed, which will demonstrate this is possible.  It will collect
data together and display data according to which group of people you
belong to.  It demonstrates the display of data, restriction of write
and read access relevant to that group.
\end{abstract}
#+END_abstract




* Introduction
  With the large amount of data available on a problem, is it possible
  to split this data up in a meaningful way, to different groups of
  people?  This report will demonstrate how the data is
  split up into different views and using a central database will make
  the process less time consuming and more responsive to changes.

  A tool to manage staff teaching allocations will be developed.  How
  much they are doing will be shown.  This helps decide if they are doing to much or to
  little teaching.

  Currently a spreadsheet application, shown in figure
  \ref{fig:spreadsheet}, has been used to disseminate 
  the data across different groups.  This approach does not
  scale well. The means of gathering this information is painfully
  slow and time consuming. The spreadsheet application is also
  complicated and hard to use.  A new way of gathering the data
  together and disseminating the results is being examined to overcome
  the stated problems.

  #+ATTR_LATEX: width=\textwidth,placement=[H]
  #+CAPTION: The current spreadsheet application
  #+LABEL: fig:spreadsheet
  [[./images/spreadsheet.png]]

  This project attempts to develop a web served, database
  backed application. Dissemination of the information according to which
  group a user belongs to is attempted.  The proposed application tries to overcome the problem of
  gathering the data by using a central database which everyone enters
  information into from various places around SEAT, using a web
  interface.  It also tries and reduce the amount of data entered by
  using other already existing sources of information.

  

  
   
* Design perspectives
:HIDDEN:
--** Open source
   The aim was to develop on linux, using open source libraries as much
   as possible to do the job.  This put some big restrictions on the
   possible solutions, and in some cases left this project with only one
   choice.  The biggest challenge was dealing with Microsoft Access.
--** Web
   The application is to be a web served application.  The reason for
   this is to avoid the need to install it on every computer that
   needs access to this application, with the only requirement being
   that the computer has some sort of web browser installed.  This
   also avoids the need to develop several different versions for each
   operating system installed computers that are part of the SEAT
   network.
--** Javascript
   Javascript is the client programming language used to make the web
   pages more dynamic.
--*** Problems encountered
    Javascript posed problems in that each of the different web
    browsers have different implementations of the javascript engine.
    What may work with one browser may not work with another.  For
    example the following code will work in Firefox, but will not work
    in Internet Explorer.
    
    #+begin_src javascript
      tmp = 8;
      alert(tmp);
    #+end_src
    
    Internet Explorer expects any variable to be declared using the
    var keyword.  Any browser based upon Webkit such as Safari were
    the most strict when it comes to what they will accept.
  
    The development of javascript for this application had to undergo
    a few critical changes to make sure the code worked in all major
    browsers. The following rules had to be adopted.
    1) Always use var to declare variables
    2) Avoid the use of a few keywords, like delete
    3) If creating a array list, do not put a comma after the last element

    This list of rules does not cover every compatibility issue, but
    they were the major ones encountered.
--** jQuery
   jQuery \cite{jquery1} makes for a uniform javascript api across most of the major
   browsers, like IE and Firefox.  This simplifies the development of web
   applications and reduces the number of issues that come from having
   more than one brand of web browser accessing the site.

   #+begin_quote 
   jQuery is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development.
   #+end_quote
   jQuery \cite{jquery1}.

--** CSS
   CSS is to be used to customise the look and formatting of the
   documents displayed by the web browser.
--*** Problems encountered
    CSS is handled differently by different browsers.  Some of the CSS
    styles chosen, work perfectly in Firefox, but fail to work in
    Internet Explorer.  There is nothing that can be done about the
    incompatibilities, but one can either flag the problem as
    unimportant, like not centring, or not use it.  The policy chosen
    by this project is to make sure that the pages produced adhered to
    CSS version 2.0.  This standard is not supported by Internet
    Explorer 6, but later versions are assumed to adhere to this
    standard.
--** Python
   Python \cite{python1} is to be the programming language used on the
   server to rendered the HTML to the web browser. Python \cite{python1} is a high level scripting language with a large
   set of libraries available to it as part of the standard Python
   library.  It is needed by Django \cite{django1}. Python is easy to
   read, so easy to maintain.

   The application is to be developed in Python \cite{python1}, using
   the Django \cite{django1} framework.
--** Django
   "Django is a high-level Python Web framework that encourages rapid
   development and clean, pragmatic design." \cite{django1}

   "Django focuses on automating as much as possible and adhering to the
   DRY principle." \cite{django1}

   DRY stands for "Don't Repeat Yourself" \cite{DRY1}.

   Django uses a Model View Controller (MVC) \cite{mvc1} implementation, but
   prefers to use Model Template View (MTV) as a way of describing
   their framework.

   Django uses the MTV development pattern shown in figure \ref{fig:mtv}.
    - M is the model which is the data access layer.
    - T is the templates which is the presentation layer.
    - V is the views which is the business logic layer.

   This is important in realising how this application has been
   designed.  You get the database (models) with all the data needed, you
   have the views, which process the data, which is then taken by the
   templates which decide how this data is going to be displayed and
   what is going to be displayed.

#+attr_latex: width=20em,placement=[H]
#+CAPTION: The Django model
#+LABEL: fig:mtv
#+BEGIN_DITAA  mtv_django -r -S -E

 +----------+      +--------------+
 | {d}      |      | {d}          |
 | Template |------| Presentation |
 | cC02     |      | cC02         |
 +-----+----+      +-------+------+
       ^                   ^
       |                   |
   +---+--+        +-------+------+
   | {io} |        | {io}         |
   | View |--------| Business cBLU|
   | cBLU |        | Logic Layer  |
   +---+--+        +-------+------+
       ^                   ^
       |                   |
       |                   |
   +---+---+       +-------+------+
   | {s}   |       | {s}          |
   | Model |-------| Data Access  |
   | c888  |       | Layer c888   |
   +-------+       +--------------+

#+END_DITAA

   It has a few official databases that it can work with, those being
   MySQL, PostGRESQL, PostGRESQL psycopg2, SQLLite and Oracle.  Others
   are available, but these are unofficial.

   To talk in Django terms, Django consists of a project, which contains
   all the configuration information for setting up you site, over
   several files. Within this project is one or more, what Django refers
   to as, applications \cite{django1}.

   
   #+begin_quote
   
   Projects vs. apps

   What's the difference between a project and an app? An app is a Web
   application that does something -- e.g., a Weblog system, a database
   of public records or a simple poll app. A project is a collection of
   configuration and apps for a particular Web site. A project can
   contain multiple apps. An app can be in multiple projects.
   
   #+end_quote
   
   The basic way Django handles requests is shown diagramatically in
   figure \ref{fig:djprocess}.  A request for a URL is made.  Django
   looks up this URL pattern and maps this to a view, which then using a
   template, renders the html to the requesting browser.
   
   #+attr_latex: width=30em,placement=[H]
   #+CAPTION: The Django Process from URL Request to rendering to browser
   #+LABEL: fig:djprocess
   #+BEGIN_DITAA django-process -r -S -E
   
   +----------+        +------------+        +-----------+      +------------+
   | URL      |        |  URL       |        | Mapped    |      | Template   |
   | Request  +------->+  Pattern   +------->+ View      +----->+ Rendering  |
   |          |        |  Lookup    |        | Execution |      | To Browser |
   +----------+        +------------+        +-----------+      +------------+
   
   #+END_DITAA
   

   Django has a unique way of handling URLs.  Every application in a
   Django project has a file called 'urls.py'.  It defines a object
   called urlpatterns, which is a mapping of URL patterns, which are
   regular expressions and Python callback functions \cite{django1}.
   Part of the URL for that application is the name of the application.
   For example if a application is called 'frog', then all URLs with frog
   at the beginning of the URL string will be referencing the 'frog'
   application. Figure \ref{fig:urls} shows a brief example urls.py file
   contents. When a browser requests a page with the URL
   http://localhost/frog/prince/ it will be given the output of the
   project.frog.views shown in figure \ref{fig:djview} modules index function.


   -----

#+LaTeX: \begin{figure}[H]

#+begin_src python
from django.conf.urls.defaults import patterns

urlpatterns = patterns('',
    (r'^prince/$', 'project.frog.views.index'),
)

#+end_src

#+LaTeX: \caption{\label{fig:urls} An example content of a Django urls.py file}
#+LaTeX: \end{figure}

-----

The project.views.index function, in figure \ref{fig:djview}, then
takes this request and processes it, passing the results to a template
shown in figure \ref{fig:djtemplate}, which then renders the html to
the browser.



-----

#+LaTeX: \begin{figure}[H]

#+begin_src python
  
  from django.shortcuts import render_to_response
  from project.frog.models import Frog
  
  def index(request):
      #do some processing getting all records from the Frog model
      #with results stored in frog

      frogs = Frogs.objects.all()
  
      #render this to a template called index.html passing to it the
      #records from the Frog model as part of a dictionary (the second parameter)

      return render_to_response('index.html', {'frogs':frogs})
  
#+end_src

#+LaTeX: \caption{\label{fig:djview} The project.frog.views.index function}
#+LaTeX: \end{figure}

-----

The template, shown in figure \ref{fig:djtemplate} uses the dictionary to create a list of variables in this
case it is called 'frog' which is the records from the Frog model.
The records in this example are iterated through with each record
being outputed as the text of a html div tag.  As you can see anything
between {% %} is a Django template tag, which is processed by Djangos
template renderer.

-----

#+LaTeX: \begin{figure}[H]

#+begin_src html
  <html>
    <head>
      <title>Frogs</title>
    </head>
    <body>
      {% for frog in frogs %}
      <div>{% frog %}</div>
      {% endfor %}
    </body>
  </html>
#+end_src

#+LaTeX: \caption{\label{fig:djtemplate} The index.html template}
#+LaTeX: \end{figure}

-----

To get a full description of what is happening here see the Django
documentation \cite{django1}.

--** Database connectivity
   The application must have a way of storing and retrieving the data
   it needs to calculate Workload hours.  To achieve this relational databases
   are to be used.  All the information is to be stored on a local
   database with connections to others to retrieve specific information
   needed.

   There are two databases involved here, the local database which holds
   all information and the SEAT Postgraduate database.  The local
   database shall be a MySQL database, which Django has support for.
   The other database, which is used to update the postgraduate
   tables, is a Microsoft Access database.

   Since the application is being run on a GNU/Linux server a way to
   connect to the SEAT Postgraduate database has to found.  In the web
   forum unixODBC-support\cite{unixODBC} Martin J. Evans says there
   are three ways to get data from a MS Access database file from
   GNU/Linux.
    1) Share the folder containing the MS Access file and access it
       using MDBTools
    2) Create a link from a MS SQL Server to the MS Access file and use a
       MS SQL Server ODBC driver.
    3) Create a ODBC-ODBC bridge in which you install the ODBC service on
       the Windows machine, which uses a ODBC driver for MS Access, and
       use a ODBC driver on the Linux server which can talk to the remote
       server.

   The MDBTools option was choosen.  MDBTools has a ODBC driver
   library.  It was decided to use this in conjunction with a Python
   library called pyodbc \cite{pyodbc1}.  The options for what Python
   libraries to use for accessing ODBC were limited, and at the time
   of development pyodbc was the only one found that was open source
   and allowed a connection to a ODBC DSN source written entirely in
   Python.

   The pyodbc libary is written in C++. It adheres to the "Python Database
   API Specification v2.0" \cite{pydb2}.
--*** Problems encountered
--**** pyodbc
     The library pyodbc had problem.  In the environment that
     it was being run, it did not behave in the way, one assumes, that
     the author of the code thought.  This gave us results like, if the
     database entry was a integer of value 290 the returned result was
     3160370, or a double value of 40.0 being returned as
     6.9524415266644334e-310.


     The problem stemmed from the functions that get data from the
     results of the query and convert them into the appropriate data
     type for python.  The entire library depends on unix ODBC C
     library.  It uses various function calls which interact with unix ODBC,
     one of these fetches a single value from a row and transforms it
     into the appropriate data type.  Like if a field in a table is a
     Integer then the appropriate function transforms it into a Python
     Integer type.  To fetch the value at a particular position in the
     fetched row pyodbc uses the ODBC function SQLGetData(...).

     Its use of the function SQLGetData(...) is flawed, in
     that the results being returned for floating point values are
     incorrect.  SQLGetData(...) can in theory, retrieve the data and
     convert it into the equivalent data type specified by the database
     table column type.

     With some modifications to the code, it was possible to rely on
     the modified version of this library.  We found that getting the
     data as a string value gave us a accurate answer represented in a
     string format.  One could then convert this to the appropriate
     type with a Python convenience C function like for integers like
     PyLong_FromString(...).

     That was all that was needed to make pyodbc to produce the expected
     accurate results.
--**** MDBTools
     Using the MDBTools odbc driver has problems that with certain
     queries, it caused the application to throw a segmentation
     fault.  There is no more information than that, and it only
     happens when fetching data from a certain table, in this case it
     was the Staff table in the SEAT2008.mdb file.  On one computer it
     would work perfectly, but only if the query used excluded all
     those except for academic staff.  This was on a computer separate
     from the SEAT intranet.  When used on a different machine,
     connected to the SEAT intranet, it would segment fault, no matter
     what query was used, but it was the same table, so something
     about that table is causing MDBTools problems.  It was hoped
     there was a newer version of MDBTools that has resolved this
     problem, but it was found that MDBTools is no longer being
     actively developed, and has not been for two years at the time of
     writing this report.

     While it is possible to get a hold of the source, finding and
     fixing the bug, may be beyond the means available to the current
     developer. It may require knowledge of Microsoft Access which is
     not available to the developer of this application.

     Other tools were looked for, but only a Java library, called
     Jackcess \cite{jackess1}, could be found.  This would increase the complexity of
     the application, unless it was run under a jython environment.
     This situation was a undesirable one. The developer did not want
     to use Java as a solution for this problem.  To use Jython would
     introduce Java into Python code, which would cause it not to be
     portable to other Python environments.

     One easy solution, if it is only happening when accessing the Staff
     table, is to include the information needed in the Staff table held in
     the local database, which is the LoginName field of the SEAT2008 Staff
     table.  This is needed to identify the supervisor of a postgraduate
     from the SuperviseStudent table in PostgradData.mdb.  The
     solution has yet to be implemented, and that would mean altering
     the Staff table in the Workload database and adding the extra
     field for LoginName.

     This problem is still unresolved.
--** Concurrency / Multiple views
   The application must be able to deal with having several people
   accessing the database at once.  Concurrent access to this data
   must be addressed.

   There are three views or users of this system.
    - Manager
    - Cluster leader
    - Staff

   Each has a different set of functions available to them.

    + The manager should be able to access for all clusters
      - a overview of total staff workload hours which includes hours
        gained from papers, postgraduate supervision, and administration roles.
      - a breakdown of the administration roles held by staff and the
        hours they gain from this.
      - a breakdown of the postgraduate students that are supervised by
        staff and how many hours they get from each student
      - a programme list of papers offered by degrees listed by the year
        they are offered
      - a means by which they can manage which staff teach, coordinate
        papers, what administrative roles they hold.
      - make archives of the current database

    + The cluster leader can access the same options that the manager
      can access, but only for their cluster.

    + the individual staff member who is not a cluster leader, or a
      manager. They can edit personal details like first name, and
      last name. They can access only their workload information in a
      read only format, with a breakdown of what their total workload
      hours are made up of.
      - Papers
      - Administration roles
      - Postgraduate supervision


  Editing of data, must be able to be done at the same time. This is where
  the concurrency problem comes in.  A means by which data can be
  edited from several sources at once must be found.  An idea was to
  avoid having multiple people editing the same paper at once.

--** Security / Multiple access
   Security is a minor issue for this application.  Write access is the
   primary concern here.  It does not seem like it is a major issue,
   but the data is still treated as sensitive. Within the organisation
   the information of one cluster is open to the other.  They seem to
   like to see what the other is doing and is not worried if another
   cluster member does see thier information.
--** Application configuration
The application is required to be configurable and is operating under
the following assumption.  The discrete coefficient variable must be
able to be changed in the future.  I forfull this requirement by
creating a model called Coefficients, and another for the standard
points value of a paper called StdPoints.  These would take the form
of tables in a database, probably called db_coefficients and
db_stdpoints.  There are shown in table \ref{table:coefficients}.  The
values can be changed, but while the input can be changed, if it is,
would break the system.  The functions that do the calculations use
inputs as the primary key lookup value.


The part that can not be changed is the formulas themselves.  To
change these, someone needs to alter the formulas in the formula
module.  This would require someone with Python programming
experience.

#+CAPTION: Table of coefficients
#+LABEL: table:coefficients

|---------------------+--------+-----------+-------|
| input               | points | intercept | slope |
|---------------------+--------+-----------+-------|
| undergrad           |     15 |     287.5 |     4 |
| project             |     30 |         0 |    50 |
| local\_coordinator  |     15 |         3 |   0.1 |
| global\_coordinator |     15 |        12 |  0.05 |
|---------------------+--------+-----------+-------|

:END:
This project uses the following technologies.
 - Python
 - Django
 - MySQL
 - ODBC
 - jQuery
 - Ajax
 - HTML and CSS

* Redesign phase (following user presentation)
  After developing a initial design the application was presented to
  the cluster leaders at a meeting.  They were given a preview of
  how they could interact with the application.


  The application tree view model prototype was not liked. It was
  discovered they liked the way that Microsoft Excell allowed one to
  edit the data about teaching allocations and paper coordination. 

  A major redesign was undertaken for how the cluster leaders can
  edit the teaching allocations and paper coordinations was
  undertaken.  Peviously the interface had been based upon a tree
  like stucture, with nodes showing the paper, which expand to show
  paper offerings and teaching allocations.  The cluster leaders, I
  think, did not like this, and seemed to like the way they were able
  to edit the relavent sections in the spreadsheet.  So the new
  interface gained some of the functionality of the spreadsheet. This
  is shown in figure \ref{fig:redesign:clusterview}. The old view is
  shown in figure \ref{fig:redesign:oldview}.
  
  
  #+ATTR_LaTeX: width=\textwidth, placement=[H]
  #+CAPTION: Cluster leader paper edit view in spreadsheet style
  #+LABEL: fig:redesign:clusterview
  
  [[./images/cluster_paper_edit_view.png]]
  
  
  #+ATTR_LaTeX: width=\textwidth, placement=[H]
  #+CAPTION: The old way cluster leaders were to edit their papers
  #+LABEL: fig:redesign:oldview
  
  [[./images/admin_offering_teach_edit_view.png]]
** Testing
   At every stage of development, testing took place.  There were no
   automated tests, even though they are possible, due to the developers
   inexperience in testing web applications.  However, at every stage,
   a checklist of features and operations were tested by hand.  A
   checkbox list of inputs and results were checked for pass or
   crossed for fail.

* Implementation

* Learning outcomes
  (What I learned and what I would do differently)
** Responsiveness
There are two places to process the data and one place to display the
results. You can use client side scripts, like javascript to process
the data, and it can be processed on the server side.  The more data
that is processed on the server side the less people that it can
handle at once.  Also doing it all on the server side means the pages
have to be reloaded every time a new choice is made.  The client side
processing of data, takes some of the load off the server, but it has
the downside, of relying on the clients browser to have the
functionality required, like javascript, which could be of a different
version to the one that the site was developed for.  Also javascript
seems to be a lot slower to process data than the server side scripts
are.

Do mass processing of data on the server side.  Only use javascript to
process or retrieve small amounts of data.

The efficiency of algorithms will have more impact on the
loading time of dynamic pages than the choice of languages.  The
loading time of a page was reduced by following the following rules,
based upon "Python Patterns - An Optimization Anecdote"
\cite{optimising1}.


#+begin_quote 

    + Rule number one: only optimize when there is a proven speed bottleneck. Only optimize the innermost loop. (This rule is independent of Python, but it doesn't hurt repeating it, since it can save a lot of work. :-)
    + Small is beautiful. Given Python's hefty charges for bytecode instructions and variable look-up, it rarely pays off to add extra tests to save a little bit of work.
    + Use intrinsic operations. An implied loop in map() is faster than an explicit for loop; a while loop with an explicit loop counter is even slower.
    + Avoid calling functions written in Python in your inner loop. This includes lambdas. In-lining the inner loop can save a lot of time.
    + Local variables are faster than globals; if you use a global constant in a loop, copy it to a local variable before the loop. And in Python, function names (global or built-in) are also global constants!
    + Try to use map(), filter() or reduce() to replace an explicit for loop, but only if you can use a built-in function: map with a built-in function beats for loop, but a for loop with in-line code beats map with a lambda function!
    + Check your algorithms for quadratic behavior. But notice that a more complex algorithm only pays off for large N - for small N, the complexity doesn't pay off. In our case, 256 turned out to be small enough that the simpler version was still a tad faster. Your mileage may vary - this is worth investigating.
    + And last but not least: collect data. Python's excellent profile
      module can quickly show the bottleneck in your code. if you're
      considering different versions of an algorithm, test it in a
      tight loop using the time.clock() function. 

#+end_quote


There is still the possibility of using C compiled code to speed up
the response time, as python being a interpreted language, does run
slower than C.  That would be the next step in optimising the response
time of the application.

** Javascript compatability
Javascript is implemented differently across different browsers.
jQuery helped overcome most of the issues, but there were rules that
need to be adhered to make sure your code works in most major
browsers.
  1) Always use var to declare variables
  2) Avoid the use of a few keywords, like delete
  3) If creating a array list, do not put a comma after the last element

The first and the third rules are for Internet Explorer, but the
second is true particularly for any browser based on Webkit, like
Safari.

Using jQuery from the start avoided most of the other possible
incompatabilities, to the extent that no other issues other than the
ones previously mentioned were encountered.


This application relies on javascript, so if it is turned off then
hardly anything will work.  Currently nothing is done in response to
this situation. In future, a warning message, telling the user this,
produced on the server side, would be shown.  Other than this there is
nothing that can be done, if the browser has javascript turned off.

** CSS
Not much can be done if a browser can't implement CSS, but you can
make sure that the CSS used adheres to a certain standard.  The
decision to make sure that CSS was compatible with version 2.0 was
about the extent that the compatibility issues were addressed.
Further work could eb done to detect which version of CSS the browser
implements, and look at what can be done to overcome any display
issues created if it does implement the CSS version that has been
used.  If this was to be done again, then a message warning of this
problem would be shown, and a possible solution displayed, like
upgrade your browser, or install another browser.

** Cocurrency / Multiple views
Most of the concurrency issues have been avoided.  The only possible
issue that could cause real problems, is if two cluster leaders from
the same cluster logged in and started editing the papers.  Most of
the time this curcumstance would not happen, but it could.  A possible
solution is to either implement concurrency solutions like locks, or
if there are two cluster leaders of the same cluster, logged on, to
logg both of them off with a warning message.

** Look and feel of pages
Getting pages to look the same across browsers is very difficult
when using the HTML markup, even with the aid of CSS and javascript.
The best you can do is make sure the components appear in the same
place, using simalar colours.  The shape of the form controls are out
of your hand and in most browsers can not be manipulated very easily
with CSS.  Firefox for example, uses native controls like checkboxes,
and does not allow CSS to alter the look of this control.  There are
methods, which can be used to make it look the way you want it.  These
hacks are not desirable, as they add another unstable element into the
page display.  One way that was found to control the look of controls
was not to use them, but to display images, and add javascript events
to them.


\bibliographystyle{plain}
\bibliography{bibliography}




# LocalWords:  customise centring

