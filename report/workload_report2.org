#+TITLE:     Workload Report
#+AUTHOR:    James Hurford
#+EMAIL:     terrasea@gmail.com
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:


#+DRAWERS: FIGURE

#+LaTeX_HEADER: \setlength{\parindent}{0pt}
#+LaTeX_HEADER: \setlength{\parskip}{1em}


* Introduction
** What
   This is a application which calculates Workload hours for members
   of Massey University School of Engineering and Technology (SEAT)
   staff.  It replaces a existing spreadsheet solution.  It involves
   many users inputting data into one source, and from this data
   calculates the Workload hours of the staff involved and displays
   the result.
** Why
   Workload hours are a abstract measurement of how much work is being
   done by a staff member.  It is a management tool designed to allow
   decisions to be made as to how work is distributed amongst staff
   members.

   The current solution requires input into a single spreadsheet
   collated from data from many different sources, usually copies of
   the same spreadsheet.  The process is complicated and time
   consuming.  A different solution is to be developed.

** Overview
*** Calculating Workload hours
A couple of documents were provided by Mrs Glenda Kirk, one
being the actual spreadsheet \cite{stdhours2} that this application is replacing and
the other is a document \cite{stdhours1} describing the workload formula and a few note
on how it is applied.

**** The standard hours formula
The problem was described as each staff member has various jobs and
responsibilities.  For each of these jobs and responsibilities they
get awarded Workload hours, based upon a formula.  The way in which
Workload hours are assigned was described in a word document called
"Standard Hours Formula" \cite{stdhours1}.  This gave a formula
for calculating standard hours for a paper shown in figure
\ref{fig:formula}.  A table was also provided which gave the
coefficients for each teaching input shown in table \ref{table:coefficients}.

:FIGURE:
#+begin_html
<div id="fig:formula2" class="figure">
#+end_html
#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
:END:
Standard Hours = Intercept*paper points/15
                 + (Slope*no. of students)
                 - (144/no. of students)

#+end_example

:FIGURE:
#+BEGIN_LATEX
\caption{\label{fig:formula} The standard hours formula used to
calculate a standard hour component}
\end{figure}
#+END_LATEX
#+begin_html
</div>
#+end_html


#+ATTR_LaTeX: placement=[H]
#+CAPTION: The Coefficients table used to supply the values that are plugged into the standard hours formula
#+LABEL: table:coefficients
:END:
|---------------------+--------+-----------+-------|
| Input               | Points | Intercept | Slope |
|---------------------+--------+-----------+-------|
| Undergraduate paper |     15 |     287.5 |     4 |
| Project paper       |     30 |         0 |    50 |
| Honours project     |     30 |         0 |    50 |
| DipApplSc           |     30 |         0 |    50 |
| Dip/Mast (1st Sup)  |     50 |         0 |    75 |
| Dip/Mast (2nd Sup)  |     50 |         0 |    25 |
| PhD (1st Sup)       |    100 |         0 |   100 |
| PhD (2nd Sup)       |    100 |         0 |    50 |
|---------------------+--------+-----------+-------|


**** Teaching allocation hours
The standard hours formula calculates how many hours a paper is worth
for that given year with the students enrolled in it that year.  Each
staff member who teaches this paper gets a share of these standard
hours that were calculate.  It is determined how much of the paper
they teach in percentage terms, and this percentage is the percentage
of the total standard hours this paper provides for that year.  an
example is provided in figure \ref{fig:example1}.

:FIGURE:
#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
:END:
no. of students = 10
paper points = 15
Intercept = 287.5
Slope = 4

standard hours = 287.5*15/15
                 + (4*10)
                 - (144/10)
               = 313.1

staff1 teach allocation = 60%
staff2 teach allocation = 40%

staff1 gets 313.1*(60/100) = 187.86 standard hours
staff2 gets 313.1*(40/100) = 125.24 standard hours
:FIGURE:
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:example1} An example of how the standard hours are
used to calculate a staff members teaching hours}
\end{figure}
#+END_LATEX
:END:


**** Coordinator hours

For each paper it is recognised as having two coordinators.  The
global coordinator and the local coordinator.  The global coordinator
"overseas paper direction, paper content, cross campus equivalence
etc" \cite{stdhours1}.  The local coordinator "coordinates the paper
on an individual campus" \cite{stdhours1}.  The coordination of this
paper has a intercept of 15 and a slope of 0.15.  These are split
between the local and global coordinator.  This is shown in table
\ref{table:coord}.

:FIGURE:
#+ATTR_LaTeX: placement=[H]
#+CAPTION: Table showing the intercept and slope used for local and global coordinators
#+LABEL: table:coord
:END:
|-----------+-------------+-------------+-------|
|           | Global      | Local       |       |
|           | Coordinator | Coordinator | Total |
|-----------+-------------+-------------+-------|
| Intercept | 12          | 3           | 15    |
| Slope     | 0.05        | 0.1         | 0.15  |
|-----------+-------------+-------------+-------|


The formula shown in figure \ref{fig:formula3} is different to the
normal teaching standard hours formula.  The samll class modifier was
not used.
:FIGURE:
#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
:END:
coordinator standard hours = Intercept*paper points/15
                             + (Slope*no. of students)
:FIGURE:
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:formula3} The corrected standard hours formula
used to calculate coordinator standard hours}
\end{figure}
#+END_LATEX
:END:

**** Other modifiers used to calculate standard hours
- *Off campus modifier:*
    A loading modifier of 1.25 is applied to the intercept for papers
    delivered by staff whose home campus is located elsewhere.
- *Same teaching material:*
    If the material taught in two papers is the same then the intercept is
    only included once.
- *Duplicate Teaching:*
    If a staff is teaching similar material in two papers, the the
    intercept is applied only once for both and a modifier of 1.5 is
    applied to this intercept.


**** Project papers
Project papers have how many workload hours they are worth calculated
just like a normal undergraduate paper, like the formula in figure
\ref{fig:formula}.  The difference is that the staff involved
supervise a set number of students, instead of teaching a percentage
of the paper, and thus get the hours that the portion of the total
enrolled students is worth.  The intercept for undergraduate project
papers is 40 and it has a slope of 0.  Thus if there are 10 enrolled
students, and the staff member was supervising 1 of them then the
hours they would get 2.56 workload hours.  Assuming that this is a
paper of 15 points in value.
:FIGURE:
\begin{equation}
:END:
40*15/15+(0*10)-(144/10) = 25.6
25.6*(1/10) = 2.56
:FIGURE:
\end{equation}
:END:
Postgraduate project papers are also calculated given the formula from
figure \ref{fig:formula}.  Their points value, intercept and slope
are given in table \ref{table:coefficients}.

**** Postgraduate supervision
Staff members maybe supervising postgraduate students.  This
supervision is worth workload hours, but how many the staff member
gets depends on what postgraduate degree the postgraduate is doing and
how much supervision this staff member is giving the postgraduate
student.

The spreadsheet implementation uses a set of cells that contain the
workload hours that each degree is worth.  The extracted table, shown
in table \ref{table:pghours}, has one column with the shortened degree
name and next to that degree in the next column is the total hours.

:FIGURE:
#+ATTR_LaTeX: placement=[H]
#+CAPTION: The extracted postgraduate workload hours
#+LABEL: table:pghours
:END:
|---------------+-----|
| ApplSc(Hons)  |  50 |
| DipApplSc     |  50 |
| PGDipTech     | 100 |
| PGDipApplSc   | 100 |
| PGDipEng      | 100 |
| DipTech       | 100 |
| DipMIO        | 100 |
| GradDip       | 100 |
| GDipTech      | 100 |
| GCertScTech   |   0 |
| Exchange      |   0 |
| MApplSc       | 100 |
| MInfSc        | 100 |
| MPhil         | 100 |
| MSc           | 100 |
| MDairySc&Tech | 100 |
| MTech         | 100 |
| ME            | 100 |
| PGDip         |  50 |
| PhD           | 150 |
|---------------+-----|
:FIGURE:
#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
:END:
A staff member has a postgraduate student doing a MSc.
The staff member does 50% of the supervision for this student.  MSc is worth 100
workload hours.  50% of 100 is 50 so the staff member gets awarded 50
workload hours for supervising this student.  The other staff member
also provides 50% of the supervision for this student and gets awarded
the other 50% of the workload hours available for supervising this
student which is also 50 workload hours.
:FIGURE:
#+BEGIN_LATEX
\caption{\label{fig:pgequation}A example of how the postgraduate hours
are divided between two supervisors}
\end{figure}
#+END_LATEX
:END:
**** Administration roles
Administration roles held by staff are also worth some workload
hours.  Each role is worth a set number of hours and could include
things like being a member of IEEE.

Every staff member gets a administration allowance of 90 workload
hours.

The document "Standard Hours Formula" \cite{stdhours1} states various
categories of administration roles, but it comes down to a role
description which has a set number of hours associated with it.  The
spreadsheet \cite{stdhours2} handles it by having a look up table of the roles along
with their hours.  Table \ref{table:admin1} showing this has been extracted from the
spreadsheet \cite{stdhours2}.

:FIGURE:
#+ATTR_LaTeX: placement=[H]
#+CAPTION: Table from spreadsheet showing the workload hour values of a set of administration roles
#+LABEL: table:admin1
:END:
|-----------------------+--------------|
| Committee             |        Hours |
|-----------------------+--------------|
| A Class Cmttee        | Case by Case |
| Admin Allowance       |           90 |
| Assoc Head AL         |          169 |
| Assoc Head PN         |           84 |
| Assoc Head WN         |          169 |
| B Class Cmttee        |           40 |
| C Class Cmttee        |           20 |
| Cluster Leader        |          337 |
| Deputy Cluster Leader |          169 |
| HOS                   |         1113 |
| IEEE                  |          169 |
| International         |          169 |
| Major Leader          |          135 |
| Marketing Director    |          337 |
| PG Director           |          422 |
| Research Director     |          253 |
| Tech Services Manager |          337 |
| Undergrad Director    |          675 |
|-----------------------+--------------|


* Design perspectives
** Open source
   The aim was to develop on linux, using open source libraries as much
   as possible to do the job.  This put some big restrictions on the
   possible solutions, and in some cases left this project with only one
   choice.  The biggest challenge was dealing with Microsoft Access.
** Web
   The application is to be a web served application.  The reason for
   this is to avoid the need to install it on every computer that
   needs access to this application, with the only requirement being
   that the computer has some sort of web browser installed.  This
   also avoids the need to develop several different versions for each
   operating system installed computers that are part of the SEAT
   network.
** Javascript
   Javascript is the client programming language used to make the web
   pages more dynamic.
*** Problems encountered
    Javascript posed problems in that each of the different web
    browsers have different implementations of the javascript engine.
    What may work with one browser may not work with another.  For
    example the following code will work in Firefox, but will not work
    in Internet Explorer.
    
    #+begin_src javascript
      tmp = 8;
      alert(tmp);
    #+end_src
    
    Internet Explorer expects any variable to be declared using the
    var keyword.  Any browser based upon Webkit such as Safari were
    the most strict when it comes to what they will accept.
  
    The development of javascript for this application had to undergo
    a few critical changes to make sure the code worked in all major
    browsers. The following rules had to be adopted.
    1) Always use var to declare variables
    2) Avoid the use of a few keywords, like delete
    3) If creating a array list, do not put a comma after the last element

    This list of rules does not cover every compatibility issue, but
    they were the major ones encountered.
** jQuery
   jQuery \cite{jquery1} makes for a uniform javascript api across most of the major
   browsers, like IE and Firefox.  This simplifies the development of web
   applications and reduces the number of issues that come from having
   more than one brand of web browser accessing the site.

   #+begin_quote 
   jQuery is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development.
   #+end_quote
   jQuery \cite{jquery1}.

** CSS
   CSS is to be used to customise the look and formatting of the
   documents displayed by the web browser.
*** Problems encountered
    CSS is handled differently by different browsers.  Some of the CSS
    styles chosen, work perfectly in Firefox, but fail to work in
    Internet Explorer.  There is nothing that can be done about the
    incompatibilities, but one can either flag the problem as
    unimportant, like not centring, or not use it.  The policy chosen
    by this project is to make sure that the pages produced adhered to
    CSS version 2.0.  This standard is not supported by Internet
    Explorer 6, but later versions are assumed to adhere to this
    standard.
** Python
   Python \cite{python1} is to be the programming language used on the
   server to rendered the HTML to the web browser. Python \cite{python1} is a high level scripting language with a large
   set of libraries available to it as part of the standard Python
   library.  It is needed by Django \cite{django1}. Python is easy to
   read, so easy to maintain.

   The application is to be developed in Python \cite{python1}, using
   the Django \cite{django1} framework.
** Django
   "Django is a high-level Python Web framework that encourages rapid
   development and clean, pragmatic design." \cite{django1}

   "Django focuses on automating as much as possible and adhering to the
   DRY principle." \cite{django1}

   DRY stands for "Don't Repeat Yourself" \cite{DRY1}.

   Django uses a Model View Controller (MVC) \cite{mvc1} implementation, but
   prefers to use Model Template View (MTV) as a way of describing
   their framework.

   Django uses the MTV development pattern shown in figure \ref{fig:mtv}.
    - M is the model which is the data access layer.
    - T is the templates which is the presentation layer.
    - V is the views which is the business logic layer.

   This is important in realising how this application has been
   designed.  You get the database (models) with all the data needed, you
   have the views, which process the data, which is then taken by the
   templates which decide how this data is going to be displayed and
   what is going to be displayed.
:FIGURE:
#+attr_latex: width=20em,placement=[H]
#+CAPTION: The Django model
#+LABEL: fig:mtv
#+BEGIN_DITAA  mtv_django -r -S -E
:END:
 +----------+      +--------------+
 | {d}      |      | {d}          |
 | Template |------| Presentation |
 | cC02     |      | cC02         |
 +-----+----+      +-------+------+
       ^                   ^
       |                   |
   +---+--+        +-------+------+
   | {io} |        | {io}         |
   | View |--------| Business cBLU|
   | cBLU |        | Logic Layer  |
   +---+--+        +-------+------+
       ^                   ^
       |                   |
       |                   |
   +---+---+       +-------+------+
   | {s}   |       | {s}          |
   | Model |-------| Data Access  |
   | c888  |       | Layer c888   |
   +-------+       +--------------+
:FIGURE:
#+END_DITAA
:END:
   It has a few official databases that it can work with, those being
   MySQL, PostGRESQL, PostGRESQL psycopg2, SQLLite and Oracle.  Others
   are available, but these are unofficial.

   To talk in Django terms, Django consists of a project, which contains
   all the configuration information for setting up you site, over
   several files. Within this project is one or more, what Django refers
   to as, applications \cite{django1}.

   :FIGURE:
   #+begin_quote
   :END:
   Projects vs. apps

   What's the difference between a project and an app? An app is a Web
   application that does something -- e.g., a Weblog system, a database
   of public records or a simple poll app. A project is a collection of
   configuration and apps for a particular Web site. A project can
   contain multiple apps. An app can be in multiple projects.
   :FIGURE:
   #+end_quote
   :END:
   The basic way Django handles requests is shown diagramatically in
   figure \ref{fig:djprocess}.  A request for a URL is made.  Django
   looks up this URL pattern and maps this to a view, which then using a
   template, renders the html to the requesting browser.
   :FIGURE:
   #+attr_latex: width=30em,placement=[H]
   #+CAPTION: The Django Process from URL Request to rendering to browser
   #+LABEL: fig:djprocess
   #+BEGIN_DITAA django-process -r -S -E
   :END:
   +----------+        +------------+        +-----------+      +------------+
   | URL      |        |  URL       |        | Mapped    |      | Template   |
   | Request  +------->+  Pattern   +------->+ View      +----->+ Rendering  |
   |          |        |  Lookup    |        | Execution |      | To Browser |
   +----------+        +------------+        +-----------+      +------------+
   :FIGURE:
   #+END_DITAA
   :END:

   Django has a unique way of handling URLs.  Every application in a
   Django project has a file called 'urls.py'.  It defines a object
   called urlpatterns, which is a mapping of URL patterns, which are
   regular expressions and Python callback functions \cite{django1}.
   Part of the URL for that application is the name of the application.
   For example if a application is called 'frog', then all URLs with frog
   at the beginning of the URL string will be referencing the 'frog'
   application. Figure \ref{fig:urls} shows a brief example urls.py file
   contents. When a browser requests a page with the URL
   http://localhost/frog/prince/ it will be given the output of the
   project.frog.views shown in figure \ref{fig:djview} modules index function.


   -----
:FIGURE:
#+LaTeX: \begin{figure}[H]
:END:
#+begin_src python
from django.conf.urls.defaults import patterns

urlpatterns = patterns('',
    (r'^prince/$', 'project.frog.views.index'),
)

#+end_src
:FIGURE:
#+LaTeX: \caption{\label{fig:urls} An example content of a Django urls.py file}
#+LaTeX: \end{figure}
:END:
-----

The project.views.index function, in figure \ref{fig:djview}, then
takes this request and processes it, passing the results to a template
shown in figure \ref{fig:djtemplate}, which then renders the html to
the browser.



-----
:FIGURE:
#+LaTeX: \begin{figure}[H]
:END:
#+begin_src python
  
  from django.shortcuts import render_to_response
  from project.frog.models import Frog
  
  def index(request):
      #do some processing getting all records from the Frog model
      #with results stored in frog

      frogs = Frogs.objects.all()
  
      #render this to a template called index.html passing to it the
      #records from the Frog model as part of a dictionary (the second parameter)

      return render_to_response('index.html', {'frogs':frogs})
  
#+end_src
:FIGURE:
#+LaTeX: \caption{\label{fig:djview} The project.frog.views.index function}
#+LaTeX: \end{figure}
:END:
-----

The template, shown in figure \ref{fig:djtemplate} uses the dictionary to create a list of variables in this
case it is called 'frog' which is the records from the Frog model.
The records in this example are iterated through with each record
being outputed as the text of a html div tag.  As you can see anything
between {% %} is a Django template tag, which is processed by Djangos
template renderer.

-----
:FIGURE:
#+LaTeX: \begin{figure}[H]
:END:
#+begin_src html
  <html>
    <head>
      <title>Frogs</title>
    </head>
    <body>
      {% for frog in frogs %}
      <div>{% frog %}</div>
      {% endfor %}
    </body>
  </html>
#+end_src
:FIGURE:
#+LaTeX: \caption{\label{fig:djtemplate} The index.html template}
#+LaTeX: \end{figure}
:END:
-----

To get a full description of what is happening here see the Django
documentation \cite{django1}.

** Database connectivity
   The application must have a way of storing and retrieving the data
   it needs to calculate Workload hours.  To achieve this relational databases
   are to be used.  All the information is to be stored on a local
   database with connections to others to retrieve specific information
   needed.

   There are two databases involved here, the local database which holds
   all information and the SEAT Postgraduate database.  The local
   database shall be a MySQL database, which Django has support for.
   The other database, which is used to update the postgraduate
   tables, is a Microsoft Access database.

   Since the application is being run on a GNU/Linux server a way to
   connect to the SEAT Postgraduate database has to found.  In the web
   forum unixODBC-support\cite{unixODBC} Martin J. Evans says there
   are three ways to get data from a MS Access database file from
   GNU/Linux.
    1) Share the folder containing the MS Access file and access it
       using MDBTools
    2) Create a link from a MS SQL Server to the MS Access file and use a
       MS SQL Server ODBC driver.
    3) Create a ODBC-ODBC bridge in which you install the ODBC service on
       the Windows machine, which uses a ODBC driver for MS Access, and
       use a ODBC driver on the Linux server which can talk to the remote
       server.

   The MDBTools option was choosen.  MDBTools has a ODBC driver
   library.  It was decided to use this in conjunction with a Python
   library called pyodbc \cite{pyodbc1}.  The options for what Python
   libraries to use for accessing ODBC were limited, and at the time
   of development pyodbc was the only one found that was open source
   and allowed a connection to a ODBC DSN source written entirely in
   Python.

   The pyodbc libary is written in C++. It adheres to the "Python Database
   API Specification v2.0" \cite{pydb2}.
*** Problems encountered
**** pyodbc
     The library pyodbc had problem.  In the environment that
     it was being run, it did not behave in the way, one assumes, that
     the author of the code thought.  This gave us results like, if the
     database entry was a integer of value 290 the returned result was
     3160370, or a double value of 40.0 being returned as
     6.9524415266644334e-310.


     The problem stemmed from the functions that get data from the
     results of the query and convert them into the appropriate data
     type for python.  The entire library depends on unix ODBC C
     library.  It uses various function calls which interact with unix ODBC,
     one of these fetches a single value from a row and transforms it
     into the appropriate data type.  Like if a field in a table is a
     Integer then the appropriate function transforms it into a Python
     Integer type.  To fetch the value at a particular position in the
     fetched row pyodbc uses the ODBC function SQLGetData(...).

     Its use of the function SQLGetData(...) is flawed, in
     that the results being returned for floating point values are
     incorrect.  SQLGetData(...) can in theory, retrieve the data and
     convert it into the equivalent data type specified by the database
     table column type.

     With some modifications to the code, it was possible to rely on
     the modified version of this library.  We found that getting the
     data as a string value gave us a accurate answer represented in a
     string format.  One could then convert this to the appropriate
     type with a Python convenience C function like for integers like
     PyLong_FromString(...).

     That was all that was needed to make pyodbc to produce the expected
     accurate results.
**** MDBTools
     Using the MDBTools odbc driver has problems that with certain
     queries, it caused the application to throw a segmentation
     fault.  There is no more information than that, and it only
     happens when fetching data from a certain table, in this case it
     was the Staff table in the SEAT2008.mdb file.  On one computer it
     would work perfectly, but only if the query used excluded all
     those except for academic staff.  This was on a computer separate
     from the SEAT intranet.  When used on a different machine,
     connected to the SEAT intranet, it would segment fault, no matter
     what query was used, but it was the same table, so something
     about that table is causing MDBTools problems.  It was hoped
     there was a newer version of MDBTools that has resolved this
     problem, but it was found that MDBTools is no longer being
     actively developed, and has not been for two years at the time of
     writing this report.

     While it is possible to get a hold of the source, finding and
     fixing the bug, may be beyond the means available to the current
     developer. It may require knowledge of Microsoft Access which is
     not available to the developer of this application.

     Other tools were looked for, but only a Java library, called
     Jackcess \cite{jackess1}, could be found.  This would increase the complexity of
     the application, unless it was run under a jython environment.
     This situation was a undesirable one. The developer did not want
     to use Java as a solution for this problem.  To use Jython would
     introduce Java into Python code, which would cause it not to be
     portable to other Python environments.

     One easy solution, if it is only happening when accessing the Staff
     table, is to include the information needed in the Staff table held in
     the local database, which is the LoginName field of the SEAT2008 Staff
     table.  This is needed to identify the supervisor of a postgraduate
     from the SuperviseStudent table in PostgradData.mdb.  The
     solution has yet to be implemented, and that would mean altering
     the Staff table in the Workload database and adding the extra
     field for LoginName.

     This problem is still unresolved.
** Concurrency / Multiple views
   The application must be able to deal with having several people
   accessing the database at once.  Concurrent access to this data
   must be addressed.

   There are three views or users of this system.
    - Manager
    - Cluster leader
    - Staff

   Each has a different set of functions available to them.

    + The manager should be able to access for all clusters
      - a overview of total staff workload hours which includes hours
        gained from papers, postgraduate supervision, and administration roles.
      - a breakdown of the administration roles held by staff and the
        hours they gain from this.
      - a breakdown of the postgraduate students that are supervised by
        staff and how many hours they get from each student
      - a programme list of papers offered by degrees listed by the year
        they are offered
      - a means by which they can manage which staff teach, coordinate
        papers, what administrative roles they hold.
      - make archives of the current database

    + The cluster leader can access the same options that the manager
      can access, but only for their cluster.

    + the individual staff member who is not a cluster leader, or a
      manager. They can edit personal details like first name, and
      last name. They can access only their workload information in a
      read only format, with a breakdown of what their total workload
      hours are made up of.
      - Papers
      - Administration roles
      - Postgraduate supervision


  Editing of data, must be able to be done at the same time. This is where
  the concurrency problem comes in.  A means by which data can be
  edited from several sources at once must be found.  An idea was to
  avoid having multiple people editing the same paper at once.

** Security / Multiple access
   Security is a minor issue for this application.  Write access is the
   primary concern here.  It does not seem like it is a major issue,
   but the data is still treated as sensitive. Within the organisation
   the information of one cluster is open to the other.  They seem to
   like to see what the other is doing and is not worried if another
   cluster member does see thier information.
** Application configuration
The application is required to be configurable and is operating under
the following assumption.  The discrete coefficient variable must be
able to be changed in the future.  I forfull this requirement by
creating a model called Coefficients, and another for the standard
points value of a paper called StdPoints.  These would take the form
of tables in a database, probably called db_coefficients and
db_stdpoints.  There are shown in table \ref{table:coefficients}.  The
values can be changed, but while the input can be changed, if it is,
would break the system.  The functions that do the calculations use
inputs as the primary key lookup value.


The part that can not be changed is the formulas themselves.  To
change these, someone needs to alter the formulas in the formula
module.  This would require someone with Python programming
experience.
:FIGURE:
#+CAPTION: Table of coefficients
#+LABEL: table:coefficients
:END:
|---------------------+--------+-----------+-------|
| input               | points | intercept | slope |
|---------------------+--------+-----------+-------|
| undergrad           |     15 |     287.5 |     4 |
| project             |     30 |         0 |    50 |
| local\_coordinator  |     15 |         3 |   0.1 |
| global\_coordinator |     15 |        12 |  0.05 |
|---------------------+--------+-----------+-------|

* Redesign phase (following user presentation)
  After developing a initial design the application was presented to
  the cluster leaders at a meeting.  They were given a preview of
  how they could interact with the application.


  The application tree view model prototype was not liked. It was
  discovered they liked the way that Microsoft Excell allowed one to
  edit the data about teaching allocations and paper coordination. 

  A major redesign was undertaken for how the cluster leaders can
  edit the teaching allocations and paper coordinations was
  undertaken.  Peviously the interface had been based upon a tree
  like stucture, with nodes showing the paper, which expand to show
  paper offerings and teaching allocations.  The cluster leaders, I
  think, did not like this, and seemed to like the way they were able
  to edit the relavent sections in the spreadsheet.  So the new
  interface gained some of the functionality of the spreadsheet. This
  is shown in figure \ref{fig:redesign:clusterview}. The old view is
  shown in figure \ref{fig:redesign:oldview}.
  
  :FIGURE:
  #+ATTR_LaTeX: width=\textwidth, placement=[H]
  #+CAPTION: Cluster leader paper edit view in spreadsheet style
  #+LABEL: fig:redesign:clusterview
  :END:
  [[./images/cluster_paper_edit_view.png]]
  
  :FIGURE:
  #+ATTR_LaTeX: width=\textwidth, placement=[H]
  #+CAPTION: The old way cluster leaders were to edit their papers
  #+LABEL: fig:redesign:oldview
  :END:
  [[./images/admin_offering_teach_edit_view.png]]
** Testing
   At every stage of development, testing took place.  There were no
   automated tests, even though they are possible, due to the developers
   inexperience in testing web applications.  However, at every stage,
   a checklist of features and operations were tested by hand.  A
   checkbox list of inputs and results were checked for pass or
   crossed for fail.

* Implementation
This log
in page is shown in figure \ref{fig:newlogin}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The new log in page
#+LABEL: fig:newlogin
:END:
[[./images/login_page.png]]

If logged in as administrator (or manager) you get this menu, as shown
in figure \ref{fig:adminmenu}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The new contents page for the administrator
#+LABEL: fig:adminmenu
:END:
[[./images/admin_index.png]]


The administrator still gets the paper edit page, but even that has
been modified.The original non prototype design was using javascript
to render almost everything.  This was a real bottleneck for page
loading speed.  Javascript, it seems is a little inefficient when it
comes to rendering components on mass into a web page.  This was
overcome by turning the paper list into a single expandable row as
shown in figure \ref{fig:adminpaperedit}.
:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The new expandable paper edit page for the administrator.
#+LABEL: fig:adminpaperedit
:END:
[[./images/admin_paper_edit_view.png]]


Administration roles, shown in figure \ref{fig:adminadminroles}, have the same look except that now there are ways
of adding both roles and instances.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration roles interface
#+LABEL: fig:adminadminroles
:END:
[[./images/admin_adminroles.png]]


You can add a administration role as shown in figure
\ref{fig:addadminrole}.  To get to this point there is a link at the
top of the administration roles page as highlighted by figure
\ref{fig:adminadminroles2}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration roles interface with add a role link circled
#+LABEL: fig:adminadminroles2
:END:
[[./images/admin_adminroles2.png]]

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration role addition interface
#+LABEL: fig:addadminrole
:END:
[[./images/add_admin_role.png]]

Not only can you add a role, but for every staff member you can add or
delete a instance of a role as shown in \ref{fig:adminadminroles3} and
the add a instance as shown in figure \ref{fig:addadmininstance}.  In
this instance you have three editing controls, the top one being a
drop down menu containing all the administration roles available for
this administration instance, the second one is the staff member in
question, and the last is just a test entry box for adding a
description to this instance.  The second control seems
a bit odd to be able to select a different staff member when the staff
member in question is already known.  This still needs work, but it
does do the job it was created for.  Delete has the immediate effect
of removing the instance in question from the database.  These changes
are all immediately shown in the displayed page.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Administration roles interface with add and delete a staff instance links circled
#+LABEL: fig:adminadminroles3
:END:
[[./images/admin_adminroles3.png]]

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The add a administration instance interface
#+LABEL: fig:addadmininstance
:END:
[[./images/add_admin_instance.png]]


The postgraduate page shows the staff members along with their
supervised postgraduate students.  If they have none then it will say
so.  Postgraduate supervision, is the one place where no editing of
data takes place in this application.  The postgraduate supervision
data is sourced from the Postgraduate database, which is managed by a
external source.  However the data is still stored locally on the
Workload database, to save time in downloading the data from the
Postgraduate database.  The page is shown in figure
\ref{fig:postgradpage}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The add a administration instance interface
#+LABEL: fig:postgradpage
:END:
[[./images/add_admin_instance.png]]

The programme list hasn't much changed except, now there is the extra
campus menu.  You can add or delete the programs through a couple of
links at the top circled in figure \ref{fig:programlist} with the add
a programme shown in figure \ref{fig:addprogram}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The programme list page with the add and delete links circled.
#+LABEL: fig:programlist
:END:
[[./images/admin_programme_list.png]]

Figure \ref{fig:addprogram} shows the page for adding a programme to
the list.  This is the combination of degree and major.  Some degrees
do not have majors, so the major part can be left blank.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The programme addition page
#+LABEL: fig:addprogram
:END:
[[./images/admin_add_programme.png]]

Figure \ref{fig:adddegree} shows the degree add page which asks you
for a short name of the degree and the full name for the records.  The
short name is the part that will show up in any drop down menus for
this degree.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add a degree page which makes it available to add to a programme of study
#+LABEL: fig:adddegree
:END:
[[./images/admin_add_degree.png]]

Figure \ref{fig:progmajor2} show the add major page, which is
similar to add a degree, except this is for a major.


With all these dialogs for creating a new programme of study, there are
buttons at the bottom for in the form of Add and Cancel.  If Add is
clicked then the choice is entered into the database and the browser
goes to the previous page, with the new choice now being available for
selection.  If Cancel is clicked then the previous page is loaded,
without any new additions to the database.

Looking at figure \ref{fig:clusterview2}, the cluster leaders
cluster view you will see that there is a couple of entries that are
in red.  These are the offerings which have Teaching Allocations which
do not add up to one hundred.  This gives the user a visual warning
that the teaching allocations for that offering need adjusting.  This
brings up the awkward situation of how does the application handle
situations where the allocations are a third.  If added together this
will not add up to one hundred.  After a little thought, it was
decided to round the totals.  This has the effect of if the total is
99.9 then the rounding will bring them up to one hundred.  This allows
allocations to be of odd values like a third.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add a Major page which make sit available to add to a programme of study
#+LABEL: fig:progmajor2
:END:
[[./images/admin_add_major.png]]

In figure \ref{fig:clusterview2} the "Revert to last save" and "Commit
Changes" button are circled.  The "Revert to last save" button will
revert the cluster paper data to what it is in the Paper, PaperExist
and TeachingAllocation entities in the database.  New copies will be
created of these and will replace any changes that have been made with
the previous values.  A dialog will prompt you to confirm this action,
in case this was done by mistake.  The "Commit Changes" button, will
copy the changes to the entities these copies are of, unless the
PaperExist has staff members from more than one cluster.  These will
be kept around for the administrator to check and either approve or
reject.  The administrators interface to this is displayed in figure
\ref{fig:adminclusterview2}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Cluster leader paper edit view
#+LABEL: fig:clusterview2
:END:
[[./images/cluster_paper_edit_view2.png]]


:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The administrator cluster paper view
#+LABEL: fig:adminclusterview2
:END:
[[./images/admin_cluster_view.png]]



Circled in red, in figure \ref{fig:adminclusterview3a}, are two area,
one being the "Accept all" button, the second is the green tick and
red cross in the first row.  These ticks and crosses appear on  each
row.  They have click events associated with them, the tick is the
accept that offering event, and the cross is reject this offering
event.  One of the criteria for this application was that there be a
button to accept all the entries, so the administrator does not have
to go through every offering individually.  This is where the "Accept
all" comes in.  When this is clicked, all the entries are assumed to
be correct, so the lot is copied over to the originals.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Administrator cluster view with accept, delete and accept all circled
#+LABEL: fig:adminclusterview3a
:END:
[[./images/admin_cluster_view2.png]]


When clicking the "Accept all" button, which offering do you use.  It
really does not matter if the assumption is that they are all
correct.  The easiest solution is to just use the first entry for
every possible cluster offering solution.






The accept or reject options for each cluster offering, shown in figure
\ref{fig:adminclusterview3a}, provides a couple of problems.  The first
is if a offering which has entries for several clusters.  If you click
accept on one of them, what happens to the rest?  The solution chosen
was to assume that the administrator, when clicking on the particular
offering, does not want any of the other possible solutions.  In this
case, the remaining are deleted and only the one accepted is copied
over the original entity. The second is if a offering is rejected,
again what happens to the rest.  The problem is there maybe errors, as
in teaching allocations do not add up to 100.  The other is the
offerings could give conflicting values.  The other situation is if
none of the cluster offerings from the various clusters involved in
that offering, are correct.  The scenario could be a combination of
these situations.  The decision as to what happens here has not been
resolved yet, but there is two solutions that have been thought of.
The first is if one is rejected, they are all rejected, the second is
just that cluster offering is rejected.  The only problem with either
of these solutions, is how do you let the cluster leaders know what is
going on as they will see their possible conflicting entry in the
cluster leader paper view list whether it has been rejected or not.
When committed, all the solutions that only involve that cluster get
copied over the original, the offerings that involve more than one
cluster stay in the list.  One solution is to assume that
communication is done outside the application, like email.  There are
various other ways of indicating this rejection, The cluster leader
still needs to know to look, so communication needs to take place
outside the application, but the offending offering could be coloured
to indicate this rejection, or a pop up could be used to alert the
cluster leader when the page is loaded.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The configure site contents page
#+LABEL: fig:config
:END:
[[./images/admin_config_view.png]]

Now the configure site menu item, when clicked takes you to another
contents page.  This is a list of the various items that can be
configured.  This is shown in figure \ref{fig:config}.

The paper edit list has been shifted to this menu, shown in figure
\ref{fig:seat-paper-list}.  The interface has been changed to only
list the paper meta data, like paper code, title, points and global
coordinator.  To edit the paper offerings you click on the circled
expand arrow.  To delete it and all its offerings, click the delete
option also circled.  To add a new paper click the circled top right link.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The paper edit page
#+LABEL: fig:seat-paper-list
:END:
[[./images/SEAT_paper_list.png]]


If the expand button is clicked the row will expand to show all
offerings along with their teaching allocations that are associated
with this paper.  This is shown in figure
\ref{fig:seat-paper-list-expand}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The paper edit page, with the expand button having been clicked.
#+LABEL: fig:seat-paper-list-expand
:END:
[[./images/SEAT_paper_list_expand.png]]


All the same editing events happen as was explained in the prototype,
except you now have to click the elements to edit them as hover was
causing to many layout problems as the mouse moved over them.  The
problem being that when the element gets changed to a editable
element, it changes the layout of the page, and also when the hover
out event happens, it connects to the server to update the field, even
if nothing has changed.  That was not desirable, so instead, if a edit
is wanted then you have to click it.  The ability of the element to be
edited, is hinted at by the change in colour of the text.  This is
immediately obvious to someone who has never used the system before,
but there are only so many things you can do to alert people of these
options over a web application.


The next item in the configuration menu, figure \ref{fig:config} is
"Add Staff".  When clicked this leads to a page with a form in it,
shown in figure \ref{fig:addstaff}.  The form allows for the entry of
the first and last names.  The initials, which are usually three
letters, and must be unique to the individual, as this is one of the
methods of identifying the staff member.  What cluster they belong to
and what campus they are based at.  A Full Time Equivalent (FTE)
number from 0 to 1.0 to represent how full time this staff member is.
Also what class they are in, which indicates if they are a reasearcher
of just a plain teacher.  All these fields are needed and if one is
left out then the following will be displayed, shown in figure
\ref{fig:addstaff-missing} on a commit attempt. 

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add staff page.
#+LABEL: fig:addstaff
:END:
[[./images/new_staff.png]]

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Add staff page which has be commited without filling the required entries
#+LABEL: fig:addstaff-missing
:END:
[[./images/new_staff-missing.png]]


The next link in the configuration page (figure \ref{fig:config}) is
the Designate cluster leader page.  The reason for this page, is to
allow the administrator to designate who is a cluster leader.  They do
that by clicking the tick box.  This also has the fuction of showing
who is and who is not a cluster leader.  The cluster this person is a
leader of, if the check box is checked, is the cluster they belong
to.  If necessary, the list can be filtered down by the use of the
drop down menu at the top of the page.  This only filters by cluster,
which has been decided is enough.  More filters could be added, but
they would not really add anymore to the already available filter by
cluster option. This is shown in figure \ref{fig:designateleader}.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Cluster leader designation page
#+LABEL: fig:designateleader
:END:
[[./images/cluster_leader_management.png]]

The next in our list of configure links is "Upload data".  This page
when loaded, as seen in figure \ref{fig:datasetup}, is a form with
several fields, enabling comma separate value (csv) files to be
uploaded.  The data in these files is used to populate the database
with data, which can be used to calculate the staff workloads, and it
even includes the staff to be allocated workload hours to.  This page
is meant for the initial setup of the application and is still a work
in progress.  The biggest initial problem you face is how do you get
information into the database, this is meant to be a stopgap measure
until a better method can be thought of.  The files that I have used
so far have been extracted from the Workload spreadsheet, and turned
into a csv file.  The problem with this is that the some of the data
extracted fails referential integrity.  For the moment it will do, and
any missing data can be added manually.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Data upload page
#+LABEL: fig:datasetup
:END:
[[./images/data_setup.png]]


The next item is "Archive site".  One of the requirements was to be
able to archive a years data so that in future it may be compared with
the current, and also be used as a backup.  I chose to create a
archive file for each entity needed, and save it in json format.  The
reason for choosing this format is that the application is being run
on a Django framework, and Django has a simple means of populating the
tables using any file in json format.  This is a builtin method, that
can be invoked by just placing the files in the required place and
running a script that comes with every Django application.  In figure
\ref{fig:archive} is a list of the files created by this function.
You will note that every one of the files names, before the extension,
ends with the date.  This is so that it becomes a real historical
archive, allowing for the years workload data from several archives
ago, which could be years, loaded into the database.  The other
advantage to using json is that it can potentially be used in
javascript, allowing for none workload applications to use this data
for whatever reason they decide.

:FIGURE:
#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
#+BEGIN_EXAMPLE
:END:
auth_user-2011.2.22.json           db_paper-2011.2.22.json
db_admininstance-2011.2.22.json    db_paperexist-2011.2.22.json
db_adminrole-2011.2.22.json        db_postgrad-2011.2.22.json
db_campus-2011.2.22.json           db_postgraddegree-2011.2.22.json
db_cluster-2011.2.22.json          db_postgradsupervision-2011.2.22.json
db_coefficients-2011.2.22.json     db_projectpapersupervision-2011.2.22.json
db_degree-2011.2.22.json           db_staff-2011.2.22.json
db_degreemajor-2011.2.22.json      db_staffuser-2011.2.22.json
db_degreepaperlist-2011.2.22.json  db_stdpoints-2011.2.22.json
db_enrolled-2011.2.22.json         db_teachingallocation-2011.2.22.json
db_major-2011.2.22.json
:FIGURE:
#+END_EXAMPLE
#+LaTeX: \caption{\label{fig:archive} A list of files created by the archive function}
#+LaTeX: \end{figure}
:END:

Then there is the "Synchronise Postgraduate Data" item.  This when
clicks connects with the Postgraduate database and update the local
Postgrad,  PostgradSupervision and PostgradMajor tables.  The
application could connect every time a calculation is needed, but it
is felt that doing this involves extra overhead, and not only that the
entities have already been set up.


"Change Password" is the last item in the list.  This allows the
Administrator to change the password for their log in.  Figure
\ref{fig:password} shows the page that is loaded for this.  This page
is one of the built in Django pages for changing passwords.  It was
easier using this than setting up one ourselves.  The problem with
this is the layout and navigation technique is slightly different, as
they use breadcrumbs, the rest of the site does not.

:FIGURE:
#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: Change Password page
#+LABEL: fig:password
:END:
[[./images/password_change.png]]


If a normal staff member, logs in they get a report on their
individual workload hours.  This is broken down into the components
that make up the workload hours.  This is shown in figure
\ref{fig:staffreport}.  They are broken into the hours gained from
coordinating and teaching papers, with a total of the hours gained
from the papers the staff member is involved in.  The hours for
supervising postgraduates, including the postgraduates details and is
and how many hours they get for each student and a total for all
postgraduates supervised.  Last of all the hours gained from
administration jobs is given, with a breakdown of what the jobs are a
description, if one is given, and the hours gained for this role.  The
total for all the administration roles is given at the end.  At the
very bottom is the total workload hours for the staff member.  The aim
of this page, is to allow the staff member to check to see if their
details and hours are correct.  They ca change some of their personal
details by clicking on the element and typing in the changes in the
text b field that appears, and when they move the mouse out of the
filed, it reverts back to what it was, a <span> element, and update
their details on the database through a ajax connection. First and
last name, their cluster and the campus they are attached to can be
edited on this page.  This page is viewable by others, and if you are
a administrator or cluster leader, you can also edit their FTE and class.
This is a feature that was not available in the old spreadsheet
system.  There is also a link to the page to view other staff members
workload hours, which is the same view shown in figure
\ref{fig:staffreport}

:FIGURE:
#+CAPTION: The staff report page
#+LABEL: fig:staffreport
#+attr_latex: width=30em,placement=[H]
:END:
[[./images/staff_workload_report.png]]
** Database
   Most of what the application needs to do is handled by Django through
   its Model interface.  Some of the operations however are not covered by
   Django, since Django can not handle more that one data source at
   once.

   The main database engine used shall be MySQL.  Django supports this
   so no third party libraries to make MySQL available through Django
   are needed.  The other database that has to be read from is the
   postgraduate database.  The Postgraduate database is a Microsoft
   Access database file.  Getting the data from this database was
   going to be a challenge.

   The first option has been chosen, due to being the only reliable
   available method.  The last two options require more privileges
   than are available to this project.

* Learning outcomes
  (What I learned and what I would do differently)
** Responsiveness
There are two places to process the data and one place to display the
results. You can use client side scripts, like javascript to process
the data, and it can be processed on the server side.  The more data
that is processed on the server side the less people that it can
handle at once.  Also doing it all on the server side means the pages
have to be reloaded every time a new choice is made.  The client side
processing of data, takes some of the load off the server, but it has
the downside, of relying on the clients browser to have the
functionality required, like javascript, which could be of a different
version to the one that the site was developed for.  Also javascript
seems to be a lot slower to process data than the server side scripts
are.

Do mass processing of data on the server side.  Only use javascript to
process or retrieve small amounts of data.

The efficiency of algorithms will have more impact on the
loading time of dynamic pages than the choice of languages.  The
loading time of a page was reduced by following the following rules,
based upon "Python Patterns - An Optimization Anecdote"
\cite{optimising1}.

:FIGURE:
#+begin_quote 
:END:
    + Rule number one: only optimize when there is a proven speed bottleneck. Only optimize the innermost loop. (This rule is independent of Python, but it doesn't hurt repeating it, since it can save a lot of work. :-)
    + Small is beautiful. Given Python's hefty charges for bytecode instructions and variable look-up, it rarely pays off to add extra tests to save a little bit of work.
    + Use intrinsic operations. An implied loop in map() is faster than an explicit for loop; a while loop with an explicit loop counter is even slower.
    + Avoid calling functions written in Python in your inner loop. This includes lambdas. In-lining the inner loop can save a lot of time.
    + Local variables are faster than globals; if you use a global constant in a loop, copy it to a local variable before the loop. And in Python, function names (global or built-in) are also global constants!
    + Try to use map(), filter() or reduce() to replace an explicit for loop, but only if you can use a built-in function: map with a built-in function beats for loop, but a for loop with in-line code beats map with a lambda function!
    + Check your algorithms for quadratic behavior. But notice that a more complex algorithm only pays off for large N - for small N, the complexity doesn't pay off. In our case, 256 turned out to be small enough that the simpler version was still a tad faster. Your mileage may vary - this is worth investigating.
    + And last but not least: collect data. Python's excellent profile
      module can quickly show the bottleneck in your code. if you're
      considering different versions of an algorithm, test it in a
      tight loop using the time.clock() function. 
:FIGURE:
#+end_quote
:END:

There is still the possibility of using C compiled code to speed up
the response time, as python being a interpreted language, does run
slower than C.  That would be the next step in optimising the response
time of the application.

** Javascript compatability
Javascript is implemented differently across different browsers.
jQuery helped overcome most of the issues, but there were rules that
need to be adhered to make sure your code works in most major
browsers.
  1) Always use var to declare variables
  2) Avoid the use of a few keywords, like delete
  3) If creating a array list, do not put a comma after the last element

The first and the third rules are for Internet Explorer, but the
second is true particularly for any browser based on Webkit, like
Safari.

Using jQuery from the start avoided most of the other possible
incompatabilities, to the extent that no other issues other than the
ones previously mentioned were encountered.


This application relies on javascript, so if it is turned off then
hardly anything will work.  Currently nothing is done in response to
this situation. In future, a warning message, telling the user this,
produced on the server side, would be shown.  Other than this there is
nothing that can be done, if the browser has javascript turned off.

** CSS
Not much can be done if a browser can't implement CSS, but you can
make sure that the CSS used adheres to a certain standard.  The
decision to make sure that CSS was compatible with version 2.0 was
about the extent that the compatibility issues were addressed.
Further work could eb done to detect which version of CSS the browser
implements, and look at what can be done to overcome any display
issues created if it does implement the CSS version that has been
used.  If this was to be done again, then a message warning of this
problem would be shown, and a possible solution displayed, like
upgrade your browser, or install another browser.

** Cocurrency / Multiple views
Most of the concurrency issues have been avoided.  The only possible
issue that could cause real problems, is if two cluster leaders from
the same cluster logged in and started editing the papers.  Most of
the time this curcumstance would not happen, but it could.  A possible
solution is to either implement concurrency solutions like locks, or
if there are two cluster leaders of the same cluster, logged on, to
logg both of them off with a warning message.

** Look and feel of pages
Getting pages to look the same across browsers is very difficult
when using the HTML markup, even with the aid of CSS and javascript.
The best you can do is make sure the components appear in the same
place, using simalar colours.  The shape of the form controls are out
of your hand and in most browsers can not be manipulated very easily
with CSS.  Firefox for example, uses native controls like checkboxes,
and does not allow CSS to alter the look of this control.  There are
methods, which can be used to make it look the way you want it.  These
hacks are not desirable, as they add another unstable element into the
page display.  One way that was found to control the look of controls
was not to use them, but to display images, and add javascript events
to them.

:FIGURE:
\bibliographystyle{plain}
\bibliography{bibliography}




# LocalWords:  customise centring
:END:
