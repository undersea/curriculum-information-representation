#+BIND: org-export-latex-title-command "\\maketitle"

#+TITLE:     Meaningful Data Representation Report
#+AUTHOR:    James Hurford
#+EMAIL:     terrasea@gmail.com
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:5 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+source: jim()
#+begin_src emacs-lisp :results output silent :exports results
  (add-to-list 'org-export-latex-classes
          '("file-class"
             "\\documentclass{scrartcl}
             \\makeatletter
               \\def\\maketitle{%
                  \\null
                 \\thispagestyle{empty}%
                 \\vfill
                 \\begin{center}\\leavevmode
                   \\normalfont
                   {\\LARGE \\@title\\par}%
                   \\vskip 1cm
                   {\\Large by \\@author\\par}%
                   \\vskip 1cm
                   {\\small Supervisor: \\@supervisor\\par}%
                   \\vskip 1cm
                   {\\Large \\@date\\par}%
                   
                 \\end{center}%
                 \\vfill
                 \\null
               \\cleardoublepage
               }
               \\def\\supervisor\#1{\\def\\@supervisor{\#1}}
             \\makeatother"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
             ))
  
#+end_src



#+LaTeX_CLASS: file-class

#+STARTUP: hidestars

#+DRAWERS: HIDDEN

#+LaTeX_CLASS_OPTIONS: [a4paper, 12pt]
#+LaTeX_HEADER: \setlength{\parindent}{0cm}
#+LaTeX_HEADER: \setlength{\parskip}{0.5cm}
#+LaTeX_HEADER: \supervisor{Stephen Marsland}


#+BEGIN_abstract
\begin{abstract}
This project asks the question, can you split up data in a meaningful
way, to different groups of people?  It will achieve this aim by using
several different techniques.  These involve human computer
interaction (HCI), processing of data, and web based authentication.

A web based application for managing academic staff workloads will be
developed, which will demonstrate this is possible.  It will collect
data together and display data according to which group of people you
belong to.  It demonstrates the display of data, restriction of write
and read access relevant to that group.
\end{abstract}
#+END_abstract


* Introduction
  It is common for different users to have different needs for
  accessing, updating, and viewing the same data set (or combination
  of data sets).  In this project I considered how to implement
  software for a workload presentation system.  The challenge was to
  ensure that each user saw the data in a way appropriate to them, and
  had the access rights to interact with the data set as required.

  A tool to manage staff teaching allocations will be developed.  How
  much they are doing will be shown.  This helps decide if they are doing to much or to
  little teaching.

  A programme planner will be proposed using constraints satisfaction
  to help choose papers for a students programme of study towards a
  degree. 

* Workload Project
** Introduction
   Currently a spreadsheet application, shown in figure
   \ref{fig:spreadsheet}, has been used to disseminate 
   the data across different groups.  This approach does not
   scale well. The means of gathering this information is painfully
   slow and time consuming. The spreadsheet application is also
   complicated and hard to use.

   #+ATTR_LATEX: width=\textwidth,placement=[H]
   #+CAPTION: The current spreadsheet application
   #+LABEL: fig:spreadsheet
   [[./images/spreadsheet.png]]

   This project attempts to develop a web served, database
   backed application. Dissemination of the information according to which
   group a user belongs to is attempted.  The proposed application tries to overcome the problem of
   gathering the data by using a central database which everyone enters
   information into from various places around SEAT, using a web
   interface.  It also tries and reduce the amount of data entered by
   using other already existing sources of information.

   
   



** The Problem
   Workload is a measure of how many virtual hours each staff member is
   going to be doing for the coming year. The purpose of Workload is to
   spread the workload as fairly among the staff.  It is a artificial
   measurement, using a formula to determine a individuals hour based on
   a set of predetermined metrics.

   The task is to create a application to take in:

 - For each paper offered

   + For each person teaching this paper how much of the paper they
     are teaching.
   + who the global coordinator is
   + who the local coordinator is

 - The Admin roles for each of the members of staff and how much
   the admin roles are worth in Workload hours.
 - For each staff
   + Which postgraduate they are supervising
     + how much supervision in percentage terms they are giving
     + Given that each postgraduate degree is worth different hours
       + What percentage of supervision they give and thus how many of
         those hours do they get.
 - The application must be configurable
   + This could be done by a expert, so it doesn't have to be addressed
     in the user interface, it could be simply a config file.

Can this be done, using a single point of access for all, but serve
many at the same time?




** Calculating Workload hours
How workload hours had to be the first priority in developing this
application.  The way that was chosen to tackle this was to go and see
one of the people involved in designing this formula.  The impression
was that the spreadsheet was designed by a committee. Dr Huub Bakker
was visited and some direction from him about the workload process was
gained.  A couple of documents were provided by Mrs Glenda Kirk, one
being the actual spreadsheet \cite{stdhours2} that this application is replacing and
the other is a document \cite{stdhours1} describing the workload formula and a few note
on how it is applied.  The process that was used to figure out how the
workload process works, could almost be called reverse engineering.
The document was sparse in describing the way the process worked and
the spreadsheet was a highly complex document, which was almost
impossible to follow.

*** The standard hours formula
The problem was described as each staff member has various jobs and
responsibilities.  For each of these jobs and responsibilities they
get awarded Workload hours, based upon a formula.  The way in which
Workload hours are assigned was described in a word document called
"Standard Hours Formula" \cite{stdhours1}.  This gave a formula
for calculating standard hours for a paper shown in figure
\ref{fig:formula}.  A table was also provided which gave the
coefficients for each teaching input shown in table \ref{table:coefficients}.

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
Standard Hours = Intercept*paper points/12.5  
                 + (Slope*no. of students)
                 - (144/no. of students)  
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:formula} The standard hours formula used to
calculate a standard hour component}
\end{figure}
#+END_LATEX


#+ATTR_LaTeX: placement=[H]
#+CAPTION: Coefficients table
#+LABEL: table:coefficients
|---------------------+--------+-----------+-------|
| Input               | Points | Intercept | Slope |
|---------------------+--------+-----------+-------|
| Undergraduate paper |   12.5 |     287.5 |     4 |
| Project paper       |     25 |         0 |    50 |
| Honours project     |     25 |         0 |    50 |
| DipApplSc           |     25 |         0 |    50 |
| Dip/Mast (1st Sup)  |     50 |         0 |    75 |
| Dip/Mast (2nd Sup)  |     50 |         0 |    25 |
| PhD (1st Sup)       |    100 |         0 |   100 |
| PhD (2nd Sup)       |    100 |         0 |    50 |
|---------------------+--------+-----------+-------|




There is also the spreadsheet used called "Std\_hrs\_2010\_14.xlsx" \cite{stdhours2}.
This gave a example of what numbers should be produced for each of the
papers given the number of enrolled.  The formula used in the
spreadsheet application was to complex to use except as a way of checking the answers when applying
the formula to a given paper, or any of the other components that are
used to create the total Workload hours for each member of staff. 

When the formula in figure \ref{fig:formula} using the coefficients
found in table \ref{table:coefficients} was applied to a undergraduate
paper using the number of students enrolled that year and the paper
points from that paper, the answer did not agree with the answer seen
in the spreadsheet.  After a while it was realised that the reason
they were not agreeing was that the formula in figure
\ref{fig:formula} is out of date.  When this document "Standard Hours
Formula (Amended January 2006)" was written in 2006, papers were worth
12.5 points each.  It is surmised that the intercept is how much a
single semester paper is worth in points.  A paper worth 25 points
should take twice as long to teach thus the  "paper points/12.5" part
of the formula would calculate to two and so the intercept would then
be multiplied by two. Thus representing the intercept of a 25 point
paper.  If you applied this formula using the points value of a paper
these days, which most are 15 points, then this formula will give you
entirely wrong answers with both the formula and coefficients given in
the document provided.  What was worked out is that the value 12.5 in
this formula is actually 15, and the table is also wrong with the
values of 25 actually being 30.  The adjusted formula is given in
figure \ref{fig:formula2} and the adjusted coefficients are given in
table \ref{table:coefficients2}. This now gave the same answer as the ones given in the spreadsheet for
2010 workload hours, for undergraduate papers.

#+begin_html 
<div id="fig:formula2" class="figure">
#+end_html
#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
Standard Hours = Intercept*paper points/15
                 + (Slope*no. of students)
                 - (144/no. of students) 

#+end_example

#+BEGIN_LATEX
\caption{\label{fig:formula2} The corrected standard hours formula used to
calculate a standard hour component}
\end{figure}
#+END_LATEX
#+begin_html 
</div>
#+end_html





#+ATTR_LaTeX: placement=[H]
#+CAPTION: Corrected Coefficients table
#+LABEL: table:coefficients2
|---------------------+--------+-----------+-------|
| Input               | Points | Intercept | Slope |
|---------------------+--------+-----------+-------|
| Undergraduate paper |     15 |     287.5 |     4 |
| Project paper       |     30 |         0 |    50 |
| Honours project     |     30 |         0 |    50 |
| DipApplSc           |     30 |         0 |    50 |
| Dip/Mast (1st Sup)  |     50 |         0 |    75 |
| Dip/Mast (2nd Sup)  |     50 |         0 |    25 |
| PhD (1st Sup)       |    100 |         0 |   100 |
| PhD (2nd Sup)       |    100 |         0 |    50 |
|---------------------+--------+-----------+-------|


*** Teaching allocation hours
The standard hours formula calculates how many hours a paper is worth
for that given year with the students enrolled in it that year.  Each
staff member who teaches this paper gets a share of these standard
hours that were calculate.  It is determined how much of the paper
they teach in percentage terms, and this percentage is the percentage
of the total standard hours this paper provides for that year.  an
example is provided in figure \ref{fig:example1}.

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example
no. of students = 10
paper points = 15
Intercept = 287.5
Slope = 4

standard hours = 287.5*15/15
                 + (4*10)
                 - (144/10)
               = 313.1

staff1 teach allocation = 60%
staff2 teach allocation = 40%

staff1 gets 313.1*(60/100) = 187.86 standard hours
staff2 gets 313.1*(40/100) = 125.24 standard hours
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:example1} An example of how the standard hours are
used to calculate a staff members teaching hours}
\end{figure}
#+END_LATEX



*** Coordinator hours

For each paper it is recognised as having two coordinators.  The
global coordinator and the local coordinator.  The global coordinator
"overseas paper direction, paper content, cross campus equivalence
etc" \cite{stdhours1}.  The local coordinator "coordinates the paper
on an individual campus" \cite{stdhours1}.  The coordination of this
paper has a intercept of 15 and a slope of 0.15.  These are split
between the local and global coordinator.  This is shown in table
\ref{table:coord}.


#+ATTR_LaTeX: placement=[H]
#+CAPTION: Table showing the intercept and slope used for local and global coordinators
#+LABEL: table:coord
|-----------+-------------+-------------+-------|
|           | Global      | Local       |       |
|           | Coordinator | Coordinator | Total |
|-----------+-------------+-------------+-------|
| Intercept | 12          | 3           | 15    |
| Slope     | 0.05        | 0.1         | 0.15  |
|-----------+-------------+-------------+-------|


The standard hours formula, in figure \ref{fig:formula2}, was at first assumed to apply to all
aspects of workload hours including coordinator hours. When
coordinator hours were calculated using the formula in figure
\ref{fig:formula2} it came up with a answer which did not agree with the
example that was being looked at, at the time. In the notes given in
the "Standard Hours Formula" \cite{stdhours1}, it 
mentions the "small class" correction factor, which is 144 divided by
the number of students.  It does not mention also that for calculating
coordinator hours it was not included as part of the formula.  The way
this was discovered was a pure accident born of frustration.  It was
decided to see what the result would be if parts of the standard hours
formula were removed.  When this 144/no. of students was removed it
came up with the correct answer. This was repeated a few times to make
sure the assumption made is correct. The new formula is given in figure
\ref{fig:formula3}.

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
#+begin_example 
coordinator standard hours = Intercept*paper points/15
                             + (Slope*no. of students)
#+end_example
#+BEGIN_LATEX
\caption{\label{fig:formula3} The corrected standard hours formula
used to calculate coordinator standard hours}
\end{figure}
#+END_LATEX


*** Other modifiers used to calculate standard hours
- *Off campus modifier:*
    A loading modifier of 1.25 is applied to the intercept for papers
    delivered by staff whose home campus is located elsewhere.
- *Same teaching material:*
    If the material taught in two papers is the same then the intercept is
    only included once.
- *Duplicate Teaching:*
    If a staff is teaching similar material in two papers, the the
    intercept is applied only once for both and a modifier of 1.5 is
    applied to this intercept.

These modifiers add a small level of complication.  How do
you know if the material is the same or similar across two papers?
What is the difference between same teaching and duplicate material?

The answer to the first question is, it can't be answered by a
software solution, but a solution is to let the user of the
application decide.  There is a solution to how the application can be
made to take this into account.  Provided in the spreadsheet, is a
intercept field.  This is a modifier which is applied to the equation,
and is a number from zero to one.
*** Project papers
Project papers have how many workload hours they are worth calculated
just like a normal undergraduate paper, like the formula in figure
\ref{fig:formula2}.  The difference is that the staff involved
supervise a set number of students, instead of teaching a percentage
of the paper, and thus get the hours that the portion of the total
enrolled students is worth.  The intercept for undergraduate project
papers is 40 and it has a slope of 0.  Thus if there are 10 enrolled
students, and the staff member was supervising 1 of them then the
hours they would get 2.56 workload hours.  Assuming that this is a
paper of 15 points in value. 

\begin{equation}
40*15/15+(0*10)-(144/10) = 25.6
25.6*(1/10) = 2.56
\end{equation}

Postgraduate project papers are also calculated given the formula from
figure \ref{fig:formula2}.  Their points value, intercept and slope
are given in table \ref{table:coefficients2}.

*** Postgraduate supervision
Staff members maybe supervising postgraduate students.  This
supervision is worth workload hours, but how many the staff member
gets depends on what postgraduate degree the postgraduate is doing and
how much supervision this staff member is giving the postgraduate
student. No where in the "Standard Hours Formula" \cite{stdhours1},
does it explain how this is done, but fortunately the people who
actually use the spreadsheet do.  They explained that the number of
hours for each postgraduate degree is different and that these hours
are divided among the supervising staff according to how much they are
supervising this postgraduate student.

The spreadsheet implementation uses a set of cells that contain the
workload hours that each degree is worth.  The extracted table, shown
in table \ref{table:pghours}, has one column with the shortened degree
name and next to that degree in the next column is the total hours.


#+ATTR_LaTeX: placement=[H]
#+CAPTION: The extracted postgraduate workload hours
#+LABEL: table:pghours
|---------------+-----|
| ApplSc(Hons)  |  50 |
| DipApplSc     |  50 |
| PGDipTech     | 100 |
| PGDipApplSc   | 100 |
| PGDipEng      | 100 |
| DipTech       | 100 |
| DipMIO        | 100 |
| GradDip       | 100 |
| GDipTech      | 100 |
| GCertScTech   |   0 |
| Exchange      |   0 |
| MApplSc       | 100 |
| MInfSc        | 100 |
| MPhil         | 100 |
| MSc           | 100 |
| MDairySc&Tech | 100 |
| MTech         | 100 |
| ME            | 100 |
| PGDip         |  50 |
| PhD           | 150 |
|---------------+-----|

#+BEGIN_LATEX
\begin{figure}[H]
\centering
#+END_LATEX
A staff member has a postgraduate student doing a MSc. 
The staff member does 50% of the supervision for this student.  MSc is worth 100
workload hours.  50% of 100 is 50 so the staff member gets awarded 50
workload hours for supervising this student.  The other staff member
also provides 50% of the supervision for this student and gets awarded
the other 50% of the workload hours available for supervising this
student which is also 50 workload hours.
#+BEGIN_LATEX
\caption{\label{fig:pgequation}A example of how the postgraduate hours
are divided between two supervisors}
\end{figure}
#+END_LATEX
*** Administration roles
Administration roles held by staff are also worth some workload
hours.  Each role is worth a set number of hours and could include
things like being a member of IEEE.

Every staff member gets a administration allowance of 90 workload
hours.

The document "Standard Hours Formula" \cite{stdhours1} states various
categories of administration roles, but it comes down to a role
description which has a set number of hours associated with it.  The
spreadsheet \cite{stdhours2} handles it by having a look up table of the roles along
with their hours.  Table \ref{table:admin1} showing this has been extracted from the
spreadsheet \cite{stdhours2}.


#+ATTR_LaTeX: placement=[H]
#+CAPTION: Table from spreadsheet showing the workload hour values of a set of administration roles
#+LABEL: table:admin1
|-----------------------+--------------|
| Committee             |        Hours |
|-----------------------+--------------|
| A Class Cmttee        | Case by Case |
| Admin Allowance       |           90 |
| Assoc Head AL         |          169 |
| Assoc Head PN         |           84 |
| Assoc Head WN         |          169 |
| B Class Cmttee        |           40 |
| C Class Cmttee        |           20 |
| Cluster Leader        |          337 |
| Deputy Cluster Leader |          169 |
| HOS                   |         1113 |
| IEEE                  |          169 |
| International         |          169 |
| Major Leader          |          135 |
| Marketing Director    |          337 |
| PG Director           |          422 |
| Research Director     |          253 |
| Tech Services Manager |          337 |
| Undergrad Director    |          675 |
|-----------------------+--------------|
   
    
** Design perspectives
:HIDDEN:
--** Open source
   The aim was to develop on linux, using open source libraries as much
   as possible to do the job.  This put some big restrictions on the
   possible solutions, and in some cases left this project with only one
   choice.  The biggest challenge was dealing with Microsoft Access.
--** Web
   The application is to be a web served application.  The reason for
   this is to avoid the need to install it on every computer that
   needs access to this application, with the only requirement being
   that the computer has some sort of web browser installed.  This
   also avoids the need to develop several different versions for each
   operating system installed computers that are part of the SEAT
   network.
--** Javascript
   Javascript is the client programming language used to make the web
   pages more dynamic.
--*** Problems encountered
    Javascript posed problems in that each of the different web
    browsers have different implementations of the javascript engine.
    What may work with one browser may not work with another.  For
    example the following code will work in Firefox, but will not work
    in Internet Explorer.
    
    #+begin_src javascript
      tmp = 8;
      alert(tmp);
    #+end_src
    
    Internet Explorer expects any variable to be declared using the
    var keyword.  Any browser based upon Webkit such as Safari were
    the most strict when it comes to what they will accept.
  
    The development of javascript for this application had to undergo
    a few critical changes to make sure the code worked in all major
    browsers. The following rules had to be adopted.
    1) Always use var to declare variables
    2) Avoid the use of a few keywords, like delete
    3) If creating a array list, do not put a comma after the last element

    This list of rules does not cover every compatibility issue, but
    they were the major ones encountered.
--** jQuery
   jQuery \cite{jquery1} makes for a uniform javascript api across most of the major
   browsers, like IE and Firefox.  This simplifies the development of web
   applications and reduces the number of issues that come from having
   more than one brand of web browser accessing the site.

   #+begin_quote 
   jQuery is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development.
   #+end_quote
   jQuery \cite{jquery1}.

--** CSS
   CSS is to be used to customise the look and formatting of the
   documents displayed by the web browser.
--*** Problems encountered
    CSS is handled differently by different browsers.  Some of the CSS
    styles chosen, work perfectly in Firefox, but fail to work in
    Internet Explorer.  There is nothing that can be done about the
    incompatibilities, but one can either flag the problem as
    unimportant, like not centring, or not use it.  The policy chosen
    by this project is to make sure that the pages produced adhered to
    CSS version 2.0.  This standard is not supported by Internet
    Explorer 6, but later versions are assumed to adhere to this
    standard.
--** Python
   Python \cite{python1} is to be the programming language used on the
   server to rendered the HTML to the web browser. Python \cite{python1} is a high level scripting language with a large
   set of libraries available to it as part of the standard Python
   library.  It is needed by Django \cite{django1}. Python is easy to
   read, so easy to maintain.

   The application is to be developed in Python \cite{python1}, using
   the Django \cite{django1} framework.
--** Django
   "Django is a high-level Python Web framework that encourages rapid
   development and clean, pragmatic design." \cite{django1}

   "Django focuses on automating as much as possible and adhering to the
   DRY principle." \cite{django1}

   DRY stands for "Don't Repeat Yourself" \cite{DRY1}.

   Django uses a Model View Controller (MVC) \cite{mvc1} implementation, but
   prefers to use Model Template View (MTV) as a way of describing
   their framework.

   Django uses the MTV development pattern shown in figure \ref{fig:mtv}.
    - M is the model which is the data access layer.
    - T is the templates which is the presentation layer.
    - V is the views which is the business logic layer.

   This is important in realising how this application has been
   designed.  You get the database (models) with all the data needed, you
   have the views, which process the data, which is then taken by the
   templates which decide how this data is going to be displayed and
   what is going to be displayed.

#+attr_latex: width=20em,placement=[H]
#+CAPTION: The Django model
#+LABEL: fig:mtv
#+BEGIN_DITAA  mtv_django -r -S -E

 +----------+      +--------------+
 | {d}      |      | {d}          |
 | Template |------| Presentation |
 | cC02     |      | cC02         |
 +-----+----+      +-------+------+
       ^                   ^
       |                   |
   +---+--+        +-------+------+
   | {io} |        | {io}         |
   | View |--------| Business cBLU|
   | cBLU |        | Logic Layer  |
   +---+--+        +-------+------+
       ^                   ^
       |                   |
       |                   |
   +---+---+       +-------+------+
   | {s}   |       | {s}          |
   | Model |-------| Data Access  |
   | c888  |       | Layer c888   |
   +-------+       +--------------+

#+END_DITAA

   It has a few official databases that it can work with, those being
   MySQL, PostGRESQL, PostGRESQL psycopg2, SQLLite and Oracle.  Others
   are available, but these are unofficial.

   To talk in Django terms, Django consists of a project, which contains
   all the configuration information for setting up you site, over
   several files. Within this project is one or more, what Django refers
   to as, applications \cite{django1}.

   
   #+begin_quote
   
   Projects vs. apps

   What's the difference between a project and an app? An app is a Web
   application that does something -- e.g., a Weblog system, a database
   of public records or a simple poll app. A project is a collection of
   configuration and apps for a particular Web site. A project can
   contain multiple apps. An app can be in multiple projects.
   
   #+end_quote
   
   The basic way Django handles requests is shown diagramatically in
   figure \ref{fig:djprocess}.  A request for a URL is made.  Django
   looks up this URL pattern and maps this to a view, which then using a
   template, renders the html to the requesting browser.
   
   #+attr_latex: width=30em,placement=[H]
   #+CAPTION: The Django Process from URL Request to rendering to browser
   #+LABEL: fig:djprocess
   #+BEGIN_DITAA django-process -r -S -E
   
   +----------+        +------------+        +-----------+      +------------+
   | URL      |        |  URL       |        | Mapped    |      | Template   |
   | Request  +------->+  Pattern   +------->+ View      +----->+ Rendering  |
   |          |        |  Lookup    |        | Execution |      | To Browser |
   +----------+        +------------+        +-----------+      +------------+
   
   #+END_DITAA
   

   Django has a unique way of handling URLs.  Every application in a
   Django project has a file called 'urls.py'.  It defines a object
   called urlpatterns, which is a mapping of URL patterns, which are
   regular expressions and Python callback functions \cite{django1}.
   Part of the URL for that application is the name of the application.
   For example if a application is called 'frog', then all URLs with frog
   at the beginning of the URL string will be referencing the 'frog'
   application. Figure \ref{fig:urls} shows a brief example urls.py file
   contents. When a browser requests a page with the URL
   http://localhost/frog/prince/ it will be given the output of the
   project.frog.views shown in figure \ref{fig:djview} modules index function.


   -----

#+LaTeX: \begin{figure}[H]

#+begin_src python
from django.conf.urls.defaults import patterns

urlpatterns = patterns('',
    (r'^prince/$', 'project.frog.views.index'),
)

#+end_src

#+LaTeX: \caption{\label{fig:urls} An example content of a Django urls.py file}
#+LaTeX: \end{figure}

-----

The project.views.index function, in figure \ref{fig:djview}, then
takes this request and processes it, passing the results to a template
shown in figure \ref{fig:djtemplate}, which then renders the html to
the browser.



-----

#+LaTeX: \begin{figure}[H]

#+begin_src python
  
  from django.shortcuts import render_to_response
  from project.frog.models import Frog
  
  def index(request):
      #do some processing getting all records from the Frog model
      #with results stored in frog

      frogs = Frogs.objects.all()
  
      #render this to a template called index.html passing to it the
      #records from the Frog model as part of a dictionary (the second parameter)

      return render_to_response('index.html', {'frogs':frogs})
  
#+end_src

#+LaTeX: \caption{\label{fig:djview} The project.frog.views.index function}
#+LaTeX: \end{figure}

-----

The template, shown in figure \ref{fig:djtemplate} uses the dictionary to create a list of variables in this
case it is called 'frog' which is the records from the Frog model.
The records in this example are iterated through with each record
being outputed as the text of a html div tag.  As you can see anything
between {% %} is a Django template tag, which is processed by Djangos
template renderer.

-----

#+LaTeX: \begin{figure}[H]

#+begin_src html
  <html>
    <head>
      <title>Frogs</title>
    </head>
    <body>
      {% for frog in frogs %}
      <div>{% frog %}</div>
      {% endfor %}
    </body>
  </html>
#+end_src

#+LaTeX: \caption{\label{fig:djtemplate} The index.html template}
#+LaTeX: \end{figure}

-----

To get a full description of what is happening here see the Django
documentation \cite{django1}.

--** Database connectivity
   The application must have a way of storing and retrieving the data
   it needs to calculate Workload hours.  To achieve this relational databases
   are to be used.  All the information is to be stored on a local
   database with connections to others to retrieve specific information
   needed.

   There are two databases involved here, the local database which holds
   all information and the SEAT Postgraduate database.  The local
   database shall be a MySQL database, which Django has support for.
   The other database, which is used to update the postgraduate
   tables, is a Microsoft Access database.

   Since the application is being run on a GNU/Linux server a way to
   connect to the SEAT Postgraduate database has to found.  In the web
   forum unixODBC-support\cite{unixODBC} Martin J. Evans says there
   are three ways to get data from a MS Access database file from
   GNU/Linux.
    1) Share the folder containing the MS Access file and access it
       using MDBTools
    2) Create a link from a MS SQL Server to the MS Access file and use a
       MS SQL Server ODBC driver.
    3) Create a ODBC-ODBC bridge in which you install the ODBC service on
       the Windows machine, which uses a ODBC driver for MS Access, and
       use a ODBC driver on the Linux server which can talk to the remote
       server.

   The MDBTools option was choosen.  MDBTools has a ODBC driver
   library.  It was decided to use this in conjunction with a Python
   library called pyodbc \cite{pyodbc1}.  The options for what Python
   libraries to use for accessing ODBC were limited, and at the time
   of development pyodbc was the only one found that was open source
   and allowed a connection to a ODBC DSN source written entirely in
   Python.

   The pyodbc libary is written in C++. It adheres to the "Python Database
   API Specification v2.0" \cite{pydb2}.
--*** Problems encountered
--**** pyodbc
     The library pyodbc had problem.  In the environment that
     it was being run, it did not behave in the way, one assumes, that
     the author of the code thought.  This gave us results like, if the
     database entry was a integer of value 290 the returned result was
     3160370, or a double value of 40.0 being returned as
     6.9524415266644334e-310.


     The problem stemmed from the functions that get data from the
     results of the query and convert them into the appropriate data
     type for python.  The entire library depends on unix ODBC C
     library.  It uses various function calls which interact with unix ODBC,
     one of these fetches a single value from a row and transforms it
     into the appropriate data type.  Like if a field in a table is a
     Integer then the appropriate function transforms it into a Python
     Integer type.  To fetch the value at a particular position in the
     fetched row pyodbc uses the ODBC function SQLGetData(...).

     Its use of the function SQLGetData(...) is flawed, in
     that the results being returned for floating point values are
     incorrect.  SQLGetData(...) can in theory, retrieve the data and
     convert it into the equivalent data type specified by the database
     table column type.

     With some modifications to the code, it was possible to rely on
     the modified version of this library.  We found that getting the
     data as a string value gave us a accurate answer represented in a
     string format.  One could then convert this to the appropriate
     type with a Python convenience C function like for integers like
     PyLong_FromString(...).

     That was all that was needed to make pyodbc to produce the expected
     accurate results.
--**** MDBTools
     Using the MDBTools odbc driver has problems that with certain
     queries, it caused the application to throw a segmentation
     fault.  There is no more information than that, and it only
     happens when fetching data from a certain table, in this case it
     was the Staff table in the SEAT2008.mdb file.  On one computer it
     would work perfectly, but only if the query used excluded all
     those except for academic staff.  This was on a computer separate
     from the SEAT intranet.  When used on a different machine,
     connected to the SEAT intranet, it would segment fault, no matter
     what query was used, but it was the same table, so something
     about that table is causing MDBTools problems.  It was hoped
     there was a newer version of MDBTools that has resolved this
     problem, but it was found that MDBTools is no longer being
     actively developed, and has not been for two years at the time of
     writing this report.

     While it is possible to get a hold of the source, finding and
     fixing the bug, may be beyond the means available to the current
     developer. It may require knowledge of Microsoft Access which is
     not available to the developer of this application.

     Other tools were looked for, but only a Java library, called
     Jackcess \cite{jackess1}, could be found.  This would increase the complexity of
     the application, unless it was run under a jython environment.
     This situation was a undesirable one. The developer did not want
     to use Java as a solution for this problem.  To use Jython would
     introduce Java into Python code, which would cause it not to be
     portable to other Python environments.

     One easy solution, if it is only happening when accessing the Staff
     table, is to include the information needed in the Staff table held in
     the local database, which is the LoginName field of the SEAT2008 Staff
     table.  This is needed to identify the supervisor of a postgraduate
     from the SuperviseStudent table in PostgradData.mdb.  The
     solution has yet to be implemented, and that would mean altering
     the Staff table in the Workload database and adding the extra
     field for LoginName.

     This problem is still unresolved.
--** Concurrency / Multiple views
   The application must be able to deal with having several people
   accessing the database at once.  Concurrent access to this data
   must be addressed.

   There are three views or users of this system.
    - Manager
    - Cluster leader
    - Staff

   Each has a different set of functions available to them.

    + The manager should be able to access for all clusters
      - a overview of total staff workload hours which includes hours
        gained from papers, postgraduate supervision, and administration roles.
      - a breakdown of the administration roles held by staff and the
        hours they gain from this.
      - a breakdown of the postgraduate students that are supervised by
        staff and how many hours they get from each student
      - a programme list of papers offered by degrees listed by the year
        they are offered
      - a means by which they can manage which staff teach, coordinate
        papers, what administrative roles they hold.
      - make archives of the current database

    + The cluster leader can access the same options that the manager
      can access, but only for their cluster.

    + the individual staff member who is not a cluster leader, or a
      manager. They can edit personal details like first name, and
      last name. They can access only their workload information in a
      read only format, with a breakdown of what their total workload
      hours are made up of.
      - Papers
      - Administration roles
      - Postgraduate supervision


  Editing of data, must be able to be done at the same time. This is where
  the concurrency problem comes in.  A means by which data can be
  edited from several sources at once must be found.  An idea was to
  avoid having multiple people editing the same paper at once.

--** Security / Multiple access
   Security is a minor issue for this application.  Write access is the
   primary concern here.  It does not seem like it is a major issue,
   but the data is still treated as sensitive. Within the organisation
   the information of one cluster is open to the other.  They seem to
   like to see what the other is doing and is not worried if another
   cluster member does see thier information.
--** Application configuration
The application is required to be configurable and is operating under
the following assumption.  The discrete coefficient variable must be
able to be changed in the future.  I forfull this requirement by
creating a model called Coefficients, and another for the standard
points value of a paper called StdPoints.  These would take the form
of tables in a database, probably called db_coefficients and
db_stdpoints.  There are shown in table \ref{table:coefficients}.  The
values can be changed, but while the input can be changed, if it is,
would break the system.  The functions that do the calculations use
inputs as the primary key lookup value.


The part that can not be changed is the formulas themselves.  To
change these, someone needs to alter the formulas in the formula
module.  This would require someone with Python programming
experience.

#+CAPTION: Table of coefficients
#+LABEL: table:coefficients

|---------------------+--------+-----------+-------|
| input               | points | intercept | slope |
|---------------------+--------+-----------+-------|
| undergrad           |     15 |     287.5 |     4 |
| project             |     30 |         0 |    50 |
| local\_coordinator  |     15 |         3 |   0.1 |
| global\_coordinator |     15 |        12 |  0.05 |
|---------------------+--------+-----------+-------|

:END:
*** Technologies used
    This project uses the following technologies.
**** Django
   Django \cite{django1} is a web framework written in Python.  It is designed to
   allow rapid development of web sites.

   Django uses a Model View Controller (MVC) \cite{mvc1} implementation, but
   prefers to use Model Template View (MTV) as a way of describing
   their framework.

   Django uses the MTV development pattern shown in figure \ref{fig:mtv}.
    - M is the model which is the data access layer.
    - T is the templates which is the presentation layer.
    - V is the views which is the business logic layer.

#+attr_latex: width=20em,placement=[H]
#+CAPTION: The Django model
#+LABEL: fig:mtv
#+BEGIN_DITAA  mtv_django -r -S -E

 +----------+      +--------------+
 | {d}      |      | {d}          |
 | Template |------| Presentation |
 | cC02     |      | cC02         |
 +-----+----+      +-------+------+
       ^                   ^
       |                   |
   +---+--+        +-------+------+
   | {io} |        | {io}         |
   | View |--------| Business cBLU|
   | cBLU |        | Logic Layer  |
   +---+--+        +-------+------+
       ^                   ^
       |                   |
       |                   |
   +---+---+       +-------+------+
   | {s}   |       | {s}          |
   | Model |-------| Data Access  |
   | c888  |       | Layer c888   |
   +-------+       +--------------+

#+END_DITAA
   
**** Python
     Python \cite{python1} is needed by Django.  It is the programming language used on
     the server side of this application.
**** MySQL
     MySQL was the database engine used to store the data used by the
     application.   
**** Microsoft Access
     This is a external source which has been imposed on this
     application. It holds all the postgraduate supervision data is
     kept, which is part of what makes up the final workload figure of
     staff.
**** ODBC
     ODBC is used as a means of extracting the data from the Microsoft
     Access database.  ODBC is access from python via a python library
     called pyodbc.  This hooks into unixODBC, which in turn uses a
     MDBTools ODBC driver to read data from the Postgraduate database.
     Figure \ref{fig:odbc} shows this process.
     
     #+ATTR_LaTeX: width=5cm
     #+LABEL: fig:odbc
     #+CAPTION: The tool chain that is used to fetch data from the postgraduate database.
     #+begin_src ditaa :exports results :results file :file odbc-chain.png
       +-------------+
       | Workload    |
       | application |
       | {mo} cGRE   |
       +-------------+      
             ^
             |
       +-------------+
       | Python      |
       | pyodbc      |
       | {io} cBLU   |
       +-------------+      
             ^
             |
       +-------------+
       | Unix ODBC   |
       | {io} cBLU   |
       +-------------+
             ^
             |
       +-------------+
       | MDB Tools   |
       | {io} cBLU   |
       +-------------+
             ^
             |
       +--------------+
       | Postgraduate |
       | Database     |
       | {s} c888     |
       +--------------+
     #+end_src


     
**** Javascript
     On the client side Javascript is used to make the pages dynamic.
     jQuery \cite{jquery1} is the Javascript library used to make
     it easier to develop solutions using Javascript.

     #+begin_quote
     jQuery is a fast and concise JavaScript Library that simplifies
     HTML document traversing, event handling, animating, and Ajax
     interactions for rapid web development. -- http://jquery.com/
     #+end_quote

     A side affect of using jQuery is it helps overcome the
     incompatibilities between different browsers.
**** HTML and CSS
     Each page that is viewed is generated by a server side process.
     The output produced is a mixture of HTML and CSS.  CSS was used as
     a aid to laying out the HTML elements in the viewing browser.

     
*** Overall design
**** Data inputs and outputs
***** Ideal world
    Figure \ref{fig:dataflow} shows a general flow of where data is
    sourced from and what is being output.  The original idea was to get
    data from three sources.  A database containing the workload data, the
    postgraduate data and data from College of Sciences (CoS).  The
    workload database would contain the teaching allocation data,
    paper coordinator details, and so on.  The postgraduate database
    contains data on staff supervision of postgraduate students.  The CoS
    database contains data on the staff, and provides most of the
    information needed on papers.

#+attr_latex: width=\textwidth
#+LABEL: fig:dataflow
#+CAPTION: Ideal Data IO for the workload process
    [[file:images/workload-process-ideal.png]]
***** Data source problems
    Unfortunately the CoS database information is restricted and thus not
    available to this project.  This means the information now has to be
    manually entered.  The new data flow diagram is shown in figure
    \ref{fig:dataflow2}.

#+attr_latex: width=\textwidth
#+LABEL: fig:dataflow2
#+CAPTION: Actual Data IO for the workload process
    [[file:images/workload-process.png]]




*** The system users
    There are three users of this system, the cluster staff, cluster
    leaders, and  overall administrator.  From these three users are
    formed the three views.  Each user has different functionality.

**** Cluster user
     The staff who make up the cluster.  They have a interest in making
     sure the data about them is correct.
**** Cluster leaders
     Who has the responsibility of collating the data for teaching
     allocations, and coordinator roles.  They also have a interest in
     seeing how their cluster is doing overall.  They also have the
     same interest as a ordinary staff member.
**** Administrator
     An administrator is not a academic staff member and is assumed to
     be a manager. They see the overall picture of how SEAT is doing
     broken down by cluster, campus and class.  Their role is to
     collate all the data from the clusters together.  They also need
     to be able to archive the current data, add new staff, and papers.

** Redesign phase (following user presentation)
   After developing a initial design the application was presented to
   the cluster leaders at a meeting.  They were given a preview of
   how they could interact with the application.


   The application tree view model prototype was not liked. It was
   discovered they liked the way that Microsoft Excell allowed one to
   edit the data about teaching allocations and paper coordination. 

   A major redesign was undertaken for how the cluster leaders can
   edit the teaching allocations and paper coordinations was
   undertaken.  Peviously the interface had been based upon a tree
   like stucture, with nodes showing the paper, which expand to show
   paper offerings and teaching allocations.  The cluster leaders, I
   think, did not like this, and seemed to like the way they were able
   to edit the relavent sections in the spreadsheet.  So the new
   interface gained some of the functionality of the spreadsheet. This
   is shown in figure \ref{fig:redesign:clusterview}. The old view is
   shown in figure \ref{fig:redesign:oldview}.
   
   
   #+ATTR_LaTeX: width=\textwidth, placement=[H]
   #+CAPTION: Cluster leader paper edit view in spreadsheet style
   #+LABEL: fig:redesign:clusterview
   
   [[./images/cluster_paper_edit_view.png]]
   
   
   #+ATTR_LaTeX: width=\textwidth, placement=[H]
   #+CAPTION: The old way cluster leaders were to edit their papers
   #+LABEL: fig:redesign:oldview
   
   [[./images/admin_offering_teach_edit_view.png]]
*** Testing
    At every stage of development, testing took place.  There were no
    automated tests, even though they are possible, due to the developers
    inexperience in testing web applications.  However, at every stage,
    a checklist of features and operations were tested by hand.  A
    checkbox list of inputs and results were checked for pass or
    crossed for fail.

** Implementation
*** User Interface
    
**** Look and feel
    The idea was to make the pages look like reports, but make parts
    of them editable.  This was overcome using jQuery, to alter the
    HTML DOM on the fly, using event triggers like click and hover on
    HTML elements.  This replaces a HTML element like <span> with a
    <form> element like <input>. The <input> element is editable, and
    when the mouse leaves this element, turns into a <span> element.
    The span element that is left contains the updated information.
    When the mouse pointer leaves the <input> element, a hover out
    event is triggered, which uses Ajax, through jQuery, to connect
    with the server and send it the update, which the server then uses
    to update the appropriate field in the database.  The process is
    shown in figure \ref{fig:edit-process}.

#+attr_latex: width=15cm
#+LABEL: fig:edit-process
#+CAPTION: The flow of events that happen when editing displayed data.
    [[file:images/edit-process.png]]


    The previous system was a spreadsheet, and the site loosely
    models itself on this spreadsheet, or the tabular view.  The
    cluster view is an example of the spreadsheet model as shown in figure
    \ref{fig:redesign:clusterview}.  This loosely mimics the view that is
    shown in figure \ref{fig:spreadsheet-teaching}.  


#+attr_latex: width=\textwidth
#+LABEL: fig:spreadsheet-teaching
#+CAPTION: The standard hours formula spreadsheet worksheet showing papers and teaching allocations
[[file:images/spreadsheet-teaching.png]]

    Everything is grouped by category and where workload hours are
    being displayed, totals are shown at every stage.  An example of
    this grouping is shown in figure \ref{fig:staff_list}.



#+attr_latex: width=\textwidth
#+LABEL: fig:staff_list
#+CAPTION: A filtered staff list showing information on staff from the cluster CSIT.  The total hours for each staff member is shown broken down by the total hours for papers, postgraduate supervision, and administration hours as well as the overall total.  At the bottom is the totals for the cluster.  It demonstrates the grouping of data, making it easier for the viewer to figure out what is going on.
[[file:images/staff_list-csit.png]]


    The cluster leader view is editable, just like a spreadsheet, with
    columns and rows.  Each cell that, when the mouse passes over,
    will be highlighted with blue.  This indicates the cell is
    editable.  This is shown in figure
    \ref{fig:cluster-view-row-highlighted}.  To edit it the user must
    click the mouse on this cell, which brings up a appropriate
    control, which the user can edit the value with.

#+attr_latex: width=\textwidth
#+LABEL: fig:cluster-view-row-highlighted
#+CAPTION: A row from the cluster viewwith a cell being highlighted to indicate it is editable.
[[file:images/cluster-view-row-highlighted.png]]

Unlike the spreadsheet, this view does not require the user to
remember the legal entry values.  In the case of editing the
campus, coordinators, semester, mode, and staff in the teaching
allocations, a drop down menu would appear when the element is
clicked.  The cognitive load on the user is thus reduced. An example
of this is shown in figure \ref{fig:cluster-view-dropdown}.

#+attr_latex: width=\textwidth
#+LABEL: fig:cluster-view-dropdown
#+CAPTION: An example of a drop down menu used to edit a field in cluster leaders view.  Also of note is the fact this is a staff list and has ordered the staff names according to cluster, then ordered by surname.
[[file:images/cluster-view-dropdown.png]]

The controls, like the drop down menus used, were all created from a
mixture of server side Python using Django, Ajax and Javascript.
Javascript is called and uses Ajax to connect and retrieve data from
the server. The server side Python script processes the request and
returns text in JSON format. This text is then evaluated
by Javascript to form a HTML form element. The form element is then
inserted into the HTML DOM.  This process could take place many times.
The process is shown in figure \ref{fig:control-creation}.

#+attr_latex: width=10cm
#+LABEL: fig:control-creation
#+CAPTION: The process that takes place to create a form control like a drop down menu of staff.
[[file:images/form-control-creation.png]]


The staff menu has all staff in seat listed.  This creates a problem,
for finding a staff in this huge list can be a problem.  The order of
the names is changed to help solve this problem.  They are ordered
according to what cluster they belong to, then ordered by surname.
This has the effect of grouping the staff according to what cluster
they belong to.  The menu entries are filled with first the cluster
they belong to, followed by their initials, then their first name,
followed by their last name. Making it obvious what cluster each staff
member belongs to in the drop down menu makes it possible to figure
out at a glance which cluster they belong to. Thus making finding a
particular staff from a cluster is easier.  Figure
\ref{fig:cluster-view-dropdown} gives a glimpse of this.

**** Warning messages

It was also important to give visual prompts, warning the user of an
dangerous action or telling them that something is wrong.  For all
events, if a error has happened then the user is informed of this.  It
is not always possible to give messages which tell the user exactly
what has gone wrong, but effort has gone into at least informing them
of a error.  Some actions also have confirm messages, but only to
action which affect lots of items at once, like in the cluster leader
view, shown in figure \ref{fig:cluster-commit}.  The red circles, one
and two, are such events which have an effect on lots of items all at
once.  One resets the information to the way it was before, two
commits the changes to the database.  Both nave confirm dialogs
associated with them.

Also of note is the rows entirely in red.  This visual prompt helps
draw attention to a mistake in teaching allocations. When the hours
are corrected so they equal one hundred, that row will no longer be
red.

#+ATTR_LaTeX: width=\textwidth
#+LABEL: fig:cluster-commit
#+CAPTION: The cluster leader view highlighting the revert (1) and commit (2) buttons
[[file:images/cluster_paper_edit_view2.png]]



**** Three views
     When a user logs in they see a different setup.
***** Cluster user
      Sees their own personal page with their personal details, of
      name, cluster, and a break down of their workload hours, by
      paper offerings, postgraduate supervision and administration
      roles.

      The paper offerings list their teaching allocations, and
      coordination of papers

      They also get the chance to look at other staffs data, since this
      information is not secret and there was a desire to be able to do
      this.

***** Cluster leader
      This user sees a menu from which they can navigate to different of staff
      lists, with a break down of their hours, with the total hours
      gained from papers, postgraduate supervision, and administration
      roles, with a grand total at the end.  Also a total for the
      entire cluster is given.

      They also get to look at other clusters details.

      The other item in the menu is the cluster paper offering page.
      Here they get to edit the teaching allocations for the papers
      which any of their staff have something to do with.  Figure
      \ref{fig:cluster-commit} is a example of what a CSIT cluster
      leader would see in this page.

***** Administrator
     The administrator view sees a menu which also allows them to see
     the same views as a cluster leader, but instead of automatically
     being filtered by the cluster, they see all staff.  The cluster
     paper offerings view for them is there for those papers that have
     staff from two or more clusters.  This is needed to avoid
     concurrency problems.  They check to see if the data is correct
     and accepts or rejects them accordingly.  No offering is editable
     by the administrator in this view, these are left to the cluster
     leaders to do.  Figure \ref{fig:admin-cluster-view} is a example
     of this view.

     The places circled in red are the accept all button and the
     accept and reject buttons for a offering.  The accept all button
     was implemented to allow the acceptance of all the offerings
     viewed. This assumes that the details are accepted as being
     correct for all offerings.  A confirm dialog will pop up when
     this is clicked just in case this was clicked by mistake.  The
     first of the duplicate offering in this case is used as the one
     that is copied over to the main database, and the other
     duplicates are deleted. If the accept button is clicked on a
     individual offering, any other duplicate offerings are deleted,
     with the one accepted, being copied to the main database.

     
#+ATTR_LaTeX: width=\textwidth
#+LABEL: fig:admin-cluster-view
#+CAPTION: The cluster view of offering which have staff involved from more than one cluster, which need checking before being committed to the main database.
[[file:images/admin_cluster_view2.png]]

*** Responsiveness
    Ideally the loading of a page should take as little time as
    possible.  There are three bottle necks to speed of page loading.
    The server side scripts, the client side scripts, and the amount
    of data needed to process.  The server side scripts have the
    fastest execution time, while the client side Javascript, can be
    very slow, especially when inserting elements into the HTML DOM.
    It was decided that most of the processing of data should be done
    by the server.  The insertion of elements into the HTML DOM by
    will be kept to a minimum.  The reloading of pages is done as few
    time as it is possible, unless the request was to process large
    amounts of data, like filtering the staff list by cluster, campus
    or class.
*** Archiving of data
    The application allows the backing up of data to files.  These
    files are written in JSON format.  JSON is a format which can be
    written to or read by Django.  This makes it a easy choice for
    backup formats.   It means that data from a previous year can be
    compared to the current data.  It also means that if something
    goes wrong, the backed up data can be used to restore the database
    to where it was before the mistake took place.
*** Updating paper offerings process
   Each year the cluster leaders must update the teaching
   allocations and coordination roles for the cluster.  With several
   staff editing the database at once, a potential for concurrency
   issues is raised.  To overcome this, the issue was avoided.  This
   was achieved through the cluster view.  Each cluster leader edits
   paper offerings which their staff members are involved in, and not
   any other papers, so most concurrency problems are avoided as a
   result.  However their are offerings which have staff from more
   than one cluster involved.  To avoid conflicts a copy of the
   offering is made for each cluster and displayed in the cluster edit
   view.  The cluster leaders edit their copy then submit it to the
   system.  If the offering has only staff from that cluster involved,
   the offering will be copied to the original.  For those that
   involve more than one cluster, it is displayed in the
   administrators cluster view for checking.  If the administrator is
   satisfied that all the different copies agree and are correct, will
   accept it and the data will be copied to the original. Figures
   \ref{fig:cluster-commit} and \ref{fig:admin-cluster-view} show these
   interfaces.  Figure \ref{fig:updateprocess}  shows the process of
   updating the paper offerings.

#+ATTR_LaTeX: width=\textwidth
#+LABEL: fig:updateprocess
#+CAPTION:  The process that takes place to update paper offerings by cluster leaders and the administrator
[[file:images/update_offering_process.png]]

** Learning outcomes
*** Responsiveness
**** Data processing
There are two places to process the data and one place to display the
results. You can use client side scripts, like javascript to process
the data, and it can be processed on the server side.  The more data
that is processed on the server side the less people that it can
handle at once.  Also doing it all on the server side means the pages
have to be reloaded every time a new choice is made.  The client side
processing of data, takes some of the load off the server, but it has
the downside, of relying on the clients browser to have the
functionality required, like javascript, which could be of a different
version to the one that the site was developed for.  Also javascript
seems to be a lot slower to process data than the server side scripts
are in browsers like Firefox.

As a result of Javascript being to slow, data processing by Javascript
was removed.  Javascript has been reduced to fetching small pieces of
data via Ajax, and displaying them in the page.  This means that most
of the processing is done by the server.  However the number of time
consuming bulk processing of data is done is reduced.  The pages get
redisplayed as little as possible, with the use of Ajax.  Mass
processing of data is done on the server side.  Only use javascript to process
or retrieve small amounts of data. 

**** Algorithm efficiency

The efficiency of algorithms will have more impact on the
loading time of dynamic pages than the choice of languages.  The
loading time of a page was reduced by following the following rules,
based upon "Python Patterns - An Optimization Anecdote"
\cite{optimising1}.


#+begin_quote 
If you feel the need for speed, go for built-in functions - you can't beat a loop written in C. Check the library manual for a built-in function that does what you want. If there isn't one, here are some guidelines for loop optimization: 

    + Rule number one: only optimize when there is a proven speed bottleneck. Only optimize the innermost loop. (This rule is independent of Python, but it doesn't hurt repeating it, since it can save a lot of work. :-)
    + Small is beautiful. Given Python's hefty charges for bytecode instructions and variable look-up, it rarely pays off to add extra tests to save a little bit of work.
    + Use intrinsic operations. An implied loop in map() is faster than an explicit for loop; a while loop with an explicit loop counter is even slower.
    + Avoid calling functions written in Python in your inner loop. This includes lambdas. In-lining the inner loop can save a lot of time.
    + Local variables are faster than globals; if you use a global constant in a loop, copy it to a local variable before the loop. And in Python, function names (global or built-in) are also global constants!
    + Try to use map(), filter() or reduce() to replace an explicit for loop, but only if you can use a built-in function: map with a built-in function beats for loop, but a for loop with in-line code beats map with a lambda function!
    + Check your algorithms for quadratic behavior. But notice that a more complex algorithm only pays off for large N - for small N, the complexity doesn't pay off. In our case, 256 turned out to be small enough that the simpler version was still a tad faster. Your mileage may vary - this is worth investigating.
    + And last but not least: collect data. Python's excellent profile
      module can quickly show the bottleneck in your code. if you're
      considering different versions of an algorithm, test it in a
      tight loop using the time.clock() function. 

--- http://www.python.org/doc/essays/list2str.html

#+end_quote

*** Javascript compatibility
Javascript is implemented differently across different browsers.
jQuery helped overcome most of the issues, but there were rules that
need to be adhered to make sure your code works in most major
browsers.
  1) Always use var to declare variables
  2) Avoid the use of a few keywords, like delete for variable names
  3) If creating a array list, do not put a comma after the last element

The first and the third rules are for Internet Explorer, but the
second is true particularly for any browser based on Webkit, like
Safari.  The second one may sound like common sense , and it is, but
there are Javascript implementations that, under certain circumstances, will allow
you to use these keywords.

This application relies on javascript, so if it is turned off then
hardly anything will work.  Currently nothing is done in response to
this situation. In future, a warning message, telling the user this,
produced on the server side, should be shown.  Other than this there is
nothing that can be done, if the browser has javascript turned off.

*** CSS
The best defense a web developer has against different browser
implementations of CSS, is to stick to standards and hope that the
browser being used adheres to these standards.  The differences are
otherwise to vast to keep track, and most of the development time
would be spent on resolving these differences, if this was attempted.

*** Concurrency / Multiple views
Most of the concurrency issues have been avoided.  The only possible
issue that could cause real problems, is if two cluster leaders from
the same cluster logged in and started editing the papers.  Most of
the time this curcumstance would not happen, but it could.  A possible
solution is to either implement concurrency solutions like locks, or
if there are two cluster leaders of the same cluster, logged on, to
logg both of them off with a warning message.

*** Look and feel of pages
Getting pages to look the same across browsers is very difficult
when using the HTML markup, even with the aid of CSS and javascript.
The best you can do is make sure the components appear in the same
place, using simalar colours.  The shape of the form controls are out
of your hand and in most browsers can not be manipulated very easily
with CSS.  Firefox for example, uses native controls like checkboxes,
and does not allow CSS to alter the look of this control.  There are
methods, which can be used to make it look the way you want it.  These
hacks are not desirable, as they add another unstable element into the
page display.  

One way that was found to control the look of controls
was to simulate them, using HTML elements, like the <img> element, along with javascript
events to change something about this element, like the image in the
<img> element.  This was done in the cluster view of the site, in the
offered column.

:HIDDEN:
Add screen-shot here  
:END:

*** Problems with Paper List page
    In the original design a paper list page was created.  This view
    was a expandable tree with the paper code, title, points value and
    global coordinator being displayed for each paper.  You could
    expand this to show the paper offerings along with the teaching
    allocations of each offering.  The problem was that in expanding
    the view to include that papers offerings and teaching allocations,
    the size of the output would be changed, and thus the browser would
    have to redisplay the page.  This often meant that the view would
    suddenly go somewhere else and the viewer would have to scroll up
    or down to find the expanded paper.  This part was fixed with the
    addition of href anchors.  This only worked for expanding the paper
    view, but when it was collapsed, the page would scroll to a
    location somewhere below the paper that was just collapsed.  This
    is a real problem, as even href anchors do not seem to fix this.  

*** Value editing errors
    When changing a value, if a error occurs, then the user will be
    told of this error.  The problem is that the entered value will not
    revert to the previous value.  This can be misleading to the user,
    who looks at this value, sees it has changed in the page, so
    assumes the value in the database has changed, when it has not. The
    user will find out next time they load the page and look at this
    value, and see it is not the value they altered it to.  This is a
    problem, that needs attention.
*** Staff menu
    The staff is ordered by cluster then surname.  In future, to make
    cluster members, for the viewing cluster leader, easier to find,
    the cluster members of the cluster leaders cluster, will appear at
    the top of the menu.  The rest will then be ordered by cluster then
    surname. The reasoning behind this, is that the cluster leader is
    normally only interested in staff from their own cluster.  The
    staff most relevant to the cluster leader should appear at the most
    convenient place, thus reducing the time needed to find a member of
    that cluster.
*** Archiving of data
    With the archives, it is possible to analyse the information and
    get some trends from it.  It might be useful to create a process to
    extract and display this data in a meaningful way.  This might take
    the form of graphs.  This would be useful if it was desired to see
    how workload hours changed over time.

** Conclusion
  It is possible to split data up in a meaningful way to different
  groups of people.  This can be done by associating different view with different
  groups of users, grouping data and allowing users to
  independently work on their information.  Any concurrency issues
  involved are avoided, by the virtue of allowing the users to only
  edit data pertinent to them, and the data which involves more than
  one group is arbitrated by the administrator.  
  

#+INCLUDE: planner_report.org
  
#+LATEX: \bibliographystyle{plain}
#+LATEX: \bibliography{bibliography}

# LocalWords:  customise centring
