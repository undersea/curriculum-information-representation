#+TITLE:     Programme Planner
#+AUTHOR:    James Hurford
#+EMAIL:
#+DATE:      2011-03-30 Wed
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+DRAWERS: HIDDEN

#+STARTUP: hidestars

* Paper Planner                                                    :noexport:
** The Problem
*** How to represent it to users
*** Ideas on the user interface
**** Multi story floor plan
     The building represents the programme.  Years are represented by levels in a building. Each level contains rooms representing papers.  Stairs from rooms can indicate a links between one paper and another at different levels.  Stairs can go up or down.
**** Atom view
     Each atom is a programme.  The nucleus is the programme name, with each electron being a paper.  Each paper can spin around the nucleus at differing orbits with the lowest one being year 1, going up to year 2, etc.
**** Line graph
     Lines represent path taken, showing where papers intersect
**** Jigsaw puzzle
     Puzzle is programme, and pieces are papers, connected to prerequisites and corequisites.
**** Self Organising map
   + Papers are positioned in the plan in a algorithmic approche using AI and graph theory techniques.
   + Maybe uses idea from jigsaw puzzle and use the connections as limiters
**** Templates
***** A degree is a template via which you can create the programme from
      [[./images/drawing.png]]
**** How to solve it
This was going to be a complete application, but it was realised that
there was not enough time to do everything, so the Use case shown in
figure \ref{fig:usecase1} was adopted, and this would be the scenario that would be
solved using constraints satisfaction.


#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
#+begin_example
A Student does their first year of study at university.  They pass a
number of papers.  They have not decided upon a major yet, but they
want to know what their options are.  They want to know what major
suits their choice of papers so far the best, and what are the
possible paper combinations they can have for their future programme
of study.  These combinations must be valid for the choice of degree
and major, and allows them to complete their degree if done.
#+end_example
#+LaTeX: \caption{\label{fig:usecase1} Use case for student having done one year of study}
#+LaTeX: \end{figure}



The first priority was to learn what are Constraints Satisfaction
Problems.  To do this I looked on line and found a definition with a
example, in this case it was the map colours problem.



What software support there is for Constraints Satisfaction Problems
(CSP) was looked at.  There were criteria under
which the library would be used, in a effort to stay in the language of
choice, python, as much as possible, the library had to be written in
either C/C++ or python.  C/C++ was considered as python can use these
libraries through either the module /ctypes/ or in the form of a
specially written C module, using Python C API.  If it was written
as a C module for python, that could lead to it only being usable by a
Python interpreter written in C.  The choice was to make the
environment used as configurable as possible, so cytpes was chosen, as
in theory, any Python interpreter, no matter what language they are
written in has a /ctypes/ implementation, as /ctypes/ has become part of
the set of standard modules since (citation needed here).


Gecode was looked at and was the choice for implementing the
CSP, as it is a mature library, with one of the
authors claiming that it is relatively bug free.  Also there seemed to
be quiet a few references to Gecode in the forms that were looked at.
Thus there should be plenty of examples on how to solve various
problems using Gecode.

So To use this library there needs to be some research done on how to
use it.  There is a provided manual called "Modeling and Programming
with Gecode" (MPG) \cite{MPG1}.  The approach was to read as much of
this manual MPG as is needed to implement the solution come up with to
solve the problem.


While reading this document, some of the examples were gone through to
figure out how Gecode encodes CSP.


In Figure \ref{fig:GecodeArch} The Gecode Model Archatechture you have
3 layers, the Model,

#+ATTR_LaTeX: width=30em,placement=[H]
#+CAPTION: The Gecode Model Archatechture
#+LABEL: fig:GecodeArch
[[./images/gecode-model.png]]

One of the strategies taken was to have a look and see what books
there are on the subject, in regard to the problem.  The books
available are almost non existent, except for one book that was a
collection of articles which sounded like they might be solving a
similar problem was "Planning, Scheduling and Constraint Satisfaction:
to Practice." \cite{COBA01}.  However the problem they were
attempting to solve, were not close enough to the Paper Planner
problem.



** Solutions chosen
The solution come up with, as shown in figure
\ref{fig:decisionprocess}, aims at being simple.  The problem of a
large search space has been addressed by narrowing down the search by
using a simple algorithm of counting the number of papers done that
are in the major schedule for each major available, and the major that
has the academic record has the most papers, is the chosen set that is
used to create a leads to tree.  This tree is then used as the search
space for the constraints satisfaction part.  The rules are based upon
the minimum required papers to satisfy the degree requirements and the
minimum to satisfy the major requirements.
#+attr_latex: width=30em,placement=[H]
#+CAPTION: The decision process for determining programme selection options
#+LABEL: fig:decisionprocess
#+BEGIN_DITAA decision-process-diagram -r -S -E
               +---------+   +----------+   +----------+   +--------------+
               | Major   |   | Leads to |   | Degree   |   | Valid        |
               | Paper   |   | Paper    |   | Paper    |   | Degree       |
               | List    |   | DB       |   | List     |   | Paper        |
               | {s}c888 |   | {s}c888  |   | {s} c888 |   | Combinations |
               |         |   |          |   |          |   | {s}c888      |
               +----+----+   +----+-----+   +----------+   +--------------+
                    |    |        |         |              |
                    |    +----+   |         |              |
                    |         |   |         |              |
                    V         V   V         V              V
+----------+   +----+-----+   +---+---------+  +-----------+--+
| Student  |   | Select   |   | Create      |  | Determine    |
| Academic |   | Best     |   | Paper       |  | Valid        |
| Record   +-->+ Major    +-->+ Leads to    +->+ Paper        |
| {s}c888  |   | {io}cBLU |   | Tree        |  | Combinations |
|          |   |          |   | {io}cBLU    |  | {io} cBLU    |
+----------+   +----------+   +-------------+  +--------------+
#+END_DITAA
*** Constraints Satisfaction

*** Database use.
*** Programming library choice


*** Programming language choice
** Challenges
*** Using python to run C++ code
Python can import C libraries using /ctypes/ package and run C
functions.  There are a lot of CSP libraries that are written in C or
C++.  This is one method that can be used to use these libraries.
Gecode is a C++ library, and it was seriously looked at how it can be
used by python.

A solution searcher must be written in C++, if Gecode is to be used,
then compiled into a dynamic library which python can then load and
run function from.  The problem with C++ is that it mangles the names
of functions making it unusable by python as the code used to load
this library was written to load C libraries.  This posses the
question of how do you then use this C++ code.  Fortunately there has
been a solution for a long time.  The 'extern "C"' can be used on
blocks of code or functions to tell the C++ compiler not to mangle the
names of the items in this block and thus enabling C code to use it.
Using this one can then write a C function that calls the C++ code
that you want to run.  This in turn is accessible to the C import
library, which is used by pythons /ctypes/ package.


*** How to represent and encode the problem



** Conclusion
Conclusion is here

# check spelling
* Programme Planner


** Introduction
   The student at a university, has no automated means of planning
   their degree. This report presents a specification of a way to
   present this data to students, and discusses the ways in which it
   could be designed and implemented. Due to time constraints it has
   not been completed.

   
:HIDDEN:
   Can constraints satisfaction be used to aid in the planning of a
   students programme of study towards the selection of papers for a
   degree?  This is a aid to the decision process.  It will show what
   choices they have and show what is possible valid paper
   combinations there are.  It will use constraints satisfaction to
   help decide if the selection of papers are valid.

   The proposal is to try and solve this problem using a constraints
   satisfaction.  Also a define what the user interface would look like.

   Unfortunately this project ran out of time, and was not finished.
   This report will outline what could have been.
:END:

** Design
    Take in a list of papers and determine what is the best degree and
    major combination for this selection.  From there determine the
    best set of papers that the student should do to complete their
    degree major combination.  The solution come up with, is shown in
    figure \ref{fig:decisionprocess}.  The gray cylinders represent
    data sources, and are used throughout the process, pointing to
    where it is used.  For example, the major paper list is used to
    both select the best major, and to help create a leads to tree.
    The leads to tree is a dependency tree, showing what papers a
    paper is a prerequisite to.  Figure \ref{fig:leadstopapers} gives an
    example of what 159101 leads to.

    #+attr_latex: width=\textwidth, placement=[H]
    #+CAPTION: The process for determining programme selection options
    #+LABEL: fig:decisionprocess
    #+BEGIN_DITAA decision-process-diagram -r -S -E
               +---------+   +----------+   +----------+   +--------------+
               | Major   |   | Leads to |   | Degree   |   | Valid        |
               | Paper   |   | Paper    |   | Paper    |   | Degree       |
               | List    |   | DB       |   | List     |   | Paper        |
               | {s}c888 |   | {s}c888  |   | {s} c888 |   | Combinations |
               |         |   |          |   |          |   | {s}c888      |
               +----+----+   +----+-----+   +----------+   +--------------+
                    |    |        |         |              |
                    |    +----+   |         |              |
                    |         |   |         |              |
                    V         V   V         V              V
+----------+   +----+-----+   +---+---------+  +-----------+--+
| Student  |   | Select   |   | Create      |  | Determine    |
| Academic |   | Best     |   | Paper       |  | Valid        |
| Record   +-->+ Major    +-->+ Leads to    +->+ Paper        |
| {s}c888  |   | cFDA {o} |   | Tree        |  | Combinations |
|          |   |          |   | cFF8        |  | {mo} c9FB    |
+----------+   +----------+   +-------------+  +--------------+
#+END_DITAA

    #+attr_latex: width=5cm, placement=[H]
    #+caption: An example leads to tree showing what papers 159101 leads to.
    #+label: fig:leadstopapers
    #+begin_src ditaa :exports results :results file :file leadsto.png



                                +------+
                                |159102|
                            +---+      |
                            |   +------+
                            |
                            |
                            |   +------+
                +-------+   |   |159201|
                |159101 +---+---+      |
                |       |   |   +------+
                +-------+   |
                            |
                            |   +------+
                            +---+159202|
                                |      |
                                +------+













    #+end_src
    The problem of a large search space has been addressed by
    narrowing down the search by using a simple algorithm of counting
    papers done that are in the major schedule for each
    major available.  The major that has the most papers present in
    academic record, is the chosen set that is used to create a leads
    to tree.  This tree is then used as the search space for
    constraints satisfaction.

** Implementation
*** Data collection
    A means of collecting data for a leads to tree had to be devised.
    One way to do this is manual entry.  A tedious
    option, which we avoided.  The other method, is to use already
    existing, on-line sources, which took the form of the paper search
    results.  We found that we can search for papers from within the
    application.  This would be in the form of a HTTP request, and the
    results would be a HTML page.  The page was then search through a
    combination of xpath, and regular expressions.
*** Programming language
    Python was used in the workload application, and it seemed easier
    to continue using Python.
*** Constraints Satisfaction
    The options are, develop our own constraints satisfaction library or use a
    third party library.  A third party  library was investigated.

    Libraries, written in C, are accessed through the Python module
    /ctypes/. This gives us more scope on what constraints
    satisfaction libraries are available.

    Gecode \cite{gecode1}, written in C++, is chosen.

**** Gecode
     It has won a few challenges in the last few years.

     #+begin_quote
     Gecode won all MiniZinc Challenges so far (in all categories):
     2010, 2009, and 2008.
     -- http://www.gecode.org/
     #+end_quote

     An active on line community exists. Example code is found in
     various places on the web.

     It is also written in C++. Gecode is accessed by Python
     through the /ctypes/ library.

     It does not need any external dependencies.  Because of this, the
     complexity of using Gecode is reduced.
**** or-tools                                                      :noexport:
     Is a set of operations research tools developed at Google, with one of
     the tools being a constraints solver.  It is written in C++ and has a
     Python implementation.

     It is dependent on other Google libraries, which complicates its
     use for the developer.  It also is very new, and has not much
     support other than in the form of examples.
         
** Learning outcomes
*** Using C++ from Python
    Since Gecode was chosen, and Gecode is a C++ library, a way of
    using this library from Python had to be devised.

**** C++ name mangling
     /ctypes/ uses a dynamic library loader which only handles C
     function calls.  C++ mangles the names of functions and data
     types and /ctypes/ cannot recognise these functions and data
     types.  Use of a proxy function, in a *extern "C"* block must be used to allow /ctypes/ to use a
     C++ functions or data types. An example of this is shown below.
     A c_function calls upon a function defined in a external
     c++ library, from a function in the extern "C" block
     and thus be made available to /ctypes/.


     #+begin_src c++
       #include <cppheader.hpp>
       
       extern "C"
       {
         void c_function(void)
         {
           cppfunction();
         }
       }
     #+end_src

**** Memory allocation
     To use a C function from within Python through /ctypes/, a means
     of passing data structures is investigated.
     Two ways of doing this are explained.
***** Create a data structure in Python and pass this to the C function
      This is by far the preferred method, as the Python garbage
      collector can be used to deallocate memory.  This can be done
      through using a /ctypes/ data structure, like c_int, which 
      mimics the C data types.  It can also be done using a third
      party library called /NumPy/ \cite{numpy1}.  There are some good
      cookbook approaches documented \cite{numpyallocation1} for this,
      and in our opinion, is probably the best approach when what you
      want to use is arrays.  Since arrays suit the needs of this
      application, the /NumPy/ approach was used.

      /ctypes/ can allow pointers to python functions to be passed to
      C, where C can call this Python function.  This is referred to as
      callbacks.  The array is then filled with values, and then the
      /NumPy/ array in Python has the values we are after. We do not
      favour this approach, as it creates a extra layer of complexity
      to the code.  The below example creates a allocator

      Another approach is to create the array, then using the C
      function to fill this array with values.  We favour this
      approach, due to its simplicity, compared to the previous
      approach.  This approach is shown below, where a Python function is
      created to create a /NumPy/ array and return it, along with its
      dimensions.  You will note it adds the array to a global list
      called "allocated_arrays."  The pointer that it returns is then
      passed to the C function, along with its dimensions.

      #+begin_src python
        from ctypes import *
        from numpy import *
        
        #load the library and store a pointer to it in constrain
        constrain = CDLL('constraints_satisfaction/libconstrain.so')
        
        #storage of numpy arrays to stop them being garbage collected
        allocated_arrays = []
        
        #create a c_array from a python list of integers
        #returns a pointer to the created array and its dimensions
        def list_to_c_array(majors):
            lengths = []
            for major in majors:
                lengths.append(len(major))
            length = max(lengths)
            dim = (len(majors), length)
            degree = zeros(dim, dtype=c_int)
            for x in range(len(majors)):
                for y in range(length):
                    if y < len(majors[x]):
                        degree[x,y] = majors[x][y]
                    else:
                        degree[x,y] = -1
            allocated_arrays.append(degree)
            ptr = degree.ctypes.data_as(c_void_p).value
                
            return ptr, (c_int * 2)(dim[0], dim[1])
        
        #creates a pointer to the run_majors function in the constrain library
        #its not neccessary to define what its parameters are
        run = constrain.run_majors
        #set its return type to be a int pointer
        run.restype = POINTER(c_int)
          
        
        #a free function is refernced
        free = constrain.free_array
        
        #the academic record as a c_int array
        papers = (c_int*7)(159101, 159102, 158100, 160101, 161101, 160102, 159201)
        
        #computer science schedule
        cs = [159101, 159102, 159201, 159202, 159233, 159234, 159235, 159253, 159254, 158359, 159302, 159331, 159333, 159334, 159335, 159339, 159351, 159354, 159355, 159356, 159357, 159359, 161326]
        #infomation technology schedule
        it = [158100, 157241, 158212, 158225, 158235, 158244, 158258, 158261,
              159254, 157341, 158326, 158337, 158344, 158359, 158368, 159351]
                
        #put them together
        majors = [cs, it]
                
        #create a c array from these values
        ptr,pdsize  = list_to_c_array(majors)
        
        #run the c function passing it the major schedules and the
        #academic record, returning the results as a pointer to a array
        results = run(ptr, pdsize,
                      papers, len(papers))
        
        #print the results
        for x in range(pdsize[0]):
            print 'result', x, results[x]
        
        #free the returned results which have been allocated
        free_array(results)
        results = None
      #+end_src


***** Allocate some memory in C and return a pointer to it to Python
     The problem with this option is that Python then has to
     remember to deallocate the memory when it is finished with it.
     This requires the developer to remember to do this, and does not
     take advantage of Pythons garbage collector.  However, due to the
     complexity of the alternatives, sometimes means this approach is
     the best we have available.  In the previous example this method
     was used to return a pointer to a array of results, which had to
     be freed, and to stop it being accidentally used again, made to
     reference NULL, or in Python None.



# LocalWords:  deallocate

*** Constraints satisfaction libraries
    If this project was to be done again, a different library would be
    used.  One that worked native in Python is preferred.  Gecode is a
    brilliant comprehensive constraints satisfaction library, but
    having to work with C++ from Python, creates problems, like
    passing variables, handling memory allocation.  Until there is a
    Python implementation of the Gecode library, we would prefer to
    either, implement constraints satisfaction ourselves, or use
    or-tools \cite{or-tools1} from Google.  Dealing with more than one
    language, and having to get them to communicate, added a level of
    complexity that was not wanted.
*** Data collection
    The problem with using data presented in HTML, is that the data is
    not consistent in layout.  A prerequisite for one paper could be
    in the form of "159.2xx, 161.1xx" or it could be "Any 100-level BA
    paper."  The first is easy to process, but the second, is almost
    impossible, at the skill the developer of this project has.  It
    was decided that if a prerequisite should take the form which
    cannot be parsed, then it shall be assumed to not exist.  This
    does cause problems, but there does not seem like any other option.


