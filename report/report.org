#+TITLE:     The management of databases for a large organisation
#+AUTHOR:    James Hurford
#+EMAIL:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:



#+LaTeX_HEADER: \setlength{\parindent}{0pt}
#+LaTeX_HEADER: \setlength{\parskip}{1em}

* Introduction


* Workload
** The Problem
Workload is a measure of how many virtual hours each staff member is
going to be doing for the coming year. The purpose of Workload is to
spread the workload as fairly among the staff.  It is a artificial
measurement, using a formula to determine a individuals hour based on
a set of predetermined metrics.

The task is to create a application to take in:

+ For each paper offered

  + For each person teaching this paper how much of the paper they
    are teaching.
  + who the global coordinator is
  + who the local coordinator is

+ The Admin roles for each of the members of staff and how much
  the admin roles are worth in Workload hours.
+ For each staff
  + Which postgraduate they are supervising
    + how much supervision in percentage terms they are giving
    + Given that each postgraduate degree is worth different hours
      + What percentage of supervision they give and thus how many of
        those hours do they get.

This process gets it's information from 2 databases.  One being the
postgraduate database, and the other a local custom built MySQL
database.  All the information needed is stored on the local MySQL
database, with


It could also be used as a tool to indicate where resources are needed
the most, if a extra staff member is needed.


*** What it is that this application is replacing
Currently a Excel spreadsheet is being used to store the input data
and calculate and display the results.  The current solutions is to
complex and needs a easier method for inputting the data.  The amount
of data inputted is coming near to the limit of how much Excel can
take.

Currently cluster leaders put together the workload hour report for
their cluster.  They then pass that information onto Glenda who then
inputs the data into a spreadsheet application.  Micheal also compiles
a report of the postgraduate hours for each staff member and sends
this to Glenda who also puts this into the spreadsheet application.
The entire process is time consuming and error prone, and mistakes
can take a long time to be fixed.

Figure
#+latex: \ref{fig:excel}
shows a simplified view of the current process.  Each cluster produces
a list of their staff members roles, like how much of a paper they
teach, who is the coordinators of papers.  These get sent to the
manger who then inputs this data into a spreadsheet.  At the same time
a list of postgraduates is produced from the postgraduate database,
which includes, who supervises them, and how much supervision the
staff member in question supplies in the form of a percentage.  This
also gets sent to the manager who inputs these into the spreadsheet.
The spreadsheet does some calculations and produces a set of workload
hours for each staff member.  These include a break down of what makes
up this final number.

The entire process is time consuming and tedious, also the spreadsheet
is to complicated, and is reaching the maximum amount of data it will
accept, and show results for.  My job is to replace this with a more
robust application, which requires a lot less time and effort to
produce the same results.

#+attr_latex: width=30em
#+CAPTION: Simplified view of the existing process
#+LABEL: fig:excel
#+BEGIN_DITAA workload_process -r -S -E
+---------------+          +-------------------+        +--------------+
| Cluster Staff |          | Excel Spreadsheet |        | Postgraduate |
| Roles         | -------> |                   | <----- | Supervision  |
| {io}          |          | {s}               |        | {io}         |
| cBLU          |          | c888              |        | cBLU         |
+---------------+          +-------------------+        +--------------+
#+END_DITAA



*** How can a application be more flexible than the spreadsheet solution
What do we mean by flexible?  What form can this take and why should
we do this?

For SEAT Management to more efficiently do their job they would
benefit from a application which streamlines the data input process
and minimises the amount of intervention that is needed to produce the
required reports.  I planned to remove a few steps from this process.


*** How to represent it to users?
What form will this take?  What sort of format will be used?

It was decided to do this application as a web application.  This meant
it could be OS independent, as far as the person who was accessing it
is concerned, don't have to worry about installing it on many
machines, just one.  All the user needs is a modern browser with css
and javascript enabled.   The downside is that the different browsers
behave differently to each other in terms of how they display things
and what they are capable of running.

** Challenges
*** What question do you ask first?
*** What methods of development do I use?
Is there one which suits a individual best?  How does one keep
themselves motivated?  Do you use a version control system?  What
system and does it matter?


Produced a prototype of the application in html, css and javascript.
Was not the optimal choice, but it demonstrated my initial ideas.  I
then took this prototype and showed it to Glenda, Stephen and Hans,
who approved of it.  I then went ahead and implemented it in python,
using the django framework, along with some javascript, and css
styling.

*** What programming platform do I use?
What language and does it matter?  Which works best for the scenario I
choose?  Is a compiled system a good choice?

This is a critical question.  The key points you should be looking at
is
 - What is the target OS and thus what resources do you have
   available?
 - If the resource is missing, can it be added?
 - Can the features required of this application be satisfied by the
   chosen platform?

*** Where is it going to be deployed?
This is important, as it decides what options are available to you and
poses its own challenges.
*** Security
How important is security, and how doe you overcome these problems?

Security seems to be a concern.  The only ones who should be able to
access the data produced by this application are academic staff, and managers
and cluster leaders. The Workload of other academic staff, should be
visible to each other.  Academic staff should only be able to view
data, and alter their personal information, but not anything else.
Cluster leaders should be able to alter
*** How to represent it to users
What do users respond best to and do you want to force them to install
a programme on their computer or have it available anywhere on the intranet?
*** Where do I get my data from and how do I store it
What other technologies to I have to interact with and how can I
minimise this interaction?

The problem that is being faced here is several things.  The biggest
problem is what are you allowed to access?  If one of the sources uses
a different technology, how can you interact with this technology to
extract the data that you need?  Are there any changes that need to
take place to enable you to use that source, on the sources end?

Politics plays a important part in determining what you can get access
to.  If someone disagrees with what you want, and they have the power
to deny you, then you will hit a brick wall.  The only source of data
that you can count on is the data that is inputted via the programme.  


The Postgraduate database is a MS Access database, which is a Windows
only product and the application is being run on a Linux CentOS
server.  I have to be able to access this from Linux, and that is not
easy.  I did some searching and found various unhelpful dead ends,
when I came across this post on unixODBC-support
\cite{unixODBC} form.  The information I got was that there
are three ways of doing this.
 1) Share the folder containing the MS Access file and access it using MDBTools
 2) Create a link from a MS SQL Server to the MS Access file and use a
    MS SQL Server ODBC driver.
 3) Create a ODBC-ODBC bridge in which you install the ODBC service on
    the Windows machine, which uses a ODBC driver for MS Access, and
    use a ODBC driver on the Linux server which can talk to the remote
    server.


**** What functionality do I implement
The original idea was to use data from other databases found around
Massey to fill the Workload database tables.  It was supposed to be
directly imported by the application.  The proved to be difficult,
due to security concerns.  Massey is reluctant to allow access to
data directly.  There was to be two databases used, on being the COS
database and the other was the Postgraduate database. Direct access to
the COS database has so far been denied, however I have not pushed the
issue, as this is a situation I individually can't do anything about.
I therefore decided to use csv imports instead. Each csv file
represents a table in the Workload database, how the files are created
is not my concern.  I know they can be created.

Access to the Postgraduate database file is possible, the problem is
it is a MS Access database file.  I am running the application on a
CentOS server which does not run MS Access.  There is a solution
however,  I found a set of programs under the name MDBTools.  This
allows read only access to the database tables in the Postgraduate
database.  Futher there is a way of accessing MS Access files using
ODBC through the UnixODBC and a python package called pyodbc, which
allows me to what is defined in the ODBC configuration files in
python, with the ability to execute SQL statements against this
database.

The plan as shown in figure \ref{fig:mdbodbc} is to mount //www-ist/seatdb$/
on /mnt/seatdb.  This would give access to the MS Access files
PostgradData.mdb and SEAT2008.mdb which contains the staff table that
is needed to associate staff with postgraduate students.

The MDB Tools would give read only access to the data in these MS
Access files mentioned above.  There is a ODBC implementation for MDB
Tools which can be used by UnixODBC.

First tell UnixODBC about the driver in the file odbcinst.ini, usually
found in the \//etc\// directory.  Figure \ref{fig:odbcinst} shows the
name of the driver put at the top between the square braces. Below it
a description is given, and most important where to find the driverfor
this ODBC instance.


#+LaTeX: \begin{figure}[htb]
#+LaTeX: \centering
#+BEGIN_EXAMPLE
[MDBToolsODBC]
Description = MDB Tools ODBC
Driver = /usr/lib/libmdbodbc.so.0
#+END_EXAMPLE
#+LaTeX: \caption{\label{fig:odbcinst} odbcinst.ini}
#+LaTeX: \end{figure}



Shown in figure \ref{fig:odbc} the Data Source Name (DSN) for each of
the databases needed is entered. This is put into the file odbc.ini.
They contain a DSN name in between the square braces, a description of
what it is, the driver that was specified in odbcinst.ini as shown in
figure \ref{fig:odbcinst} , and finally the path to the MS Access
file. Here we have two DSN entries, one for the Postgradute database
and the other for the SEAT 2008 database which contains the needed
staff information.



#+LaTeX: \begin{figure}[htb]
#+LaTeX: \centering
#+begin_example
[postgrad]
Description = Microsoft Access Postgrad DB
Driver = MDBToolsODBC
Database = /mnt/seatdb/PostgradData.mdb

[staff]
Description = Microsoft Access SEAT2008 DB
Driver = MDBToolsODBC
Database = /mnt/seatdb/SEAT2008.mdb
#+end_example
#+LaTeX: \caption{\label{fig:odbc} odbc.ini}
#+LaTeX: \end{figure}




#+attr_latex: width=10em
#+CAPTION: Accessing the Postgraduate Database using MDB Tools ODBC
#+LABEL: fig:mdbodbc
#+BEGIN_DITAA postgrad_db_access -r -S -E

+----------+
| Workload |
| DB       |
| {s}      |
| c888     |
| (MYSQL)  |
+----------+
     ^
     |
+----------+
| Python   |
| pyodbc   |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| Unix     |
| ODBC     |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| MDB Tools|
| {io}     |
| cBLU     |
+----------+
     ^
     |
+-------------+
| Postgrad    |
| DB          |
| {s}         |
| c888        |
| (MS Access) |
| /mnt/seatdb |
+-------------+
#+END_DITAA



The mounting of the Samba share is a risky move.  You are relying on
the connection being maintained.  This cannot be counted upon and if
the connection is lost, the application may not know this, and will
fall down when it does try.  There is no way for it to reconnect under
the environment that it is installed on.  However connecting to the
database via tcp to a MSSQL server, would not have these problems.
This would also eliminate the dependency on MDB Tools, removing a
possible fail point.  It does not overcome connection problems like if
the server goes down, but if something goes wrong, the application may
be able to remedy the situation by trying again.
Since this involves having to mount a samba share and then access the
DB file it was suggested that I connect to it via MSSQL.  Then speak
to it in SQL avoiding the extra step of using MDB Tools.  Not only
does this



#+attr_latex: width=10em
#+CAPTION: Accessing the Postgraduate Database using FreeTDS ODBC
#+LABEL: fig:freetds
#+BEGIN_DITAA postgrad_db_mssql -r -S -E

+----------+
| Workload |
| DB       |
| {s}      |
| c888     |
| (MYSQL)  |
+----------+
     ^
     |
+----------+
| Python   |
| pyodbc   |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| Unix     |
| ODBC     |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| FreeTDS  |
| ODBC     |
| {io}     |
| cBLU     |
+----------+
     ^
     |
+----------+
| Postgrad |
| DB       |
| {s}      |
| c888     |
| (MSSQL)  |
+----------+
#+END_DITAA


To get this to work I had to modify the pyodbc module code.  It was
returning the wrong values for integer and double values, and the text
had unwanted characters at the end of the strings returned.


There are 3 views or users of this system.
 - Manager
 - Cluster leader
 - Staff

Each has a different set of functions available to them.

The manager is like a cut down implementation of a superuser.  They
have overall access to all the data needed to obtain the Workload
stats.  They even have limited ability to modify some of the data like
Teaching Allocations, and is the only one able to import fresh data
into the database.  This includes the Postgraduate database.







How flexible do you want it?  What does it need to do and what extra
features can you justify adding to it

jquery hover events work well in changing a html tag into a html form
tag, like a <span> into a <input type="text".../>, and back again, but
this doesn't work so well when going back to a span from a
<select../>.  If you bring up the drop down menu and try and use the
mouse to select one of the options, the hover out event wound trigger
changing the element back to a <span> tag.  This is not what is
wanted, so the hover out event has to disabled when the <select> is
clicked with the change back event being tied to the change event
associated with <select>.  The problem with this is that if the user
doesn't change the selection the change event is not triggered so the
<select> control stays where it is.  This is not wanted, so but there
is nothing that can be done simply to overcome this.  The decision was
to use the focus events, so that when the user select another thing in
the page, the tag changes back to the span tag.  This is not ideal,
but it's these kind of compromises that have to be dealt with when
creating web applications like this, that rely on only w3c standards
compliant html, css and javascript.

The biggest barrier to what I can do is what do all the browsers have
in common.  What css standards do they all implement?  What html tags
will they all use, and what javascript functionality do they all
implement?  That is the biggest problem when doing a web application,
the fact that each browser behaves in a different way in the way they
display your pages, and the javascript implementation will have
different behaviors, like IE is pedantic about have variable declared
with the var tag.

**** Responsiveness of application
How do you overcome the problem of doing lots of IO and calculations
at once?  How fast does it have to be and how can you optimise it.

There are two places to process the data and one place to display the
results. You can use client side scripts, like javascript to process
the data, and it can be processed on the server side.  The more data
that is processed on the server side the less people that it can
handle at once.  Also doing it all on the server side means the pages
have to be reloaded every time a new choice is made.  The client side
processing of data, takes some of the load off the server, but it has
the downside, of relying on the clients browser to have the
functionality required, like javascript, which could be of a different
version to the one that the site was developed for.  Also javascript
seems to be a lot slower to process data than the server side scripts
are.  The goal here is to have the pages reloaded as little as
possible, but load up in a reasonable time.  How much time is
reasonable depends on who you talk to, but I feel that more than 30
seconds is not acceptable.  Fortunately there is a javascript library,
present in all major browsers, called Ajax.  It can be used to fetch
information from the server without reloading the page.  I also found
that using libraries like jquery, overcome most of the
incompatibilities of javascript between browsers, and also have some
convenient routines to make finding and manipulating the displayed
page through the HTML DOM.  It also handles events like clicking of
tags, like clicking a <div> element, making it easier to control the
way it looks and responds to the users input.  The combination of
javascript and ajax, makes the creation of web based applications
possible.  The addition of jquery, makes manipulation of elements
easier.  (must provide proof)

jquery makes for a uniform javascript api across most of the major
browsers, like IE and Firefox.  This simplifies the development of web
applications and reduces the number of issues that come from having
more than one brand of web browser accessing the site.


I at first used javascript to fill the table entries.  This worked,
but it was extremely slow.  I decided this was not acceptable, as
users expect a quick response to queries, so I implemented it on the
server side.  It was still slow, but faster than the javascript
version.  (Diagrams needed of both systems used)

#+attr_latex: width=10em
#+CAPTION: Determining the page content from the the client side using javascript
#+LABEL: fig:clientside
#+BEGIN_DITAA client-side -r -S -E
+----------+
| Workload |
| Stats    |
| {d}      |
| cC02     |
+-----+----+
      ^
      |
+-----+------+
| {io}       |
| Javascript |
| cBLU       |
+-----+------+
      ^
      |
+-----+------+
| {io}       |
| django     |
| cBLU       |
+-----+------+
      ^
      |
+------------+
| {s}        |
| DB         |
| c888       |
+------------+

#+END_DITAA

*** Solutions
**** Method of development
Web based application developed in python using the django framework.
Needs to be able to run in a web server environment.  Apache is being
used, with the module wsgi. mod_python could also be used, but
development and support for mod_python doesn't exist anymore, and wsgi
is recommended anyway.
**** Deploying the application
Theoretically it could be deployed on any OS which has a web server
that can run python. However it was decided to run it on a Centos
Server under the SEAT domain.
**** Security
While it is an issue is not a high priority.  We have been
given the impression that the staff in SEAT are open about the hours
they have done, and honest.  The restriction I imposed are those of
write access.  Administrators get access to everything, Staff get to
only view the results, and cluster leaders get to only alter the parts
that are relevant to their cluster.




**** Framework choice
Django was chosen, as it is a python library, and we wanted to solve
this problem in python.  The django framework is a kitchen sink
approach, for web development with a model (show model diagram).


Django uses the Model Template View (MTV) development pattern.
 - M is the model which is the data access layer.
 - T is the templates which is the presentation layer.
 - V is the views which is the business logic layer.

In the diagram in

#+attr_latex: width=10em
#+CAPTION: The Django model
#+LABEL: fig:mtv
#+BEGIN_DITAA  mtv_django -r -S -E
 +----------+
 | {d}      |
 | Template |
 | cC02     |
 +-----+----+
       ^
       |
   +---+--+
   | {io} |
   | View |
   | cBLU |
   +---+--+
       ^
       |
       |
   +---+---+
   | {s}   |
   | Model |
   | c888  |
   +-------+
#+END_DITAA

#+attr_latex: width=30em
#+CAPTION: The flow of workload data from Cluster leaders to the SEAT manager
#+LABEL: fig:clusterdataflow
#+BEGIN_DITAA cluster_leader_to_seat_manager -r -S -E

 +---------+       +---------+
 | Cluster |       | Cluster |
 | Leader  +------>+ Leader  +------------------+
 | {d}     |       | View    |                  |
 | cC02    |       | {io}cBLU|                  |
 +---------+       +---------+                  |
                                                |
                                                |
                                                |
 +---------+       +---------+                  V
 | Cluster |       | Cluster |             +----+-----+
 | Leader  +------>+ Leader  +------------>+ Workload |
 | {d}     |       | View    |             | DB       |
 | cC02    |       | {io}cBLU|             | c888     |
 +---------+       +---------+        +--->+ {s}      |
                                      |    +----------+
 +---------+       +---------+        |          |
 | Cluster |       | Cluster |        |          |
 | Leader  +------>+ Leader  +--------+          |
 | {d}     |       | View    |        |          |
 | cC02    |       | {io}cBLU|        |          V
 +---------+       +---------+        |      +---+-----+
     .                 .              |      | Manager |
     .                 .              |      | View    |
     .                 .              |      |{io}cBLU |
     .                 .              |      +---+-----+
     .                 .              |          |
 +---------+       +---------+        |          |
 | Cluster |       | Cluster |        |          |
 | Leader  +------>+ Leader  +--------+          |
 | {d}     |       | View    |                   V
 | cC02    |       |{io}cBLU |               +---+-----+
 +---------+       +---------+               | Manager |
                                             | {d}     |
                                             | cC02    |
                                             +---------+
#+END_DITAA


#+attr_latex: width=40em
#+CAPTION: The Workload data entry process
#+LABEL: fig:workloadprocess
[[./images/workload_process.png]]



**** Database and importing of data


**** Feature choice
**** Code optimisation
*** Conclusion

* Paper Planner
** The Problem
*** How to represent it to users
*** How to solve it
This was going to be a complete application, but it was realised that
there was not enough time to do everything, so the Use case shown in
figure \ref{fig:usecase1} was adopted, and this would be the scenario that would be
solved using constraints satisfaction.


#+LaTeX: \begin{figure}[H]
#+LaTeX: \centering
#+begin_example
A Student does their first year of study at university.  They pass a
number of papers.  They have not decided upon a major yet, but they
want to know what their options are.  They want to know what major
suits their choice of papers so far the best, and what are the
possible paper combinations they can have for their future programme
of study.  These combinations must be valid for the choice of degree
and major, and allows them to complete their degree if done.  
#+end_example
#+LaTeX: \caption{\label{fig:usecase1} Use case for student having done one year of study}
#+LaTeX: \end{figure}



The first priority was to learn what are Constraints Satisfaction
Problems.  To do this I looked on line and found a definition with a
example, in this case it was the map colours problem.  



What software support there is for Constraints Satisfaction Problems
(CSP) was looked at.  There were criteria under
which the library would be used, in a effort to stay in the language of
choice, python, as much as possible, the library had to be written in
either C/C++ or python.  C/C++ was considered as python can use these
libraries through either the module ctypes or in the form of a
specially written C module, using Python C API.  If it was written
as a C module for python, that could lead to it only being usable by a
Python interpreter written in C.  The choice was to make the
environment used as configurable as possible, so cytpes was chosen, as
in theory, any Python interpreter, no matter what language they are
written in has a ctypes implementation, as ctypes has become part of
the set of standard modules since (citation needed here).


Gecode was looked at and was the choice for implementing the
CSP, as it is a mature library, with one of the
authors claiming that it is relatively bug free.  Also there seemed to
be quiet a few references to Gecode in the forms that were looked at.
Thus there should be plenty of examples on how to solve various
problems using Gecode.

So To use this library there needs to be some research done on how to
use it.  There is a provided manual called "Modeling and Programming
with Gecode" (MPG) \cite{MPG1}.  The approach was to read as much of
this manual MPG as is needed to implement the solution come up with to
solve the problem.


While reading this document, some of the examples were gone through to
figure out how Gecode encodes CSP.


In Figure \ref{fig:GecodeArch} The Gecode Model Archatechture you have
3 layers, the Model, 

#+ATTR_LaTeX: width=30em
#+CAPTION: The Gecode Model Archatechture
#+LABEL: fig:GecodeArch
[[./images/gecode-model.png]]

One of the strategies taken was to have a look and see what books
there are on the subject, in regard to the problem.  The books
available are almost non existent, except for one book that was a
collection of articles which sounded like they might be solving a
similar problem was "Planning, Scheduling and Constraint Satisfaction:
to Practice." \cite{COBA01}.  However the problem they were
attempting to solve, were not close enough to the Paper Planner
problem.



** Solutions chosen
The solution come up with, as shown in figure
\ref{fig:decisionprocess}, aims at being simple.  The problem of a
large search space has been addressed by narrowing down the search by
using a simple algorithm of counting the number of papers done that
are in the major schedule for each major available, and the major that
has the academic record has the most papers, is the chosen set that is
used to create a leads to tree.  This tree is then used as the search
space for the constraints satisfaction part.  The rules are based upon
the minimum required papers to satisfy the degree requirements and the
minimum to satisfy the major requirements.  
#+attr_latex: width=30em
#+CAPTION: The decision process for determining programme selection options
#+LABEL: fig:decisionprocess
#+BEGIN_DITAA decision-process-diagram -r -S -E
               +---------+   +----------+   +----------+   +--------------+
               | Major   |   | Leads to |   | Degree   |   | Valid        |
               | Paper   |   | Paper    |   | Paper    |   | Degree       |
               | List    |   | DB       |   | List     |   | Paper        |
               | {s}c888 |   | {s}c888  |   | {s} c888 |   | Combinations |
               |         |   |          |   |          |   | {s}c888      |
               +----+----+   +----+-----+   +----------+   +--------------+
                    |    |        |         |              |
                    |    +----+   |         |              |
                    |         |   |         |              |
                    V         V   V         V              V
+----------+   +----+-----+   +---+---------+  +-----------+--+
| Student  |   | Select   |   | Create      |  | Determine    |
| Academic |   | Best     |   | Paper       |  | Valid        |
| Record   +-->+ Major    +-->+ Leads to    +->+ Paper        |
| {s}c888  |   | {io}cBLU |   | Tree        |  | Combinations |
|          |   |          |   | {io}cBLU    |  | {io} cBLU    |
+----------+   +----------+   +-------------+  +--------------+
#+END_DITAA
*** Web Representation
*** Constraints Satisfaction
*** Database use.
*** Programming library choice
*** Programming language choice
** Challenges
*** Using python to run C++ code
Python can import C libraries using ctypes and run C functions.
*** How to represent and encode the problem



** Conclusion
Conclusion is here

\bibliographystyle{plain}
\bibliography{bibliography}
